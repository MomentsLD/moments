import matplotlib.pyplot as plt
import numpy as np
import math
import scipy.interpolate

import integration as it
#import jackknife as jk
import utils as ut
#-----------------------------------
# 1 dimension case
# drift, mutations and selection
#-----------------------------------

#-------------
# Parameters :
#-------------
# total population size
N = 1
# selection
gamma = -1 # same as in dadi
# dominance
h = 0.5
# mutation rate
theta = 1 # same as in dadi default
# population sample size
m = 1000
n = 50
# simulation final time (number of generations)
tp = 40 # same as in dadi
# time step for the integration
dt = 1
#-------------

'''f = lambda x: 10000#+0.01*x
# input from CSV files generated by Mathematica
Ns = np.genfromtxt("N0.5acc.csv", delimiter='\n')*N
ts = np.genfromtxt("t0.5acc.csv", delimiter='\n')*2*N

# this makes 't' a monotonically decreasing array, and 'interp1d' will have
# problems with that. so we flip the arrays over
newt = [None] * len(ts)
newN = [None] * len(ts)
for i in range(1, len(ts) + 1):
    newt[i - 1] = ts[len(ts) - i]
    newN[i - 1] = Ns[len(ts) - i]
newt = np.array(newt)
newN = np.array(newN)
# interpolate to find N(t)
Nt = scipy.interpolate.interp1d(newt, newN)'''

# Initialisation
v = np.random.rand(n-1)
#v2 = np.random.rand(n-1)
v = it.integrate_N_cst(v, N, n, tp, dt, gamma=-1)
#v2 = it.integrate_CN_itJK(f, n, tp, dt, gamma=-1)

vv = np.random.rand(m-1)
vv = it.integrate_N_cst(vv, N, m, tp, dt, gamma=-1)
v2 = ut.project_1D(vv,n)
#print(A)
X = np.arange(1,n)
print(v)
dadi = np.array([1.0068576749576321, 0.5069125198430761, 0.3402833907523453,
        0.25698794630445, 0.20702617433642986, 0.17373140804983522,
        0.14996079249402988, 0.1321429020968054, 0.11829361323776826,
        0.10722245328989807, 0.09817185018738106, 0.09063675721087361,
        0.08426752787256082, 0.07881441585091774, 0.07409427495190402,
        0.06996974658499733, 0.06633579283617838, 0.06311071851682637,
        0.06023002835529426, 0.057642127031226884, 0.05530524777170964,
        0.05318521860321305, 0.05125381132061539, 0.049487503214158325,
        0.04786653598211695, 0.04637419181764861, 0.044996230365406314,
        0.04372044633047851, 0.042536318616682285, 0.04143472963736368,
        0.04040773895330278, 0.03944839935367189, 0.03855060637697759,
        0.037708974387286334, 0.036918733894679694, 0.03617564598911884,
        0.03547593065004881, 0.03481620637568781, 0.034193439100265066,
        0.03360489877381904, 0.03304812229631604, 0.03252088174703815,
        0.032021157047222165, 0.03154711235066198, 0.031097075582371035,
        0.030669520646254573, 0.0302630519042818, 0.029876390595899752,
        0.02950836292051365, 0.02915788955020663, 0.028823976376393712,
        0.02850570632430564, 0.02820223209427048, 0.027912769709654967,
        0.027636592768801718, 0.027373027312965082, 0.027121447234598885,
        0.02688127016078322, 0.02665195375542003, 0.026432992391343387,
        0.026223914149897172, 0.026024278111010414, 0.025833671901494663,
        0.025651709473322796, 0.025478029087123905, 0.02531229147913124,
        0.025154178192418577, 0.025003390055515114, 0.024859645793449615,
        0.024722680757983083, 0.02459224576528104, 0.02446810603058222,
        0.024350040190564713, 0.02423783940511612, 0.02413130653109875,
        0.02403025536148113, 0.023934509923895474, 0.02384390383329027,
        0.023758279693887035, 0.023677488546129218, 0.023601389354737448,
        0.023529848534364104, 0.02346273950967861, 0.023399942307016412,
        0.02334134317499448, 0.02328683423173807, 0.0232363131365797,
        0.023189682784286226, 0.023146851020044164, 0.023107730373591408,
        0.023072237811024604, 0.023040294502939783, 0.023011825607679205,
        0.0229867600685618, 0.022965030424069333, 0.022946572630045844,
        0.022931325893046035, 0.02291923251403809, 0.0229102377417311])

dadi2 = np.array([0.9871737773054508, 0.4872851856388492, 0.3207114966236889,
         0.23747024546022188, 0.18756140175362362, 0.1543182977500561,
         0.13059808233452833, 0.11282933544682024, 0.09902793961874268,
         0.08800342860239528, 0.07899823675096654, 0.07150732371115877,
         0.06518104925883898, 0.05976967320608094, 0.05509005534618652,
         0.05100484292002341, 0.047409003683109005, 0.044220847950910566,
         0.04137588578826826, 0.038822527042487356, 0.03651900993886756,
         0.03443116733243111, 0.03253077567699948, 0.030794316752385066,
         0.02920203657741947, 0.027737221497241154, 0.02638563514039924,
         0.02513507602831431, 0.023975026714108456, 0.02289637309394721,
         0.02189117804548282, 0.020952497509341438, 0.020074230010580053,
         0.01925099273540985, 0.018478018852128943, 0.017751071945442492,
         0.01706637432649899, 0.016420546662586532, 0.015810556894752095,
         0.015233676817954405, 0.014687445015510104, 0.014169635088781588,
         0.013678228320087856, 0.013211390063550356, 0.012767449283970405,
         0.012344880764687654, 0.01194228958690941, 0.011558397549252624,
         0.0111920312503232, 0.010842111601505314, 0.010507644573655644,
         0.010187713011597906, 0.009881469375385782, 0.009588129288195808,
         0.009306965788186593, 0.009037304196326925, 0.008778517524545943,
         0.00853002235899254, 0.008291275162033674, 0.008061768944137307,
         0.007841030263192824, 0.0076286165142988365, 0.0074241134777429975,
         0.007227133096932793, 0.00703731146151217, 0.0068543069739007215,
         0.006677798680090738, 0.006507484747792144, 0.006343081076975935,
         0.006184320029575218, 0.006030949266594969, 0.005882730682186981,
         0.005739439425391082, 0.005600863001248945, 0.0054668004438814775,
         0.005337061554900772, 0.005211466201216217, 0.00508984366690377,
         0.0049720320543471756, 0.004857877730339086, 0.004747234813255926,
         0.0046399646977994796, 0.004535935614136234, 0.004435022218567327,
         0.004337105213131792, 0.004242070991787441, 0.004149811311030324,
         0.0040602229830081805, 0.00397320758935812, 0.003888671214156059,
         0.0038065241945072436, 0.003726680887435045, 0.003649059451840772,
         0.0035735816444116544, 0.003500172628448745, 0.003428760794672177,
         0.003359277593138997, 0.003291657375479472, 0.0032258372467219754])

#plt.plot(X, 1/X, 'g')
#plt.plot(X, v)
#plt.plot(X, v2, 'g')

plt.plot(X, abs(v2-v)/v2, 'g')

#plt.plot(X, abs(ss-v)/ss, 'g')
#plt.plot(X, dadi/dadi[0])
#plt.plot(X, abs(v/v[0]-dadi/dadi[0])*dadi[0]/dadi, 'r')
#plt.plot(X, abs(v2-dadi2)/dadi2, 'r')
#plt.plot(X, v2)
#plt.plot(X, v, 'r')
#plt.plot(X, abs(v-dadi2)/dadi2, 'r')
#plt.plot(X, abs(v2-dadi2)/dadi2, 'g')

plt.yscale('log')
plt.xlabel("frequency in the popuation")
#plt.ylabel("relative error (%)")
#plt.title("2 jumps extrapolation for 1/x")
plt.show()




