import matplotlib.pyplot as plt
import numpy as np
import math
import scipy.interpolate

import integration as it
import jackknife as jk
#-----------------------------------
# 1 dimension case
# drift, mutations and selection
#-----------------------------------

#-------------
# Parameters :
#-------------
# total population size
N = 10000
# selection
gamma = 0 # same as in dadi
s = gamma/N
# dominance
h = 0.5
# mutation rate
u = 1/(4*N) # same as in dadi default
# population sample size
n = 400
# simulation final time (number of generations)
tp = 128 # same as in dadi
Tmax = tp*2*N
# time step for the integration
dt = 100
#-------------

f = lambda x: 10000+0.01*x
# input from CSV files generated by Mathematica
Ns = np.genfromtxt("N0.5acc.csv", delimiter='\n')*N
ts = np.genfromtxt("t0.5acc.csv", delimiter='\n')*2*N

# this makes 't' a monotonically decreasing array, and 'interp1d' will have
# problems with that. so we flip the arrays over
newt = [None] * len(ts)
newN = [None] * len(ts)
for i in range(1, len(ts) + 1):
    newt[i - 1] = ts[len(ts) - i]
    newN[i - 1] = Ns[len(ts) - i]
newt = np.array(newt)
newN = np.array(newN)
# interpolate to find N(t)
Nt = scipy.interpolate.interp1d(newt, newN)

# Initialisation
v = np.zeros(n-1)
v = it.integrate_N_lambda(v, Nt, n, tp, dt, u=1, h=h)

B = it.calcB(u, n, N)
D = it.calcD(n)
S1 = it.calcS1(s, h , n)
S2 = it.calcS2(s, h , n)
ss = it.initialize(N, D, B, S1, S2)
X = np.arange(1,n)


dadi= np.array([0.999939501764,0.500008884843,0.333341623983,0.250008004319,0.200007827192,0.166674370319,0.14286475327,0.125007535907,0.111118584829,0.100007419995,0.0909164631962,0.0833406622946,0.0769303658105,0.0714358226898,0.0666738821622,0.0625071811529,0.058830677314,0.0555626710447,0.0526386626633,0.0500070524274,0.0476260691198,0.0454615362931,0.0434852212321,0.0416735966769,0.0400068997313,0.038468407947,0.0370438762773,0.0357210946843,0.0344895372748,0.03334008161,0.0322647823412,0.0312566872901,0.0303096869678,0.0294183906502,0.0285780236971,0.0277843419852,0.0270335602161,0.0263222915451,0.025647496497,0.025006439545,0.0243966520439,0.0238159004581,0.0232621590237,0.0227335861377,0.0222285038958,0.021745380299,0.0212828137318,0.0208395193806,0.0204143173148,0.0200061219988,0.0196139330376,0.0192368269899,0.0188739501085,0.0185245118872,0.0181877793114,0.017863071725,0.0175497562375,0.0172472436064,0.016954984538,0.0166724663585,0.0163992100122,0.0161347673504,0.0158787186787,0.0156306705335,0.0153902536647,0.0151571212012,0.0149309469805,0.0147114240265,0.014498263159,0.0142911917223,0.0140899524218,0.0138943022572,0.0137040115432,0.0135188630103,0.0133386509765,0.0131631805854,0.012992267103,0.0128257352691,0.0126634186973,0.0125051593205,0.0123508068777,0.0122002184376,0.0120532579571,0.0119097958716,0.0117697087135,0.0116328787579,0.0114991936929,0.0113685463112,0.0112408342243,0.011115959594,0.0109938288827,0.0108743526199,0.0107574451832,0.0106430245935,0.0105310123238,0.0104213331189,0.0103139148268,0.0102086882406,0.0101055869497,0.0100045471998,0.00990550776158,0.00980840980684,0.00971319679197,0.00961981434811,0.00952821017758,0.00943833395619,0.009350137241,0.00926357338327,0.00917859744611,0.00909516612668,0.0090132376826,0.00893277186227,0.00885372983889,0.00877607414802,0.0086997686283,0.00862477836527,0.00855106963815,0.0084786098692,0.0084073675757,0.00833731232434,0.00826841468787,0.00820064620381,0.00813397933531,0.00806838743376,0.00800384470328,0.0079403261669,0.0078778076343,0.00781626567108,0.00775567756948,0.0076960213204,0.00763727558676,0.00757941967805,0.00752243352598,0.00746629766133,0.00741099319168,0.00735650178027,0.00730280562571,0.00724988744254,0.00719773044273,0.00714631831787,0.00709563522218,0.00704566575621,0.00699639495127,0.0069478082544,0.00689989151413,0.00685263096664,0.00680601322263,0.00676002525466,0.00671465438498,0.0066698882739,0.0066257149086,0.00658212259234,0.00653909993417,0.00649663583901,0.00645471949804,0.00641334037961,0.00637248822034,0.00633215301668,0.00629232501671,0.00625299471232,0.00621415283155,0.00617579033142,0.00613789839079,0.00610046840369,0.00606349197274,0.00602696090289,0.00599086719537,0.00595520304182,0.0059199608187,0.00588513308181,0.00585071256106,0.00581669215544,0.00578306492809,0.0057498241016,0.00571696305346,0.00568447531164,0.00565235455038,0.00562059458604,0.00558918937315,0.00555813300055,0.00552741968772,0.00549704378117,0.00546699975094,0.00543728218729,0.00540788579744,0.0053788054024,0.00535003593397,0.00532157243173,0.00529341004026,0.00526554400634,0.00523796967627,0.00521068249329,0.00518367799507,0.00515695181128,0.00513049966121,0.00510431735151,0.00507840077394,0.00505274590327,0.00502734879515,0.00500220558411,0.00497731248158,0.00495266577402,0.00492826182102,0.00490409705358,0.00488016797228,0.00485647114568,0.00483300320862,0.00480976086062,0.0047867408644,0.0047639400443,0.00474135528486,0.00471898352938,0.00469682177858,0.00467486708921,0.00465311657276,0.00463156739422,0.00461021677082,0.00458906197083,0.00456810031243,0.00454732916253,0.00452674593569,0.00450634809305,0.00448613314128,0.00446609863156,0.00444624215861,0.00442656135968,0.00440705391369,0.00438771754025,0.00436854999877,0.00434954908766,0.00433071264342,0.00431203853986,0.00429352468725,0.00427516903162,0.00425696955392,0.00423892426932,0.00422103122649,0.00420328850689,0.00418569422407,0.00416824652302,0.0041509435795,0.00413378359945,0.00411676481829,0.0040998855004,0.00408314393846,0.00406653845293,0.00405006739144,0.00403372912827,0.00401752206384,0.0040014446241,0.00398549526014,0.00396967244759,0.00395397468618,0.00393840049927,0.00392294843338,0.00390761705773,0.00389240496379,0.00387731076489,0.00386233309575,0.0038474706121,0.00383272199026,0.00381808592675,0.00380356113792,0.00378914635957,0.00377484034656,0.00376064187248,0.00374654972928,0.00373256272696,0.00371867969318,0.00370489947299,0.00369122092846,0.00367764293841,0.00366416439807,0.0036507842188,0.00363750132779,0.00362431466778,0.00361122319676,0.00359822588773,0.00358532172839,0.00357250972091,0.00355978888166,0.00354715824095,0.0035346168428,0.0035221637447,0.00350979801734,0.00349751874444,0.00348532502246,0.00347321596041,0.00346119067963,0.0034492483136,0.00343738800767,0.00342560891892,0.00341391021593,0.00340229107859,0.0033907506979,0.0033792882758,0.00336790302498,0.00335659416869,0.00334536094055,0.00333420258442,0.00332311835422,0.0033121075137,0.00330116933638,0.00329030310531,0.00327950811295,0.00326878366099,0.00325812906025,0.00324754363046,0.00323702670018,0.00322657760663,0.00321619569555,0.00320588032106,0.00319563084555,0.0031854466395,0.00317532708142,0.00316527155766,0.00315527946232,0.00314535019713,0.0031354831713,0.00312567780144,0.00311593351142,0.00310624973228,0.00309662590209,0.00308706146586,0.00307755587543,0.00306810858937,0.00305871907287,0.00304938679764,0.00304011124181,0.00303089188984,0.00302172823243,0.00301261976638,0.00300356599458,0.00299456642583,0.00298562057483,0.00297672796204,0.00296788811362,0.00295910056131,0.00295036484242,0.00294168049967,0.00293304708115,0.00292446414024,0.00291593123553,0.00290744793074,0.00289901379465,0.00289062840101,0.00288229132852,0.00287400216068,0.00286576048579,0.00285756589685,0.0028494179915,0.00284131637195,0.0028332606449,0.00282525042153,0.00281728531738,0.00280936495231,0.00280148895045,0.00279365694011,0.00278586855376,0.00277812342795,0.00277042120325,0.00276276152423,0.00275514403933,0.00274756840089,0.00274003426505,0.00273254129171,0.00272508914448,0.00271767749061,0.00271030600098,0.00270297435001,0.00269568221566,0.00268842927931,0.0026812152258,0.00267403974332,0.00266690252339,0.0026598032608,0.0026527416536,0.00264571740303,0.00263873021349,0.00263177979246,0.00262486585054,0.00261798810132,0.00261114626141,0.00260434005036,0.00259756919063,0.00259083340758,0.00258413242938,0.00257746598703,0.00257083381427,0.0025642356476,0.00255767122619,0.0025511402919,0.00254464258919,0.00253817786514,0.00253174586938,0.00252534635407,0.00251897907387,0.00251264378592,0.00250634024977])


#plt.plot(X, 1/X, 'g')
#plt.plot(X, ss)
#plt.plot(X, abs(ss-v)/ss, 'g')
#plt.plot(X, dadi/dadi[0])
plt.plot(X, abs(v/v[0]-dadi/dadi[0])*dadi[0]/dadi, 'r')
#plt.plot(X, v/v[0], 'r')
#plt.yscale('log')
plt.xlabel("frequency in the popuation")
#plt.ylabel("relative error (%)")
#plt.title("2 jumps extrapolation for 1/x")
plt.show()




