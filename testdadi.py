# -*- coding: UTF-8 -*-

import matplotlib.pyplot as plt
import numpy as np
import math
import scipy.interpolate
import time
#import seaborn

import dadi

import integration as it
import utils as ut
#-----------------------------------
# 1 dimension case
# drift, mutations and selection
#-----------------------------------

#-------------
# Parameters :
#-------------
# total population size
N = 1
# selection
gamma = -1 # same as in dadi
s = gamma/N
# dominance
h = 0.1
# mutation rate
theta = 1.0
# population sample size
m = 100
n = 50
# simulation final time (number of generations)
tp = 100 # same as in dadi
# time step for the integration
dt = 0.01*tp

#---------------------
# calcul de l'erreur :
#---------------------
def calc_error(sfs, ref):
    sfs = np.array(sfs)
    ref = np.array(ref)
    return np.amax(abs(sfs-ref)/ref)
# solution limite dadi (N constant, n = 50)
dadi_lim = [0.9749777463699822, 0.4753412082218248, 0.3090223693358758,
            0.22603005309494903, 0.1763643777717113, 0.14335881693380148,
            0.11987065685092238, 0.10232861128478851, 0.08874869317694249,
            0.07794056338273345, 0.06914678014405887, 0.061862423867666,
            0.055737972043018835, 0.05052379922879165, 0.046036877074969826,
            0.04213996186409673, 0.03872812765122083, 0.035719788380099406,
            0.033050555141635685, 0.030668936274155116, 0.028533266024343057,
            0.026609470862655978, 0.024869418514403937, 0.02328967974731652,
            0.02185058734335818, 0.020535512243258298, 0.019330300559354363,
            0.018222831239329187, 0.017202665257893584, 0.016260764979594895,
            0.015389267847378114, 0.014581302512877562, 0.013830838405400444,
            0.013132561854932442, 0.012481773458141703, 0.011874302556591202,
            0.011306435589519673, 0.010774855765165249, 0.010276592018924668,
            0.009808975632987275, 0.00936960320923171, 0.008956304936360977,
            0.008567117289283756, 0.008200259455479877, 0.007854112908471728,
            0.0075272036493754585, 0.007218186719045902, 0.006925832649580201,
            0.006649015578028639]
tps_dadi_lim = 5.08
# solution limite nous (N constant, n = 50)
tps_nous_lim = 117.44
nous_lim = [0.97498604, 0.47534096, 0.30902222, 0.22602995, 0.1763643, 0.14335876,
                0.11987061, 0.10232858, 0.08874866, 0.07794054, 0.06914676, 0.06186241,
                0.05573796, 0.05052379, 0.04603687, 0.04213996, 0.03872812, 0.03571978,
                0.03305055, 0.03066893, 0.02853327, 0.02660947, 0.02486942, 0.02328968,
                0.02185059, 0.02053551, 0.0193303, 0.01822283, 0.01720267, 0.01626077,
                0.01538927, 0.01458131, 0.01383084, 0.01313256, 0.01248178, 0.01187431,
                0.01130644, 0.01077486, 0.01027659, 0.00980898, 0.00936961, 0.00895631,
                0.00856712, 0.00820026, 0.00785412, 0.00752721, 0.00721819, 0.00692583,
                0.00664902]

# h = 0.1, gamma = -1
'''dadi_lim = [1.0029923511226306, 0.5025294147641103, 0.33539107892752196,
            0.2515867312708497, 0.20111700960589007, 0.16731589528345778,
            0.14304117358166554, 0.1247220478037894, 0.11037500951766077,
            0.0988101856727172, 0.08927058645200733, 0.0812517284845595,
            0.0744045082777191, 0.06847970081194471, 0.06329465827323479,
            0.058712496412268805, 0.054628626613780096, 0.05096177705656827,
            0.04764784913209401, 0.04463561682245883, 0.04188365475708589,
            0.03935810404174933, 0.03703102092035966, 0.03487913830893195,
            0.03288292462754899, 0.031025859916293863, 0.029293872927750524,
            0.02767489897517875, 0.026158529409497526, 0.02473573136393397,
            0.023398621916270998, 0.022140284779647086, 0.020954620513551223,
            0.01983622336477303, 0.018780279421500262, 0.017782481943817506,
            0.016838960626876925, 0.015946222234533004, 0.015101100565497589,
            0.014300714120401879, 0.013542430155321127, 0.012823834056561834,
            0.012142703168633168, 0.011496984364176312, 0.010884774770161436,
            0.01030430516569406, 0.009753925648518569, 0.009232093233787236,
            0.008737361102997063]

nous_lim = [1.00300073, 0.5025292, 0.33539095, 0.25158664, 0.20111694, 0.16731584,
            0.14304113, 0.12472201, 0.11037498, 0.09881016, 0.08927057, 0.08125171,
            0.07440449, 0.06847969, 0.06329465, 0.05871249, 0.05462862, 0.05096177,
            0.04764784, 0.04463561, 0.04188365, 0.0393581,  0.03703102, 0.03487914,
            0.03288292, 0.03102586, 0.02929387, 0.0276749,  0.02615853, 0.02473573,
            0.02339862, 0.02214029, 0.02095462, 0.01983623, 0.01878028, 0.01778248,
            0.01683896, 0.01594622, 0.0151011, 0.01430072, 0.01354243, 0.01282384,
            0.01214271, 0.01149699, 0.01088478, 0.01030431,  0.00975393, 0.0092321,
            0.00873736]'''

#-------------
# Our code   :
#-------------
f = lambda x: N+2*x/1000.0

v = np.zeros(n-1)
v2 = np.zeros(m-1)
start_time = time.time()
#v = it.integrate_N_lambda(v, f, n, tp, dt, theta=theta, h=h, gamma=gamma)
#v = it.integrate_N_cst(v, N, n, tp, dt, theta=theta, h=h, gamma=gamma)
v2 = it.integrate_N_cst(v2, N, m, tp, dt, theta=theta, h=h, gamma=gamma)
v = ut.project_1D(v2, n)
interval = time.time() - start_time
print('Total time our code:', interval, ', erreur : ', calc_error(v,nous_lim))
#print(v)
#---------
# Dadi   :
#---------
# use ∂a∂i to simulate allele frequency spectrum
def model((nu, t), (n1, ), pts):
    xx = dadi.Numerics.default_grid(pts)
    phi = 0.0*dadi.PhiManip.phi_1D(xx,gamma=gamma,h=h)
    phi = dadi.Integration.one_pop(phi, xx, t, nu=nu, gamma=gamma, h=h)
    sfs = dadi.Spectrum.from_phi(phi, (n1, ), (xx, ))
    return sfs

start_time = time.time()
fs = model((1, tp), (n, ), 100)
interval = time.time() - start_time
print('Total time dadi:', interval, ', erreur : ', calc_error(fs[1:n],dadi_lim))

print('erreur limite : ',calc_error(dadi_lim,nous_lim))
#print(fs)
# define the plotting environment
fig = plt.figure()
fig1 = fig.add_subplot(211)
fig2 = fig.add_subplot(212)

X = np.arange(1,n)

fig1.plot(X, fs[1:n], 'r')
fig1.plot(X, v, 'g')

fig2.plot(X, abs(v-fs[1:n])/fs[1:n], 'r')
fig2.set_yscale('log')
#plt.xlabel("frequency in the popuation")
#plt.ylabel("relative error (%)")
#plt.title("2 jumps extrapolation for 1/x")
'''plt.show()

err_nous = [0.003624011513381888, 0.00103556426789108, 0.00027821991823523, 0.00012703700965021, 4.7036985465192022e-05, 1.2383116634104955e-05]
tps_nous = [0.0027618408203125, 0.06410408020019531, 0.19678711891174316, 0.31757497787475586, 0.5675690174102783, 1.362584114074707]

err_dadi = [0.019539123464524102, 0.0047753110213680297, 0.001176282540894242, 0.00051831479175679638, 0.00018398493147840574, 4.4465074328755806e-05, 1.2923484463825119e-05]
tps_dadi = [0.18600106239318848, 0.21576809883117676, 0.289431095123291, 0.32295799255371094, 0.4232039451599121, 0.6893441677093506, 1.8436989784240723]
err_lim = 8.5064813516322995e-06

plt.plot(tps_nous, err_nous, 'r')
plt.plot(tps_dadi, err_dadi, 'g')
plt.yscale('log')
plt.xlabel("computation time (s)")
plt.ylabel("relative distance to the limit")
plt.title("convergences comparison (N = 1, n = 50): dadi vs our code")
plt.show()'''