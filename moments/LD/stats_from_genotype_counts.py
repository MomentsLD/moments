import numpy as np

"""
We computed these using Mathematica, using the following commands


gs = {g1, g2, g3, g4, g5, g6, g7, g8, g9};
ns = {n1, n2, n3, n4, n5, n6, n7, n8, n9};
expG[monome_] := Table[Exponent[monome, gs[[i]]], {i, 1, 9}]
ToMonomesG[t_] := MonomialList[t, gs]

unbiasedMonomialG[term_] := Module[{k, vars, coeff},
  k = expG[term];
  vars = Product[gs[[j]]^k[[j]], {j, 1, 9}];
  coeff = Coefficient[term, vars];
  coeff* Product[Binomial[ns[[i]], k[[i]]], {i, 1, 9}] / Binomial[nd, Total[k]] / Multinomial @@ k
]

unbiasedSample[term_] := Plus @@ (unbiasedMonomialG[#] & /@ ToMonomesG[term])


"""


def Dhat(counts):
    n1, n2, n3, n4, n5, n6, n7, n8, n9 = counts
    nd = sum(counts)
    numer = (
        -(n2 * n4) / 4.0
        - (n3 * n4) / 2.0
        + (n1 * n5) / 4.0
        - (n3 * n5) / 4.0
        + (n1 * n6) / 2.0
        + (n2 * n6) / 4.0
        - (n2 * n7) / 2.0
        - n3 * n7
        - (n5 * n7) / 4.0
        - (n6 * n7) / 2.0
        + (n1 * n8) / 2.0
        - (n3 * n8) / 2.0
        + (n4 * n8) / 4.0
        - (n6 * n8) / 4.0
        + n1 * n9
        + (n2 * n9) / 2.0
        + (n4 * n9) / 2.0
        + (n5 * n9) / 4.0
    )
    denom = nd * (nd - 1.0)
    return 2.0 * numer / denom


def DD(counts, pop_nums):
    if len(pop_nums) != 2:
        raise ValueError("Can pass only two population indexes to DD")
    pop1, pop2 = pop_nums
    if pop1 == pop2:
        # compute D^2 for pop in pop_nums
        cs = counts[pop1]
        n1, n2, n3, n4, n5, n6, n7, n8, n9 = cs
        n = sum(cs)
        numer = (
            n2 * n4
            - n2 ** 2 * n4
            + 4 * n3 * n4
            - 4 * n2 * n3 * n4
            - 4 * n3 ** 2 * n4
            - n2 * n4 ** 2
            - 4 * n3 * n4 ** 2
            + n1 * n5
            - n1 ** 2 * n5
            + n3 * n5
            + 2 * n1 * n3 * n5
            - n3 ** 2 * n5
            - 4 * n3 * n4 * n5
            - n1 * n5 ** 2
            - n3 * n5 ** 2
            + 4 * n1 * n6
            - 4 * n1 ** 2 * n6
            + n2 * n6
            - 4 * n1 * n2 * n6
            - n2 ** 2 * n6
            + 2 * n2 * n4 * n6
            - 4 * n1 * n5 * n6
            - 4 * n1 * n6 ** 2
            - n2 * n6 ** 2
            + 4 * n2 * n7
            - 4 * n2 ** 2 * n7
            + 16 * n3 * n7
            - 16 * n2 * n3 * n7
            - 16 * n3 ** 2 * n7
            - 4 * n2 * n4 * n7
            - 16 * n3 * n4 * n7
            + n5 * n7
            + 2 * n1 * n5 * n7
            - 4 * n2 * n5 * n7
            - 18 * n3 * n5 * n7
            - n5 ** 2 * n7
            + 4 * n6 * n7
            + 8 * n1 * n6 * n7
            - 16 * n3 * n6 * n7
            - 4 * n5 * n6 * n7
            - 4 * n6 ** 2 * n7
            - 4 * n2 * n7 ** 2
            - 16 * n3 * n7 ** 2
            - n5 * n7 ** 2
            - 4 * n6 * n7 ** 2
            + 4 * n1 * n8
            - 4 * n1 ** 2 * n8
            + 4 * n3 * n8
            + 8 * n1 * n3 * n8
            - 4 * n3 ** 2 * n8
            + n4 * n8
            - 4 * n1 * n4 * n8
            + 2 * n2 * n4 * n8
            - n4 ** 2 * n8
            - 4 * n1 * n5 * n8
            - 4 * n3 * n5 * n8
            + n6 * n8
            + 2 * n2 * n6 * n8
            - 4 * n3 * n6 * n8
            + 2 * n4 * n6 * n8
            - n6 ** 2 * n8
            - 16 * n3 * n7 * n8
            - 4 * n6 * n7 * n8
            - 4 * n1 * n8 ** 2
            - 4 * n3 * n8 ** 2
            - n4 * n8 ** 2
            - n6 * n8 ** 2
            + 16 * n1 * n9
            - 16 * n1 ** 2 * n9
            + 4 * n2 * n9
            - 16 * n1 * n2 * n9
            - 4 * n2 ** 2 * n9
            + 4 * n4 * n9
            - 16 * n1 * n4 * n9
            + 8 * n3 * n4 * n9
            - 4 * n4 ** 2 * n9
            + n5 * n9
            - 18 * n1 * n5 * n9
            - 4 * n2 * n5 * n9
            + 2 * n3 * n5 * n9
            - 4 * n4 * n5 * n9
            - n5 ** 2 * n9
            - 16 * n1 * n6 * n9
            - 4 * n2 * n6 * n9
            + 8 * n2 * n7 * n9
            + 2 * n5 * n7 * n9
            - 16 * n1 * n8 * n9
            - 4 * n4 * n8 * n9
            - 16 * n1 * n9 ** 2
            - 4 * n2 * n9 ** 2
            - 4 * n4 * n9 ** 2
            - n5 * n9 ** 2
        ) / 16.0 + (
            -(
                (n2 / 2.0 + n3 + n5 / 4.0 + n6 / 2.0)
                * (n4 / 2.0 + n5 / 4.0 + n7 + n8 / 2.0)
            )
            + (n1 + n2 / 2.0 + n4 / 2.0 + n5 / 4.0)
            * (n5 / 4.0 + n6 / 2.0 + n8 / 2.0 + n9)
        ) ** 2
        denom = n * (n - 1) * (n - 2) * (n - 3)
        return 4.0 * numer / denom
    else:
        # compute D1 D2 for the two pops in pop_nums
        cs1, cs2 = counts[pop1], counts[pop2]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            -(
                (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
            )
            + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
            * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
        ) * (
            -(
                (n22 / 2.0 + n23 + n25 / 4.0 + n26 / 2.0)
                * (n24 / 2.0 + n25 / 4.0 + n27 + n28 / 2.0)
            )
            + (n21 + n22 / 2.0 + n24 / 2.0 + n25 / 4.0)
            * (n25 / 4.0 + n26 / 2.0 + n28 / 2.0 + n29)
        )
        denom = n1 * (n1 - 1) * n2 * (n2 - 1)
        return 4.0 * numer / denom


def Dz(counts, pop_nums):
    if len(pop_nums) != 3:
        raise ValueError("Must pass three populations to Dz")
    pop1, pop2, pop3 = pop_nums
    if pop1 == pop2 == pop3:  # Dz(i,i,i)
        cs = counts[pop1]
        n1, n2, n3, n4, n5, n6, n7, n8, n9 = cs
        n = sum(cs)
        numer = (
            -(n2 * n4)
            + 3 * n1 * n2 * n4
            + n2 ** 2 * n4
            + 2 * n3 * n4
            + 4 * n1 * n3 * n4
            - n2 * n3 * n4
            - 4 * n3 ** 2 * n4
            + n2 * n4 ** 2
            + 2 * n3 * n4 ** 2
            + 2 * n1 * n5
            - 3 * n1 ** 2 * n5
            - n1 * n2 * n5
            + 2 * n3 * n5
            + 2 * n1 * n3 * n5
            - n2 * n3 * n5
            - 3 * n3 ** 2 * n5
            - n1 * n4 * n5
            + n3 * n4 * n5
            + 2 * n1 * n6
            - 4 * n1 ** 2 * n6
            - n2 * n6
            - n1 * n2 * n6
            + n2 ** 2 * n6
            + 4 * n1 * n3 * n6
            + 3 * n2 * n3 * n6
            - 2 * n1 * n4 * n6
            - 2 * n2 * n4 * n6
            - 2 * n3 * n4 * n6
            + n1 * n5 * n6
            - n3 * n5 * n6
            + 2 * n1 * n6 ** 2
            + n2 * n6 ** 2
            + 2 * n2 * n7
            + 4 * n1 * n2 * n7
            + 2 * n2 ** 2 * n7
            + 8 * n3 * n7
            + 4 * n1 * n3 * n7
            - 4 * n3 ** 2 * n7
            - n2 * n4 * n7
            + 2 * n5 * n7
            + 2 * n1 * n5 * n7
            + n2 * n5 * n7
            + 2 * n3 * n5 * n7
            - n4 * n5 * n7
            + 2 * n6 * n7
            - n2 * n6 * n7
            - 2 * n4 * n6 * n7
            + n5 * n6 * n7
            + 2 * n6 ** 2 * n7
            - 4 * n2 * n7 ** 2
            - 4 * n3 * n7 ** 2
            - 3 * n5 * n7 ** 2
            - 4 * n6 * n7 ** 2
            + 2 * n1 * n8
            - 4 * n1 ** 2 * n8
            - 2 * n1 * n2 * n8
            + 2 * n3 * n8
            - 2 * n2 * n3 * n8
            - 4 * n3 ** 2 * n8
            - n4 * n8
            - n1 * n4 * n8
            - 2 * n2 * n4 * n8
            - n3 * n4 * n8
            + n4 ** 2 * n8
            + n1 * n5 * n8
            + n3 * n5 * n8
            - n6 * n8
            - n1 * n6 * n8
            - 2 * n2 * n6 * n8
            - n3 * n6 * n8
            - 2 * n4 * n6 * n8
            + n6 ** 2 * n8
            + 4 * n1 * n7 * n8
            - 2 * n2 * n7 * n8
            + 3 * n4 * n7 * n8
            - n5 * n7 * n8
            - n6 * n7 * n8
            + 2 * n1 * n8 ** 2
            + 2 * n3 * n8 ** 2
            + n4 * n8 ** 2
            + n6 * n8 ** 2
            + 8 * n1 * n9
            - 4 * n1 ** 2 * n9
            + 2 * n2 * n9
            + 2 * n2 ** 2 * n9
            + 4 * n1 * n3 * n9
            + 4 * n2 * n3 * n9
            + 2 * n4 * n9
            - n2 * n4 * n9
            + 2 * n4 ** 2 * n9
            + 2 * n5 * n9
            + 2 * n1 * n5 * n9
            + n2 * n5 * n9
            + 2 * n3 * n5 * n9
            + n4 * n5 * n9
            - n2 * n6 * n9
            - 2 * n4 * n6 * n9
            - n5 * n6 * n9
            + 4 * n1 * n7 * n9
            + 4 * n3 * n7 * n9
            + 4 * n4 * n7 * n9
            + 2 * n5 * n7 * n9
            + 4 * n6 * n7 * n9
            - 2 * n2 * n8 * n9
            + 4 * n3 * n8 * n9
            - n4 * n8 * n9
            - n5 * n8 * n9
            + 3 * n6 * n8 * n9
            - 4 * n1 * n9 ** 2
            - 4 * n2 * n9 ** 2
            - 4 * n4 * n9 ** 2
            - 3 * n5 * n9 ** 2
        ) / 4.0 + (-n1 + n3 - n4 + n6 - n7 + n9) * (-n1 - n2 - n3 + n7 + n8 + n9) * (
            -(
                (n2 / 2.0 + n3 + n5 / 4.0 + n6 / 2.0)
                * (n4 / 2.0 + n5 / 4.0 + n7 + n8 / 2.0)
            )
            + (n1 + n2 / 2.0 + n4 / 2.0 + n5 / 4.0)
            * (n5 / 4.0 + n6 / 2.0 + n8 / 2.0 + n9)
        )
        denom = n * (n - 1) * (n - 2) * (n - 3)
        return 2.0 * numer / denom
    elif pop1 == pop2:  # Dz(i,i,j)
        cs1, cs2 = counts[pop1], counts[pop3]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            (
                (
                    2 * n12 * n17
                    + 4 * n13 * n17
                    + 2 * n15 * n17
                    + 4 * n16 * n17
                    - 2 * n11 * n18
                    + 2 * n13 * n18
                    - 2 * n14 * n18
                    + 2 * n16 * n18
                    - 4 * n11 * n19
                    - 2 * n12 * n19
                    - 4 * n14 * n19
                    - 2 * n15 * n19
                )
                * (-n21 + n23 - n24 + n26 - n27 + n29)
            )
            / 4.0
            + (
                -(
                    (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                    * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
                )
                + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
                * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
            )
            * (-n21 + n23 - n24 + n26 - n27 + n29)
            + (-n11 - n12 - n13 + n17 + n18 + n19)
            * (
                -(
                    (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                    * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
                )
                + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
                * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
            )
            * (-n21 + n23 - n24 + n26 - n27 + n29)
        )
        denom = n2 * n1 * (n1 - 1.0) * (n1 - 2)
        return 2.0 * numer / denom
    elif pop1 == pop3:  # Dz(i,j,i)
        cs1, cs2 = counts[pop1], counts[pop2]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            (
                (
                    2 * n13 * n14
                    + 2 * n13 * n15
                    - 2 * n11 * n16
                    - 2 * n12 * n16
                    + 4 * n13 * n17
                    + 2 * n16 * n17
                    + 4 * n13 * n18
                    + 2 * n16 * n18
                    - 4 * n11 * n19
                    - 4 * n12 * n19
                    - 2 * n14 * n19
                    - 2 * n15 * n19
                )
                * (-n21 - n22 - n23 + n27 + n28 + n29)
            )
            / 4.0
            + (
                -(
                    (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                    * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
                )
                + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
                * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
            )
            * (-n21 - n22 - n23 + n27 + n28 + n29)
            + (-n11 + n13 - n14 + n16 - n17 + n19)
            * (
                -(
                    (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                    * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
                )
                + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
                * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
            )
            * (-n21 - n22 - n23 + n27 + n28 + n29)
        )
        denom = n2 * n1 * (n1 - 1.0) * (n1 - 2)
        return 2.0 * numer / denom
    elif pop2 == pop3:  # Dz(i,j,j)
        cs1, cs2 = counts[pop1], counts[pop2]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            -(
                (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
            )
            + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
            * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
        ) * (-n21 + n23 + n27 - n29) + (
            -(
                (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
            )
            + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
            * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
        ) * (
            -n21 + n23 - n24 + n26 - n27 + n29
        ) * (
            -n21 - n22 - n23 + n27 + n28 + n29
        )
        denom = n2 * (n2 - 1) * n1 * (n1 - 1.0)
        return 2.0 * numer / denom
    else:  # Dz(i,j,k)
        cs1 = counts[pop1]
        cs2 = counts[pop2]
        cs3 = counts[pop3]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n31, n32, n33, n34, n35, n36, n37, n38, n39 = cs3
        n1 = sum(cs1)
        n2 = sum(cs2)
        n3 = sum(cs3)
        numer = (
            (
                -(
                    (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                    * (n14 / 2.0 + n15 / 4.0 + n17 + n18 / 2.0)
                )
                + (n11 + n12 / 2.0 + n14 / 2.0 + n15 / 4.0)
                * (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
            )
            * (-n21 - n22 - n23 + n27 + n28 + n29)
            * (-n31 + n33 - n34 + n36 - n37 + n39)
        )
        denom = n1 * (n1 - 1) * n2 * n3
        return 2.0 * numer / denom


def pi2(counts, pop_nums):
    if len(pop_nums) != 4:
        raise ValueError("Must pass four populations to pi2")
    pop1, pop2, pop3, pop4 = pop_nums
    if pop1 == pop2 == pop3 == pop4:  # pi2(i,i;i,i)
        cs = counts[pop1]
        n1, n2, n3, n4, n5, n6, n7, n8, n9 = cs
        n = sum(cs)
        numer = (n1 + n2 + n3 + n4 / 2.0 + n5 / 2.0 + n6 / 2.0) * (
            n1 + n2 / 2.0 + n4 + n5 / 2.0 + n7 + n8 / 2.0
        ) * (n2 / 2.0 + n3 + n5 / 2.0 + n6 + n8 / 2.0 + n9) * (
            n4 / 2.0 + n5 / 2.0 + n6 / 2.0 + n7 + n8 + n9
        ) + (
            13 * n2 * n4
            - 16 * n1 * n2 * n4
            - 11 * n2 ** 2 * n4
            + 16 * n3 * n4
            - 28 * n1 * n3 * n4
            - 24 * n2 * n3 * n4
            - 8 * n3 ** 2 * n4
            - 11 * n2 * n4 ** 2
            - 20 * n3 * n4 ** 2
            - 6 * n5
            + 12 * n1 * n5
            - 4 * n1 ** 2 * n5
            + 17 * n2 * n5
            - 20 * n1 * n2 * n5
            - 11 * n2 ** 2 * n5
            + 12 * n3 * n5
            - 28 * n1 * n3 * n5
            - 20 * n2 * n3 * n5
            - 4 * n3 ** 2 * n5
            + 17 * n4 * n5
            - 20 * n1 * n4 * n5
            - 32 * n2 * n4 * n5
            - 40 * n3 * n4 * n5
            - 11 * n4 ** 2 * n5
            + 11 * n5 ** 2
            - 16 * n1 * n5 ** 2
            - 17 * n2 * n5 ** 2
            - 16 * n3 * n5 ** 2
            - 17 * n4 * n5 ** 2
            - 6 * n5 ** 3
            + 16 * n1 * n6
            - 8 * n1 ** 2 * n6
            + 13 * n2 * n6
            - 24 * n1 * n2 * n6
            - 11 * n2 ** 2 * n6
            - 28 * n1 * n3 * n6
            - 16 * n2 * n3 * n6
            + 24 * n4 * n6
            - 36 * n1 * n4 * n6
            - 38 * n2 * n4 * n6
            - 36 * n3 * n4 * n6
            - 20 * n4 ** 2 * n6
            + 17 * n5 * n6
            - 40 * n1 * n5 * n6
            - 32 * n2 * n5 * n6
            - 20 * n3 * n5 * n6
            - 42 * n4 * n5 * n6
            - 17 * n5 ** 2 * n6
            - 20 * n1 * n6 ** 2
            - 11 * n2 * n6 ** 2
            - 20 * n4 * n6 ** 2
            - 11 * n5 * n6 ** 2
            + 16 * n2 * n7
            - 28 * n1 * n2 * n7
            - 20 * n2 ** 2 * n7
            + 16 * n3 * n7
            - 48 * n1 * n3 * n7
            - 44 * n2 * n3 * n7
            - 16 * n3 ** 2 * n7
            - 24 * n2 * n4 * n7
            - 44 * n3 * n4 * n7
            + 12 * n5 * n7
            - 28 * n1 * n5 * n7
            - 40 * n2 * n5 * n7
            - 48 * n3 * n5 * n7
            - 20 * n4 * n5 * n7
            - 16 * n5 ** 2 * n7
            + 16 * n6 * n7
            - 48 * n1 * n6 * n7
            - 48 * n2 * n6 * n7
            - 44 * n3 * n6 * n7
            - 36 * n4 * n6 * n7
            - 40 * n5 * n6 * n7
            - 20 * n6 ** 2 * n7
            - 8 * n2 * n7 ** 2
            - 16 * n3 * n7 ** 2
            - 4 * n5 * n7 ** 2
            - 8 * n6 * n7 ** 2
            + 16 * n1 * n8
            - 8 * n1 ** 2 * n8
            + 24 * n2 * n8
            - 36 * n1 * n2 * n8
            - 20 * n2 ** 2 * n8
            + 16 * n3 * n8
            - 48 * n1 * n3 * n8
            - 36 * n2 * n3 * n8
            - 8 * n3 ** 2 * n8
            + 13 * n4 * n8
            - 24 * n1 * n4 * n8
            - 38 * n2 * n4 * n8
            - 48 * n3 * n4 * n8
            - 11 * n4 ** 2 * n8
            + 17 * n5 * n8
            - 40 * n1 * n5 * n8
            - 42 * n2 * n5 * n8
            - 40 * n3 * n5 * n8
            - 32 * n4 * n5 * n8
            - 17 * n5 ** 2 * n8
            + 13 * n6 * n8
            - 48 * n1 * n6 * n8
            - 38 * n2 * n6 * n8
            - 24 * n3 * n6 * n8
            - 38 * n4 * n6 * n8
            - 32 * n5 * n6 * n8
            - 11 * n6 ** 2 * n8
            - 28 * n1 * n7 * n8
            - 36 * n2 * n7 * n8
            - 44 * n3 * n7 * n8
            - 16 * n4 * n7 * n8
            - 20 * n5 * n7 * n8
            - 24 * n6 * n7 * n8
            - 20 * n1 * n8 ** 2
            - 20 * n2 * n8 ** 2
            - 20 * n3 * n8 ** 2
            - 11 * n4 * n8 ** 2
            - 11 * n5 * n8 ** 2
            - 11 * n6 * n8 ** 2
            + 16 * n1 * n9
            - 16 * n1 ** 2 * n9
            + 16 * n2 * n9
            - 44 * n1 * n2 * n9
            - 20 * n2 ** 2 * n9
            - 48 * n1 * n3 * n9
            - 28 * n2 * n3 * n9
            + 16 * n4 * n9
            - 44 * n1 * n4 * n9
            - 48 * n2 * n4 * n9
            - 48 * n3 * n4 * n9
            - 20 * n4 ** 2 * n9
            + 12 * n5 * n9
            - 48 * n1 * n5 * n9
            - 40 * n2 * n5 * n9
            - 28 * n3 * n5 * n9
            - 40 * n4 * n5 * n9
            - 16 * n5 ** 2 * n9
            - 44 * n1 * n6 * n9
            - 24 * n2 * n6 * n9
            - 36 * n4 * n6 * n9
            - 20 * n5 * n6 * n9
            - 48 * n1 * n7 * n9
            - 48 * n2 * n7 * n9
            - 48 * n3 * n7 * n9
            - 28 * n4 * n7 * n9
            - 28 * n5 * n7 * n9
            - 28 * n6 * n7 * n9
            - 44 * n1 * n8 * n9
            - 36 * n2 * n8 * n9
            - 28 * n3 * n8 * n9
            - 24 * n4 * n8 * n9
            - 20 * n5 * n8 * n9
            - 16 * n6 * n8 * n9
            - 16 * n1 * n9 ** 2
            - 8 * n2 * n9 ** 2
            - 8 * n4 * n9 ** 2
            - 4 * n5 * n9 ** 2
        ) / 16.0
        denom = n * (n - 1) * (n - 2) * (n - 3)
        return numer / denom
    elif (pop1 == pop2 == pop3) or (
        pop1 == pop2 == pop4
    ):  # pi2(i,i;i,j) or pi2(i,i;j,i)
        if pop1 == pop3:
            cs1, cs2 = counts[pop1], counts[pop4]
        else:
            cs1, cs2 = counts[pop1], counts[pop3]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            (
                (
                    (-3 * n14) / 2.0
                    - (3 * n15) / 2.0
                    - (3 * n16) / 2.0
                    - 2 * n17
                    - 2 * n18
                    - 2 * n19
                )
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
            )
            / 2.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (
                    (-5 * n14) / 2.0
                    - (5 * n15) / 2.0
                    - (5 * n16) / 2.0
                    - 4 * n17
                    - 4 * n18
                    - 4 * n19
                )
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 2.0
            + (
                (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (
                    n15 * n21
                    + 2 * n16 * n21
                    + 2 * n18 * n21
                    + 4 * n19 * n21
                    + 2 * n22
                    - n12 * n22
                    - 2 * n13 * n22
                    + 2 * n14 * n22
                    + n15 * n22
                    + 4 * n17 * n22
                    + 3 * n18 * n22
                    + 2 * n19 * n22
                    + 4 * n23
                    - 2 * n12 * n23
                    - 4 * n13 * n23
                    + 4 * n14 * n23
                    + n15 * n23
                    - 2 * n16 * n23
                    + 8 * n17 * n23
                    + 4 * n18 * n23
                    + n15 * n24
                    + 2 * n16 * n24
                    + 2 * n18 * n24
                    + 4 * n19 * n24
                    + 2 * n25
                    - n12 * n25
                    - 2 * n13 * n25
                    + 2 * n14 * n25
                    + n15 * n25
                    + 4 * n17 * n25
                    + 3 * n18 * n25
                    + 2 * n19 * n25
                    + 4 * n26
                    - 2 * n12 * n26
                    - 4 * n13 * n26
                    + 4 * n14 * n26
                    + n15 * n26
                    - 2 * n16 * n26
                    + 8 * n17 * n26
                    + 4 * n18 * n26
                    + n15 * n27
                    + 2 * n16 * n27
                    + 2 * n18 * n27
                    + 4 * n19 * n27
                    + 2 * n28
                    - n12 * n28
                    - 2 * n13 * n28
                    + 2 * n14 * n28
                    + n15 * n28
                    + 4 * n17 * n28
                    + 3 * n18 * n28
                    + 2 * n19 * n28
                    + 4 * n29
                    - 2 * n12 * n29
                    - 4 * n13 * n29
                    + 4 * n14 * n29
                    + n15 * n29
                    - 2 * n16 * n29
                    + 8 * n17 * n29
                    + 4 * n18 * n29
                )
            )
            / 8.0
            + (
                n15 * n21
                + 2 * n16 * n21
                - 2 * n17 * n22
                - 2 * n18 * n22
                - 2 * n19 * n22
                - n15 * n23
                - 2 * n16 * n23
                - 4 * n17 * n23
                - 4 * n18 * n23
                - 4 * n19 * n23
                + n15 * n24
                + 2 * n16 * n24
                - 2 * n17 * n25
                - 2 * n18 * n25
                - 2 * n19 * n25
                - n15 * n26
                - 2 * n16 * n26
                - 4 * n17 * n26
                - 4 * n18 * n26
                - 4 * n19 * n26
                + n15 * n27
                + 2 * n16 * n27
                - 2 * n17 * n28
                - 2 * n18 * n28
                - 2 * n19 * n28
                - n15 * n29
                - 2 * n16 * n29
                - 4 * n17 * n29
                - 4 * n18 * n29
                - 4 * n19 * n29
            )
            / 8.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (
                    -(n15 * n21)
                    - 2 * n16 * n21
                    - 2 * n18 * n21
                    - 4 * n19 * n21
                    + n15 * n23
                    + 2 * n16 * n23
                    + 2 * n18 * n23
                    + 4 * n19 * n23
                    - n15 * n24
                    - 2 * n16 * n24
                    - 2 * n18 * n24
                    - 4 * n19 * n24
                    + n15 * n26
                    + 2 * n16 * n26
                    + 2 * n18 * n26
                    + 4 * n19 * n26
                    - n15 * n27
                    - 2 * n16 * n27
                    - 2 * n18 * n27
                    - 4 * n19 * n27
                    + n15 * n29
                    + 2 * n16 * n29
                    + 2 * n18 * n29
                    + 4 * n19 * n29
                )
            )
            / 8.0
        )
        denom = n2 * n1 * (n1 - 1) * (n1 - 2)
        return 1.0 * numer / denom

    elif (pop1 == pop3 == pop4) or (pop2 == pop3 == pop4):  # pi2(i,j;i,i), pi2(j,i;i,i)
        if pop1 == pop3:
            cs1, cs2 = counts[pop1], counts[pop2]
        elif pop2 == pop3:
            cs1, cs2 = counts[pop2], counts[pop1]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            (
                (
                    (-3 * n12) / 2.0
                    - 2 * n13
                    - (3 * n15) / 2.0
                    - 2 * n16
                    - (3 * n18) / 2.0
                    - 2 * n19
                )
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
            )
            / 4.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
            )
            / 2.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (
                    (-5 * n12) / 2.0
                    - 4 * n13
                    - (5 * n15) / 2.0
                    - 4 * n16
                    - (5 * n18) / 2.0
                    - 4 * n19
                )
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 2.0
            + (
                (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (
                    n15 * n21
                    + 2 * n16 * n21
                    + 2 * n18 * n21
                    + 4 * n19 * n21
                    + n15 * n22
                    + 2 * n16 * n22
                    + 2 * n18 * n22
                    + 4 * n19 * n22
                    + n15 * n23
                    + 2 * n16 * n23
                    + 2 * n18 * n23
                    + 4 * n19 * n23
                    + 2 * n24
                    + 2 * n12 * n24
                    + 4 * n13 * n24
                    - n14 * n24
                    + n15 * n24
                    + 3 * n16 * n24
                    - 2 * n17 * n24
                    + 2 * n19 * n24
                    + 2 * n25
                    + 2 * n12 * n25
                    + 4 * n13 * n25
                    - n14 * n25
                    + n15 * n25
                    + 3 * n16 * n25
                    - 2 * n17 * n25
                    + 2 * n19 * n25
                    + 2 * n26
                    + 2 * n12 * n26
                    + 4 * n13 * n26
                    - n14 * n26
                    + n15 * n26
                    + 3 * n16 * n26
                    - 2 * n17 * n26
                    + 2 * n19 * n26
                    + 4 * n27
                    + 4 * n12 * n27
                    + 8 * n13 * n27
                    - 2 * n14 * n27
                    + n15 * n27
                    + 4 * n16 * n27
                    - 4 * n17 * n27
                    - 2 * n18 * n27
                    + 4 * n28
                    + 4 * n12 * n28
                    + 8 * n13 * n28
                    - 2 * n14 * n28
                    + n15 * n28
                    + 4 * n16 * n28
                    - 4 * n17 * n28
                    - 2 * n18 * n28
                    + 4 * n29
                    + 4 * n12 * n29
                    + 8 * n13 * n29
                    - 2 * n14 * n29
                    + n15 * n29
                    + 4 * n16 * n29
                    - 4 * n17 * n29
                    - 2 * n18 * n29
                )
            )
            / 8.0
            + (
                n15 * n21
                + 2 * n18 * n21
                + n15 * n22
                + 2 * n18 * n22
                + n15 * n23
                + 2 * n18 * n23
                - 2 * n13 * n24
                - 2 * n16 * n24
                - 2 * n19 * n24
                - 2 * n13 * n25
                - 2 * n16 * n25
                - 2 * n19 * n25
                - 2 * n13 * n26
                - 2 * n16 * n26
                - 2 * n19 * n26
                - 4 * n13 * n27
                - n15 * n27
                - 4 * n16 * n27
                - 2 * n18 * n27
                - 4 * n19 * n27
                - 4 * n13 * n28
                - n15 * n28
                - 4 * n16 * n28
                - 2 * n18 * n28
                - 4 * n19 * n28
                - 4 * n13 * n29
                - n15 * n29
                - 4 * n16 * n29
                - 2 * n18 * n29
                - 4 * n19 * n29
            )
            / 8.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (
                    -(n15 * n21)
                    - 2 * n16 * n21
                    - 2 * n18 * n21
                    - 4 * n19 * n21
                    - n15 * n22
                    - 2 * n16 * n22
                    - 2 * n18 * n22
                    - 4 * n19 * n22
                    - n15 * n23
                    - 2 * n16 * n23
                    - 2 * n18 * n23
                    - 4 * n19 * n23
                    + n15 * n27
                    + 2 * n16 * n27
                    + 2 * n18 * n27
                    + 4 * n19 * n27
                    + n15 * n28
                    + 2 * n16 * n28
                    + 2 * n18 * n28
                    + 4 * n19 * n28
                    + n15 * n29
                    + 2 * n16 * n29
                    + 2 * n18 * n29
                    + 4 * n19 * n29
                )
            )
            / 8.0
        )
        denom = n2 * n1 * (n1 - 1) * (n1 - 2)
        return 1.0 * numer / denom

    elif pop1 == pop2 and pop3 == pop4:  # pi2(i,i;j,j)
        cs1, cs2 = counts[pop1], counts[pop3]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (-n22 - n25 - n28)
            )
            / 4.0
            + (
                n14 * n22
                + n15 * n22
                + n16 * n22
                + n14 * n25
                + n15 * n25
                + n16 * n25
                + n14 * n28
                + n15 * n28
                + n16 * n28
            )
            / 16.0
            + (
                (-n14 - n15 - n16)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 4.0
            + (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
            * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
            * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
            * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
        )
        denom = n1 * (n1 - 1) * n2 * (n2 - 1)
        return 1.0 * numer / denom

    elif (pop1 == pop3 and pop2 == pop4) or (
        pop1 == pop4 and pop2 == pop3
    ):  # pi2(i,j;i,j) or pi2(i,j;j,i)
        cs1, cs2 = counts[pop1], counts[pop2]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n1 = sum(cs1)
        n2 = sum(cs2)
        numer = (
            (
                (-n14 / 2.0 - n15 / 2.0 - n16 / 2.0 - n17 - n18 - n19)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
            )
            / 4.0
            + (
                (-n15 / 4.0 - n16 / 2.0 - n18 / 2.0 - n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
            )
            / 4.0
            + (
                (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
            )
            / 4.0
            + (
                (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (-n22 / 2.0 - n23 - n25 / 2.0 - n26 - n28 / 2.0 - n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (-n25 / 4.0 - n26 / 2.0 - n28 / 2.0 - n29)
            )
            / 4.0
            + (
                (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (-n25 / 4.0 - n26 / 2.0 - n28 / 2.0 - n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n25 / 4.0 + n26 / 2.0 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n25 / 4.0 + n26 / 2.0 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (-n14 / 2.0 - n15 / 2.0 - n16 / 2.0 - n17 - n18 - n19)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (1 + n12 / 2.0 + n13 - n14 / 2.0 + n16 / 2.0 - n17 - n18 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (n15 / 4.0 + n16 / 2.0 + n18 / 2.0 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
            )
            / 4.0
            + (
                (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (1 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                (-n12 / 2.0 - n13 - n15 / 4.0 - n16 / 2.0)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (
                    -n12 / 2.0
                    - n13
                    - n15 / 2.0
                    - n16
                    - n18 / 2.0
                    - n19
                    - n22 / 2.0
                    - n23
                    - n25 / 2.0
                    - n26
                    - n28 / 2.0
                    - n29
                )
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                (n12 / 2.0 + n13 + n15 / 4.0 + n16 / 2.0)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
            )
            / 4.0
            + (
                n15 * n21
                + 2 * n16 * n21
                + 2 * n18 * n21
                + 4 * n19 * n21
                - n15 * n23
                - 2 * n16 * n23
                - 2 * n18 * n23
                - 4 * n19 * n23
                + n11 * n25
                - n13 * n25
                - n15 * n25
                - 2 * n16 * n25
                - n17 * n25
                - 2 * n18 * n25
                - 3 * n19 * n25
                + 2 * n11 * n26
                - 2 * n13 * n26
                - 2 * n15 * n26
                - 4 * n16 * n26
                - 2 * n17 * n26
                - 4 * n18 * n26
                - 6 * n19 * n26
                - n15 * n27
                - 2 * n16 * n27
                - 2 * n18 * n27
                - 4 * n19 * n27
                + 2 * n11 * n28
                - 2 * n13 * n28
                - 2 * n15 * n28
                - 4 * n16 * n28
                - 2 * n17 * n28
                - 4 * n18 * n28
                - 6 * n19 * n28
                + 4 * n11 * n29
                - 4 * n13 * n29
                - 3 * n15 * n29
                - 6 * n16 * n29
                - 4 * n17 * n29
                - 6 * n18 * n29
                - 8 * n19 * n29
            )
            / 16.0
        )
        denom = n1 * (n1 - 1) * n2 * (n2 - 1)
        return 1.0 * numer / denom

    elif pop1 == pop2:  # pi2(i,i;j,k)
        cs1 = counts[pop1]
        cs2 = counts[pop3]
        cs3 = counts[pop4]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n31, n32, n33, n34, n35, n36, n37, n38, n39 = cs3
        n1 = sum(cs1)
        n2 = sum(cs2)
        n3 = sum(cs3)
        numer = (
            (
                (-n14 / 2.0 - n15 / 2.0 - n16 / 2.0)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n22 / 2.0 + n23 + n25 / 2.0 + n26 + n28 / 2.0 + n29)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
            )
            / 2.0
            + (
                (-n14 / 2.0 - n15 / 2.0 - n16 / 2.0)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 / 2.0 + n24 + n25 / 2.0 + n27 + n28 / 2.0)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
            )
            / 2.0
        )
        denom = n1 * (n1 - 1) * n2 * n3
        return 1.0 * numer / denom

    elif pop3 == pop4:  # pi2(i,j;k,k)
        cs1 = counts[pop3]
        cs2 = counts[pop1]
        cs3 = counts[pop2]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n31, n32, n33, n34, n35, n36, n37, n38, n39 = cs3
        n1 = sum(cs1)
        n2 = sum(cs2)
        n3 = sum(cs3)
        numer = (
            (
                (-n12 / 2.0 - n15 / 2.0 - n18 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n31 + n32 + n33 + n34 / 2.0 + n35 / 2.0 + n36 / 2.0)
            )
            / 4.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n31 + n32 + n33 + n34 / 2.0 + n35 / 2.0 + n36 / 2.0)
            )
            / 2.0
            + (
                (-n12 / 2.0 - n15 / 2.0 - n18 / 2.0)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n34 / 2.0 + n35 / 2.0 + n36 / 2.0 + n37 + n38 + n39)
            )
            / 4.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n34 / 2.0 + n35 / 2.0 + n36 / 2.0 + n37 + n38 + n39)
            )
            / 2.0
        )
        denom = n1 * (n1 - 1) * n2 * n3
        return 1.0 * numer / denom

    elif (
        (pop1 == pop3) or (pop1 == pop4) or (pop2 == pop3) or (pop2 == pop4)
    ):  # pi2(i,j;i,k) or pi2(i,j;k,i) or pi2(i,j;j,k) or pi2(i,j;k,j)
        if pop1 == pop3:  # pi2(i,j;i,k)
            cs1 = counts[pop1]
            cs2 = counts[pop2]
            cs3 = counts[pop4]
        elif pop1 == pop4:  # pi2(i,j;k,i)
            cs1 = counts[pop1]
            cs2 = counts[pop2]
            cs3 = counts[pop3]
        elif pop2 == pop3:  # pi2(i,j;j,k)
            cs1 = counts[pop2]
            cs2 = counts[pop1]
            cs3 = counts[pop4]
        elif pop2 == pop4:  # pi2(i,j;k,j)
            cs1 = counts[pop2]
            cs2 = counts[pop1]
            cs3 = counts[pop3]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n31, n32, n33, n34, n35, n36, n37, n38, n39 = cs3
        n1 = sum(cs1)
        n2 = sum(cs2)
        n3 = sum(cs3)
        numer = (
            (
                (-n15 / 4.0 - n16 / 2.0 - n18 / 2.0 - n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
            )
            / 4.0
            + (
                (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
            )
            / 4.0
            + (
                (-n12 / 2.0 - n13 - n15 / 4.0 - n16 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n12 / 2.0 + n13 + n15 / 2.0 + n16 + n18 / 2.0 + n19)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
            )
            / 4.0
            + (
                (-n14 / 2.0 - n15 / 4.0 - n17 - n18 / 2.0)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
            )
            / 4.0
            + (
                (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
            )
            / 4.0
            + (
                (-n11 - n12 / 2.0 - n14 / 2.0 - n15 / 4.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n11 + n12 / 2.0 + n14 + n15 / 2.0 + n17 + n18 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
            )
            / 4.0
        )
        denom = n1 * (n1 - 1) * n2 * n3
        return 1.0 * numer / denom

    else:  # pi2(i,j,k,l)
        cs1, cs2, cs3, cs4 = counts[pop1], counts[pop2], counts[pop3], counts[pop4]
        n11, n12, n13, n14, n15, n16, n17, n18, n19 = cs1
        n21, n22, n23, n24, n25, n26, n27, n28, n29 = cs2
        n31, n32, n33, n34, n35, n36, n37, n38, n39 = cs3
        n41, n42, n43, n44, n45, n46, n47, n48, n49 = cs4
        n1 = sum(cs1)
        n2 = sum(cs2)
        n3 = sum(cs3)
        n4 = sum(cs4)
        numer = (
            (
                (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
                * (n41 + n42 / 2.0 + n44 + n45 / 2.0 + n47 + n48 / 2.0)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n32 / 2.0 + n33 + n35 / 2.0 + n36 + n38 / 2.0 + n39)
                * (n41 + n42 / 2.0 + n44 + n45 / 2.0 + n47 + n48 / 2.0)
            )
            / 4.0
            + (
                (n14 / 2.0 + n15 / 2.0 + n16 / 2.0 + n17 + n18 + n19)
                * (n21 + n22 + n23 + n24 / 2.0 + n25 / 2.0 + n26 / 2.0)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
                * (n42 / 2.0 + n43 + n45 / 2.0 + n46 + n48 / 2.0 + n49)
            )
            / 4.0
            + (
                (n11 + n12 + n13 + n14 / 2.0 + n15 / 2.0 + n16 / 2.0)
                * (n24 / 2.0 + n25 / 2.0 + n26 / 2.0 + n27 + n28 + n29)
                * (n31 + n32 / 2.0 + n34 + n35 / 2.0 + n37 + n38 / 2.0)
                * (n42 / 2.0 + n43 + n45 / 2.0 + n46 + n48 / 2.0 + n49)
            )
            / 4.0
        )
        denom = n1 * n2 * n3 * n4
        return 1.0 * numer / denom
