import numpy as np
from scipy.sparse import csc_matrix
import itertools

### multi-population model, one-pop higher order matrices below

# from mathematica output
# order of moments: D_i D_j , i <= j , 1:n
#                   D_i z_jk , i,j,k , 1:n
#                   zz_ijkl, i <= j, k <= l , 1:n
#                   zp_ij, i <= j , 1:n
#                   zq_ij, i <= j , 1:n
#                   1

# return csc matrices for each of these

def drift_one_pop(nu):
    A =  np.array([[ -3./nu , 1./nu , 1./16/nu , -1./16/nu , -1./16/nu , 1./16/nu ], [ 4./nu , -5./nu , 0 , 0 , 0 , 0 ], [ 0 , 16./nu , -2./nu , 1./nu , 1./nu , 0 ], [ 0 , 0 , 0 , -1./nu , 0 , 1./nu ], [ 0 , 0 , 0 , 0 , -1./nu , 1./nu ], [ 0 , 0 , 0 , 0 , 0 , 0 ]])
    return csc_matrix(A)

def recom_one_pop(rho):
    row = range(2)
    col = range(2)
    data = np.array([ -1.*rho , -rho/2. ])
    return csc_matrix((data,(row,col)),shape=(6,6))

def mutat_one_pop(theta):
    row = range(5)
    col = range(5)
    data = np.array([ -4.*theta , -4.*theta , -4.*theta , -2.*theta , -2.*theta ])
    return csc_matrix((data,(row,col)),shape=(6,6))

def drift_two_pop(params):
    nu1,nu2 = params
    row = [0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20, 20, 22, 22, 23, 23, 25, 25]
    col = [0, 3, 11, 20, 23, 26, 1, 2, 10, 19, 22, 25, 26, 0, 3, 4, 5, 1, 6, 1, 7, 8, 9, 2, 10, 3, 11, 20, 23, 4, 12, 24, 13, 20, 25, 5, 14, 21, 6, 7, 8, 16, 21, 17, 22, 23, 9, 18, 24, 10, 19, 22, 25, 20, 26, 22, 26, 23, 26, 25, 26]
    data = [-3/nu1, 1/nu1, 1/(16*nu1), -1/(16*nu1), -1/(16*nu1), 1/(16*nu1), -1/nu1 -1/nu2, -3/nu2, 1/nu2, 1/(16*nu2), -1/(16*nu2), -1/(16*nu2), 1/(16*nu2), 4/nu1, -5/nu1, -3/nu1, -3/nu1, 4/nu2, -1/nu1, 4/nu1, -1/nu2, -3/nu2, -3/nu2, 4/nu2, -5/nu2, 16/nu1, -2/nu1, 1/nu1, 1/nu1, 8/nu1, -1/nu1, 1/nu1, -1/nu1 -1/nu2, 1/nu2, 1/nu1, 8/nu1, -1/nu1, 1/nu1, 4/nu1, 4/nu2, 8/nu2, -1/nu2, 1/nu2, -1/nu1 -1/nu2, 1/nu1, 1/nu2, 8/nu2, -1/nu2, 1/nu2, 16/nu2, -2/nu2, 1/nu2, 1/nu2, -1/nu1, 1/nu1, -1/nu2, 1/nu2, -1/nu1, 1/nu1, -1/nu2, 1/nu2]
    return csc_matrix((data,(row,col)),shape=(27,27))

def recom_two_pop(params):
    rho = params
    row = range(3+2**3)
    col = range(3+2**3)
    data = [-1.*rho]*3 + [-rho/2.]*2**3
    return csc_matrix((data,(row,col)),shape=(27,27))

def mutat_two_pop(params):
    theta = params
    row = range(3+2**3+3**2+3+3)
    col = range(3+2**3+3**2+3+3)
    data = [-4.*theta]*(3+2**3+3**2) + [-2.*theta]*(3+3)
    return csc_matrix((data,(row,col)),shape=(27,27))

def migra_two_pop(params):
    m12,m21 = params
    row = [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25]
    col = [0, 1, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 7, 8, 9, 10, 3, 4, 5, 7, 11, 12, 14, 15, 3, 4, 6, 8, 12, 13, 15, 16, 3, 5, 6, 9, 14, 15, 17, 18, 4, 5, 6, 10, 15, 16, 18, 19, 3, 7, 8, 9, 11, 12, 14, 15, 4, 7, 8, 10, 12, 13, 15, 16, 5, 7, 9, 10, 14, 15, 17, 18, 6, 8, 9, 10, 15, 16, 18, 19, 11, 12, 14, 11, 12, 13, 15, 12, 13, 16, 11, 14, 15, 17, 12, 14, 15, 16, 18, 13, 15, 16, 19, 14, 17, 18, 15, 17, 18, 19, 16, 18, 19, 20, 21, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 24, 25]
    data = [-2*m21, 2*m21, m21/2, -m21/2, -m21/2, m21/2, m12, -m12 - m21, m21, m12/4, -m12/4, -m12/4, m12/4, m21/4, -m21/4, -m21/4, m21/4, 2*m12, -2*m12, m12/2, -m12/2, -m12/2, m12/2, -3*m21, m21, m21, m21, m21/4, -m21/4, -m21/4, m21/4, m12, -m12 - 2*m21, m21, m21, m21/4, -m21/4, -m21/4, m21/4, m12, -m12 - 2*m21, m21, m21, m21/4, -m21/4, -m21/4, m21/4, m12, m12, -2*m12 - m21, m21, m21/4, -m21/4, -m21/4, m21/4, m12, -m12 - 2*m21, m21, m21, m12/4, -m12/4, -m12/4, m12/4, m12, m12, -2*m12 - m21, m21, m12/4, -m12/4, -m12/4, m12/4, m12, m12, -2*m12 - m21, m21, m12/4, -m12/4, -m12/4, m12/4, m12, m12, m12, -3*m12, m12/4, -m12/4, -m12/4, m12/4, -4*m21, 2*m21, 2*m21, m12, -m12 - 3*m21, m21, 2*m21, 2*m12, -2*(m12 + m21), 2*m21, m12, -m12 - 3*m21, 2*m21, m21, m12, m12, -2*(m12 + m21), m21, m21, m12, 2*m12, -3*m12 - m21, m21, 2*m12, -2*(m12 + m21), 2*m21, 2*m12, m12, -3*m12 - m21, m21, 2*m12, 2*m12, -4*m12, -2*m21, 2*m21, m12, -m12 - m21, m21, 2*m12, -2*m12, -2*m21, 2*m21, m12, -m12 - m21, m21, 2*m12, -2*m12]
    return csc_matrix((data,(row,col)),shape=(27,27))

def drift_three_pop(params):
    nu1,nu2,nu3 = params
    row = [0, 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 41, 42, 42, 42, 43, 44, 44, 45, 45, 45, 46, 47, 47, 48, 48, 49, 50, 50, 50, 51, 51, 51, 52, 52, 52, 53, 53, 54, 54, 54, 54, 55, 55, 55, 56, 56, 56, 57, 57, 58, 59, 60, 60, 60, 61, 61, 62, 62, 62, 63, 63, 63, 64, 64, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 68, 69, 69, 72, 72, 74, 74, 75, 75, 78, 78, 80, 80]
    col = [0, 6, 33, 69, 75, 81, 1, 2, 3, 19, 54, 72, 78, 81, 4, 5, 32, 68, 74, 80, 81, 0, 6, 7, 8, 9, 1, 10, 11, 12, 13, 2, 14, 1, 15, 16, 17, 18, 3, 19, 20, 21, 22, 4, 23, 2, 24, 25, 26, 27, 4, 28, 29, 30, 31, 5, 32, 6, 33, 69, 75, 7, 34, 76, 8, 35, 77, 36, 69, 78, 37, 79, 38, 69, 80, 9, 39, 70, 10, 15, 11, 16, 42, 70, 17, 44, 70, 12, 45, 71, 13, 14, 24, 48, 71, 25, 26, 50, 71, 51, 72, 75, 18, 52, 76, 53, 77, 19, 54, 72, 78, 20, 55, 79, 56, 72, 80, 57, 73, 21, 27, 22, 60, 73, 23, 28, 29, 62, 73, 63, 74, 75, 64, 76, 30, 65, 77, 66, 74, 78, 31, 67, 79, 32, 68, 74, 80, 69, 81, 72, 81, 74, 81, 75, 81, 78, 81, 80, 81]
    data = [-3/nu1, 1/nu1, 1/(16*nu1), -1/(16*nu1), -1/(16*nu1), 1/(16*nu1), -1/nu1 -1/nu2, -1/nu1 -1/nu3, -3/nu2, 1/nu2, 1/(16*nu2), -1/(16*nu2), -1/(16*nu2), 1/(16*nu2), -1/nu2 -1/nu3, -3/nu3, 1/nu3, 1/(16*nu3), -1/(16*nu3), -1/(16*nu3), 1/(16*nu3), 4/nu1, -5/nu1, -3/nu1, -3/nu1, -3/nu1, 4/nu2, -1/nu1, -1/nu1, -3/nu1, -1/nu1, 4/nu3, -1/nu1, 4/nu1, -1/nu2, -3/nu2, -1/nu2, -3/nu2, 4/nu2, -5/nu2, -3/nu2, -1/nu2, -3/nu2, 4/nu3, -1/nu2, 4/nu1, -1/nu3, -1/nu3, -3/nu3, -1/nu3, 4/nu2, -1/nu3, -3/nu3, -3/nu3, -3/nu3, 4/nu3, -5/nu3, 16/nu1, -2/nu1, 1/nu1, 1/nu1, 8/nu1, -1/nu1, 1/nu1, 8/nu1, -1/nu1, 1/nu1, -1/nu1 -1/nu2, 1/nu2, 1/nu1, -1/nu1, 1/nu1, -1/nu1 -1/nu3, 1/nu3, 1/nu1, 8/nu1, -1/nu1, 1/nu1, 4/nu1, 4/nu2, 4/nu1, 8/nu2, -1/nu2, 1/nu2, 4/nu2, -1/nu3, 1/nu3, 8/nu1, -1/nu1, 1/nu1, 4/nu1, 4/nu1, 4/nu3, -1/nu2, 1/nu2, 4/nu3, 8/nu3, -1/nu3, 1/nu3, -1/nu1 -1/nu2, 1/nu1, 1/nu2, 8/nu2, -1/nu2, 1/nu2, -1/nu2, 1/nu2, 16/nu2, -2/nu2, 1/nu2, 1/nu2, 8/nu2, -1/nu2, 1/nu2, -1/nu2 -1/nu3, 1/nu3, 1/nu2, -1/nu1, 1/nu1, 4/nu2, 4/nu3, 8/nu2, -1/nu2, 1/nu2, 4/nu2, 4/nu3, 8/nu3, -1/nu3, 1/nu3, -1/nu1 -1/nu3, 1/nu1, 1/nu3, -1/nu3, 1/nu3, 8/nu3, -1/nu3, 1/nu3, -1/nu2 -1/nu3, 1/nu2, 1/nu3, 8/nu3, -1/nu3, 1/nu3, 16/nu3, -2/nu3, 1/nu3, 1/nu3, -1/nu1, 1/nu1, -1/nu2, 1/nu2, -1/nu3, 1/nu3, -1/nu1, 1/nu1, -1/nu2, 1/nu2, -1/nu3, 1/nu3]
    return csc_matrix((data,(row,col)),shape=(82,82))

def recom_three_pop(params):
    rho = params
    row = range(6+3**3)
    col = range(6+3**3)
    data = [-1.*rho]*6 + [-rho/2.]*3**3
    return csc_matrix((data,(row,col)),shape=(82,82))

def mutat_three_pop(params):
    theta = params
    row = range(6+3**3+6**2+6+6)
    col = range(6+3**3+6**2+6+6)
    data = [-4.*theta]*(6+3**3+6**2) + [-2.*theta]*(6+6)
    return csc_matrix((data,(row,col)),shape=(82,82))

def migra_three_pop(params):
    m12,m21,m13,m31,m23,m32 = params
    row = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80]
    col = [0, 1, 2, 6, 7, 8, 9, 10, 12, 14, 0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 0, 1, 2, 4, 5, 6, 8, 10, 11, 12, 13, 14, 24, 25, 26, 27, 28, 30, 32, 1, 3, 4, 15, 16, 18, 19, 20, 22, 23, 1, 2, 3, 4, 5, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 2, 4, 5, 24, 26, 28, 29, 30, 31, 32, 6, 7, 8, 9, 12, 15, 24, 33, 34, 35, 39, 40, 45, 47, 6, 7, 8, 10, 13, 16, 25, 34, 36, 37, 40, 42, 46, 49, 6, 7, 8, 11, 14, 17, 26, 35, 37, 38, 41, 43, 47, 50, 6, 9, 10, 11, 12, 18, 27, 39, 40, 41, 51, 52, 57, 59, 7, 9, 10, 11, 13, 19, 28, 40, 42, 43, 52, 54, 58, 61, 8, 9, 10, 11, 14, 20, 29, 41, 43, 44, 53, 55, 59, 62, 6, 9, 12, 13, 14, 21, 30, 45, 46, 47, 57, 58, 63, 65, 7, 10, 12, 13, 14, 22, 31, 46, 48, 49, 58, 60, 64, 67, 8, 11, 12, 13, 14, 23, 32, 47, 49, 50, 59, 61, 65, 68, 6, 15, 16, 17, 18, 21, 24, 33, 34, 39, 40, 41, 46, 47, 7, 15, 16, 17, 19, 22, 25, 34, 36, 40, 42, 43, 48, 49, 8, 15, 16, 17, 20, 23, 26, 35, 37, 41, 43, 44, 49, 50, 9, 15, 18, 19, 20, 21, 27, 39, 40, 51, 52, 53, 58, 59, 10, 16, 18, 19, 20, 22, 28, 40, 42, 52, 54, 55, 60, 61, 11, 17, 18, 19, 20, 23, 29, 41, 43, 53, 55, 56, 61, 62, 12, 15, 18, 21, 22, 23, 30, 45, 46, 57, 58, 59, 64, 65, 13, 16, 19, 21, 22, 23, 31, 46, 48, 58, 60, 61, 66, 67, 14, 17, 20, 21, 22, 23, 32, 47, 49, 59, 61, 62, 67, 68, 6, 15, 24, 25, 26, 27, 30, 33, 35, 40, 41, 45, 46, 47, 7, 16, 24, 25, 26, 28, 31, 34, 37, 42, 43, 46, 48, 49, 8, 17, 24, 25, 26, 29, 32, 35, 38, 43, 44, 47, 49, 50, 9, 18, 24, 27, 28, 29, 30, 39, 41, 52, 53, 57, 58, 59, 10, 19, 25, 27, 28, 29, 31, 40, 43, 54, 55, 58, 60, 61, 11, 20, 26, 27, 28, 29, 32, 41, 44, 55, 56, 59, 61, 62, 12, 21, 24, 27, 30, 31, 32, 45, 47, 58, 59, 63, 64, 65, 13, 22, 25, 28, 30, 31, 32, 46, 49, 60, 61, 64, 66, 67, 14, 23, 26, 29, 30, 31, 32, 47, 50, 61, 62, 65, 67, 68, 33, 34, 35, 39, 45, 33, 34, 35, 36, 37, 40, 46, 33, 34, 35, 37, 38, 41, 47, 34, 36, 37, 42, 48, 34, 35, 36, 37, 38, 43, 49, 35, 37, 38, 44, 50, 33, 39, 40, 41, 45, 51, 57, 34, 39, 40, 41, 42, 43, 46, 52, 58, 35, 39, 40, 41, 43, 44, 47, 53, 59, 36, 40, 42, 43, 48, 54, 60, 37, 40, 41, 42, 43, 44, 49, 55, 61, 38, 41, 43, 44, 50, 56, 62, 33, 39, 45, 46, 47, 57, 63, 34, 40, 45, 46, 47, 48, 49, 58, 64, 35, 41, 45, 46, 47, 49, 50, 59, 65, 36, 42, 46, 48, 49, 60, 66, 37, 43, 46, 47, 48, 49, 50, 61, 67, 38, 44, 47, 49, 50, 62, 68, 39, 51, 52, 53, 57, 40, 51, 52, 53, 54, 55, 58, 41, 51, 52, 53, 55, 56, 59, 42, 52, 54, 55, 60, 43, 52, 53, 54, 55, 56, 61, 44, 53, 55, 56, 62, 39, 45, 51, 57, 58, 59, 63, 40, 46, 52, 57, 58, 59, 60, 61, 64, 41, 47, 53, 57, 58, 59, 61, 62, 65, 42, 48, 54, 58, 60, 61, 66, 43, 49, 55, 58, 59, 60, 61, 62, 67, 44, 50, 56, 59, 61, 62, 68, 45, 57, 63, 64, 65, 46, 58, 63, 64, 65, 66, 67, 47, 59, 63, 64, 65, 67, 68, 48, 60, 64, 66, 67, 49, 61, 64, 65, 66, 67, 68, 50, 62, 65, 67, 68, 69, 70, 71, 69, 70, 71, 72, 73, 69, 70, 71, 73, 74, 70, 72, 73, 70, 71, 72, 73, 74, 71, 73, 74, 75, 76, 77, 75, 76, 77, 78, 79, 75, 76, 77, 79, 80, 76, 78, 79, 76, 77, 78, 79, 80, 77, 79, 80]
    data = [-2*(m21 + m31), 2*m21, 2*m31, (m21 + m31)/2, -m21/2, -m31/2, -m21/2, m21/2, -m31/2, m31/2, m12, -m12 - m21 - m31 - m32, m32, m21, m31, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m13, m23, -m13 - m21 - m23 - m31, m21, m31, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, 2*m12, -2*(m12 + m32), 2*m32, m12/2, -m12/2, -m12/2, (m12 + m32)/2, -m32/2, -m32/2, m32/2, m13, m12, m23, -m12 - m13 - m23 - m32, m32, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, 2*m13, 2*m23, -2*(m13 + m23), m13/2, -m13/2, m23/2, -m23/2, -m13/2, -m23/2, (m13 + m23)/2, -3*(m21 + m31), m21, m31, m21, m31, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m12, -m12 - 2*m21 - 2*m31 - m32, m32, m21, m31, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m13, m23, -m13 - 2*m21 - m23 - 2*m31, m21, m31, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m12, -m12 - 2*m21 - 2*m31 - m32, m21, m31, m32, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m12, m12, -2*m12 - m21 - m31 - 2*m32, m32, m32, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32, m32, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m13, m23, -m13 - 2*m21 - m23 - 2*m31, m21, m31, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32, m32, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31, m21, m31, (m21 + m31)/4, -m21/4, -m31/4, -m21/4, m21/4, -m31/4, m31/4, m12, -m12 - 2*m21 - 2*m31 - m32, m21, m31, m21, m31, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m12, -2*m12 - m21 - m31 - 2*m32, m32, m21, m31, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32, m21, m31, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m12, -2*m12 - m21 - m31 - 2*m32, m21, m31, m32, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m12, m12, -3*(m12 + m32), m32, m32, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m12, m13, m23, -2*m12 - m13 - m23 - 2*m32, m32, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32, m21, m31, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m13, m23, m12, -2*m12 - m13 - m23 - 2*m32, m32, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m12, m13, m23, m13, m23, -m12 - 2*m13 - 2*m23 - m32, m32, m12/4, -m12/4, -m12/4, (m12 + m32)/4, -m32/4, -m32/4, m32/4, m13, m23, -m13 - 2*m21 - m23 - 2*m31, m21, m31, m21, m31, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32, m32, m21, m31, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31, m21, m31, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32, m21, m31, m32, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m12, m12, -2*m12 - m13 - m23 - 2*m32, m32, m32, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m12, m13, m23, -m12 - 2*m13 - 2*m23 - m32, m32, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31, m21, m31, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m13, m23, m12, -m12 - 2*m13 - 2*m23 - m32, m32, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, m13, m23, m13, m23, m13, m23, -3*(m13 + m23), m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23)/4, -4*(m21 + m31), 2*m21, 2*m31, 2*m21, 2*m31, m12, -m12 - 3*m21 - 3*m31 - m32, m32, m21, m31, 2*m21, 2*m31, m13, m23, -m13 - 3*m21 - m23 - 3*m31, m21, m31, 2*m21, 2*m31, 2*m12, -2*(m12 + m21 + m31 + m32), 2*m32, 2*m21, 2*m31, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, m32, 2*m21, 2*m31, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31), 2*m21, 2*m31, m12, -m12 - 3*m21 - 3*m31 - m32, 2*m21, 2*m31, m32, m21, m31, m12, m12, -2*(m12 + m21 + m31 + m32), m32, m21, m31, m32, m21, m31, m12, m13, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, m21, m31, m32, m21, m31, m12, 2*m12, -3*m12 - m21 - m31 - 3*m32, 2*m32, m32, m21, m31, m12, m13, m12, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, m32, m32, m21, m31, m12, 2*m13, 2*m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m32, m21, m31, m13, m23, -m13 - 3*m21 - m23 - 3*m31, 2*m21, 2*m31, m21, m31, m13, m23, m12, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, m32, m21, m31, m21, m31, m13, m23, m13, m23, -2*(m13 + m21 + m23 + m31), m21, m31, m21, m31, m13, m23, 2*m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, 2*m32, m21, m31, m13, m23, m13, m12, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m32, m21, m31, m13, m23, 2*m13, 2*m23, -3*m13 - m21 - 3*m23 - m31, m21, m31, 2*m12, -2*(m12 + m21 + m31 + m32), 2*m21, 2*m31, 2*m32, 2*m12, m12, -3*m12 - m21 - m31 - 3*m32, m32, m21, m31, 2*m32, 2*m12, m13, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, m21, m31, 2*m32, 2*m12, 2*m12, -4*(m12 + m32), 2*m32, 2*m32, 2*m12, m13, m12, m23, -3*m12 - m13 - m23 - 3*m32, m32, 2*m32, 2*m12, 2*m13, 2*m23, -2*(m12 + m13 + m23 + m32), 2*m32, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, 2*m21, 2*m31, m32, m13, m12, m23, m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, m32, m21, m31, m32, m13, m12, m23, m13, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m21, m31, m32, m13, m12, m23, 2*m12, -3*m12 - m13 - m23 - 3*m32, 2*m32, m32, m13, m12, m23, m13, m12, m23, -2*(m12 + m13 + m23 + m32), m32, m32, m13, m12, m23, 2*m13, 2*m23, -m12 - 3*m13 - 3*m23 - m32, m32, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31), 2*m21, 2*m31, 2*m13, 2*m23, m12, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m32, m21, m31, 2*m13, 2*m23, m13, m23, -3*m13 - m21 - 3*m23 - m31, m21, m31, 2*m13, 2*m23, 2*m12, -2*(m12 + m13 + m23 + m32), 2*m32, 2*m13, 2*m23, m13, m12, m23, -m12 - 3*m13 - 3*m23 - m32, m32, 2*m13, 2*m23, 2*m13, 2*m23, -4*(m13 + m23), -2*(m21 + m31), 2*m21, 2*m31, m12, -m12 - m21 - m31 - m32, m32, m21, m31, m13, m23, -m13 - m21 - m23 - m31, m21, m31, 2*m12, -2*(m12 + m32), 2*m32, m13, m12, m23, -m12 - m13 - m23 - m32, m32, 2*m13, 2*m23, -2*(m13 + m23), -2*(m21 + m31), 2*m21, 2*m31, m12, -m12 - m21 - m31 - m32, m32, m21, m31, m13, m23, -m13 - m21 - m23 - m31, m21, m31, 2*m12, -2*(m12 + m32), 2*m32, m13, m12, m23, -m12 - m13 - m23 - m32, m32, 2*m13, 2*m23, -2*(m13 + m23)]
    return csc_matrix((data,(row,col)),shape=(82,82))

def drift_four_pop(params):
    nu1,nu2,nu3,nu4 = params
    row = [0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4, 4, 4, 5, 6, 7, 7, 7, 7, 7, 7, 8, 9, 9, 9, 9, 9, 9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 26, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 57, 58, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 73, 73, 74, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 77, 78, 78, 78, 79, 79, 80, 80, 81, 81, 81, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 86, 87, 88, 88, 88, 89, 90, 91, 91, 93, 93, 94, 94, 94, 95, 96, 96, 97, 98, 98, 99, 101, 101, 101, 102, 103, 103, 104, 104, 104, 105, 106, 107, 107, 108, 108, 110, 111, 111, 112, 113, 113, 113, 114, 114, 114, 115, 115, 115, 116, 116, 117, 117, 118, 118, 118, 118, 119, 119, 119, 120, 120, 120, 121, 121, 121, 122, 122, 123, 123, 123, 124, 124, 125, 126, 128, 128, 128, 129, 129, 130, 131, 131, 131, 132, 133, 133, 134, 134, 135, 137, 138, 138, 138, 139, 140, 140, 141, 141, 142, 143, 143, 143, 144, 144, 144, 145, 145, 146, 146, 146, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 151, 151, 151, 151, 152, 152, 152, 153, 153, 153, 154, 154, 156, 157, 158, 158, 159, 160, 161, 161, 161, 162, 162, 163, 163, 163, 164, 164, 164, 165, 165, 166, 166, 167, 167, 167, 168, 168, 168, 169, 169, 170, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 173, 173, 174, 174, 178, 178, 181, 181, 183, 183, 184, 184, 188, 188, 191, 191, 193, 193]
    col = [0, 10, 74, 174, 184, 194, 1, 2, 3, 4, 31, 118, 178, 188, 194, 5, 6, 7, 52, 151, 181, 191, 194, 8, 9, 73, 173, 183, 193, 194, 0, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 3, 25, 1, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 2, 42, 43, 44, 45, 46, 5, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 8, 57, 3, 58, 59, 60, 61, 62, 6, 63, 64, 65, 66, 67, 8, 68, 69, 70, 71, 72, 9, 73, 10, 74, 174, 184, 11, 75, 185, 12, 76, 186, 13, 77, 187, 78, 174, 188, 79, 189, 80, 190, 81, 174, 191, 82, 192, 83, 174, 193, 14, 84, 175, 15, 26, 16, 17, 27, 88, 175, 28, 29, 91, 175, 93, 175, 18, 94, 176, 19, 20, 42, 21, 98, 176, 43, 44, 101, 176, 45, 103, 176, 22, 104, 177, 23, 24, 25, 58, 108, 177, 59, 111, 177, 60, 61, 113, 177, 114, 178, 184, 30, 115, 185, 116, 186, 117, 187, 31, 118, 178, 188, 32, 119, 189, 33, 120, 190, 121, 178, 191, 122, 192, 123, 178, 193, 124, 179, 34, 46, 35, 128, 179, 36, 47, 37, 48, 131, 179, 49, 133, 179, 134, 180, 38, 62, 39, 138, 180, 40, 41, 63, 141, 180, 64, 65, 143, 180, 144, 181, 184, 145, 185, 50, 146, 186, 147, 187, 148, 181, 188, 51, 149, 189, 150, 190, 52, 151, 181, 191, 53, 152, 192, 153, 181, 193, 154, 182, 54, 66, 158, 182, 55, 67, 56, 161, 182, 57, 68, 69, 163, 182, 164, 183, 184, 165, 185, 166, 186, 70, 167, 187, 168, 183, 188, 169, 189, 71, 170, 190, 171, 183, 191, 72, 172, 192, 73, 173, 183, 193, 174, 194, 178, 194, 181, 194, 183, 194, 184, 194, 188, 194, 191, 194, 193, 194]
    data = [-3/nu1, 1/nu1, 1/(16*nu1), -1/(16*nu1), -1/(16*nu1), 1/(16*nu1), -1/nu1 -1/nu2, -1/nu1 -1/nu3, -1/nu1 -1/nu4, -3/nu2, 1/nu2, 1/(16*nu2), -1/(16*nu2), -1/(16*nu2), 1/(16*nu2), -1/nu2 -1/nu3, -1/nu2 -1/nu4, -3/nu3, 1/nu3, 1/(16*nu3), -1/(16*nu3), -1/(16*nu3), 1/(16*nu3), -1/nu3 -1/nu4, -3/nu4, 1/nu4, 1/(16*nu4), -1/(16*nu4), -1/(16*nu4), 1/(16*nu4), 4/nu1, -5/nu1, -3/nu1, -3/nu1, -3/nu1, -3/nu1, 4/nu2, -1/nu1, -1/nu1, -1/nu1, -3/nu1, -1/nu1, 4/nu3, -1/nu1, -1/nu1, -3/nu1, -1/nu1, -1/nu1, 4/nu4, -1/nu1, 4/nu1, -1/nu2, -3/nu2, -1/nu2, -1/nu2, -3/nu2, 4/nu2, -5/nu2, -3/nu2, -3/nu2, -1/nu2, -3/nu2, 4/nu3, -1/nu2, -1/nu2, -1/nu2, -3/nu2, -1/nu2, 4/nu4, -1/nu2, 4/nu1, -1/nu3, -1/nu3, -3/nu3, -1/nu3, -1/nu3, 4/nu2, -1/nu3, -3/nu3, -1/nu3, -3/nu3, -3/nu3, 4/nu3, -5/nu3, -3/nu3, -1/nu3, -1/nu3, -3/nu3, 4/nu4, -1/nu3, 4/nu1, -1/nu4, -1/nu4, -1/nu4, -3/nu4, -1/nu4, 4/nu2, -1/nu4, -1/nu4, -3/nu4, -1/nu4, -1/nu4, 4/nu3, -1/nu4, -3/nu4, -3/nu4, -3/nu4, -3/nu4, 4/nu4, -5/nu4, 16/nu1, -2/nu1, 1/nu1, 1/nu1, 8/nu1, -1/nu1, 1/nu1, 8/nu1, -1/nu1, 1/nu1, 8/nu1, -1/nu1, 1/nu1, -1/nu1 -1/nu2, 1/nu2, 1/nu1, -1/nu1, 1/nu1, -1/nu1, 1/nu1, -1/nu1 -1/nu3, 1/nu3, 1/nu1, -1/nu1, 1/nu1, -1/nu1 -1/nu4, 1/nu4, 1/nu1, 8/nu1, -1/nu1, 1/nu1, 4/nu1, 4/nu2, 4/nu1, 4/nu1, 8/nu2, -1/nu2, 1/nu2, 4/nu2, 4/nu2, -1/nu3, 1/nu3, -1/nu4, 1/nu4, 8/nu1, -1/nu1, 1/nu1, 4/nu1, 4/nu1, 4/nu3, 4/nu1, -1/nu2, 1/nu2, 4/nu3, 8/nu3, -1/nu3, 1/nu3, 4/nu3, -1/nu4, 1/nu4, 8/nu1, -1/nu1, 1/nu1, 4/nu1, 4/nu1, 4/nu1, 4/nu4, -1/nu2, 1/nu2, 4/nu4, -1/nu3, 1/nu3, 4/nu4, 8/nu4, -1/nu4, 1/nu4, -1/nu1 -1/nu2, 1/nu1, 1/nu2, 8/nu2, -1/nu2, 1/nu2, -1/nu2, 1/nu2, -1/nu2, 1/nu2, 16/nu2, -2/nu2, 1/nu2, 1/nu2, 8/nu2, -1/nu2, 1/nu2, 8/nu2, -1/nu2, 1/nu2, -1/nu2 -1/nu3, 1/nu3, 1/nu2, -1/nu2, 1/nu2, -1/nu2 -1/nu4, 1/nu4, 1/nu2, -1/nu1, 1/nu1, 4/nu2, 4/nu3, 8/nu2, -1/nu2, 1/nu2, 4/nu2, 4/nu3, 4/nu2, 8/nu3, -1/nu3, 1/nu3, 4/nu3, -1/nu4, 1/nu4, -1/nu1, 1/nu1, 4/nu2, 4/nu4, 8/nu2, -1/nu2, 1/nu2, 4/nu2, 4/nu2, 4/nu4, -1/nu3, 1/nu3, 4/nu4, 8/nu4, -1/nu4, 1/nu4, -1/nu1 -1/nu3, 1/nu1, 1/nu3, -1/nu3, 1/nu3, 8/nu3, -1/nu3, 1/nu3, -1/nu3, 1/nu3, -1/nu2 -1/nu3, 1/nu2, 1/nu3, 8/nu3, -1/nu3, 1/nu3, -1/nu3, 1/nu3, 16/nu3, -2/nu3, 1/nu3, 1/nu3, 8/nu3, -1/nu3, 1/nu3, -1/nu3 -1/nu4, 1/nu4, 1/nu3, -1/nu1, 1/nu1, 4/nu3, 4/nu4, -1/nu2, 1/nu2, 4/nu3, 4/nu4, 8/nu3, -1/nu3, 1/nu3, 4/nu3, 4/nu4, 8/nu4, -1/nu4, 1/nu4, -1/nu1 -1/nu4, 1/nu1, 1/nu4, -1/nu4, 1/nu4, -1/nu4, 1/nu4, 8/nu4, -1/nu4, 1/nu4, -1/nu2 -1/nu4, 1/nu2, 1/nu4, -1/nu4, 1/nu4, 8/nu4, -1/nu4, 1/nu4, -1/nu3 -1/nu4, 1/nu3, 1/nu4, 8/nu4, -1/nu4, 1/nu4, 16/nu4, -2/nu4, 1/nu4, 1/nu4, -1/nu1, 1/nu1, -1/nu2, 1/nu2, -1/nu3, 1/nu3, -1/nu4, 1/nu4, -1/nu1, 1/nu1, -1/nu2, 1/nu2, -1/nu3, 1/nu3, -1/nu4, 1/nu4]
    return csc_matrix((data,(row,col)),shape=(195,195))

def recom_four_pop(params):
    rho = params
    row = range(10+4**3)
    col = range(10+4**3)
    data = [-1.*rho]*10 + [-rho/2.]*4**3
    return csc_matrix((data,(row,col)),shape=(195,195))

def mutat_four_pop(params):
    theta = params
    row = range(10+4**3+10**2+10+10)
    col = range(10+4**3+10**2+10+10)
    data = [-4.*theta]*(10+4**3+10**2) + [-2.*theta]*(10+10)
    return csc_matrix((data,(row,col)),shape=(195,195))

def migra_four_pop(params):
    m12,m21,m13,m31,m14,m41,m23,m32,m24,m42,m34,m43 = params
    row = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 164, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 173, 173, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 187, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 191, 191, 191, 191, 192, 192, 192, 192, 192, 192, 192, 193, 193, 193, 193]
    col = [0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 18, 20, 22, 25, 0, 1, 2, 3, 4, 5, 6, 10, 11, 14, 15, 16, 17, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 34, 36, 38, 41, 0, 1, 2, 3, 5, 7, 8, 10, 12, 15, 16, 18, 19, 20, 21, 24, 25, 42, 43, 44, 45, 46, 47, 50, 52, 54, 57, 0, 1, 2, 3, 6, 8, 9, 10, 13, 15, 17, 20, 21, 22, 23, 24, 25, 58, 59, 60, 61, 62, 63, 66, 68, 70, 73, 1, 4, 5, 6, 26, 27, 30, 31, 32, 33, 35, 36, 39, 41, 1, 2, 4, 5, 6, 7, 8, 26, 28, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 55, 57, 1, 3, 4, 5, 6, 8, 9, 26, 29, 31, 33, 36, 37, 38, 39, 40, 41, 58, 59, 62, 63, 64, 65, 67, 68, 71, 73, 2, 5, 7, 8, 42, 44, 47, 48, 50, 51, 52, 53, 56, 57, 2, 3, 5, 6, 7, 8, 9, 42, 45, 47, 49, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 66, 67, 68, 69, 72, 73, 3, 6, 8, 9, 58, 61, 63, 65, 68, 69, 70, 71, 72, 73, 10, 11, 12, 13, 14, 18, 22, 26, 42, 58, 74, 75, 76, 77, 84, 85, 94, 96, 104, 107, 10, 11, 12, 13, 15, 19, 23, 27, 43, 59, 75, 78, 79, 80, 85, 88, 95, 99, 105, 110, 10, 11, 12, 13, 16, 20, 24, 28, 44, 60, 76, 79, 81, 82, 86, 89, 96, 101, 106, 112, 10, 11, 12, 13, 17, 21, 25, 29, 45, 61, 77, 80, 82, 83, 87, 90, 97, 102, 107, 113, 10, 14, 15, 16, 17, 18, 22, 30, 46, 62, 84, 85, 86, 87, 114, 115, 124, 126, 134, 137, 11, 14, 15, 16, 17, 19, 23, 31, 47, 63, 85, 88, 89, 90, 115, 118, 125, 129, 135, 140, 12, 14, 15, 16, 17, 20, 24, 32, 48, 64, 86, 89, 91, 92, 116, 119, 126, 131, 136, 142, 13, 14, 15, 16, 17, 21, 25, 33, 49, 65, 87, 90, 92, 93, 117, 120, 127, 132, 137, 143, 10, 14, 18, 19, 20, 21, 22, 34, 50, 66, 94, 95, 96, 97, 124, 125, 144, 146, 154, 157, 11, 15, 18, 19, 20, 21, 23, 35, 51, 67, 95, 98, 99, 100, 125, 128, 145, 149, 155, 160, 12, 16, 18, 19, 20, 21, 24, 36, 52, 68, 96, 99, 101, 102, 126, 129, 146, 151, 156, 162, 13, 17, 18, 19, 20, 21, 25, 37, 53, 69, 97, 100, 102, 103, 127, 130, 147, 152, 157, 163, 10, 14, 18, 22, 23, 24, 25, 38, 54, 70, 104, 105, 106, 107, 134, 135, 154, 156, 164, 167, 11, 15, 19, 22, 23, 24, 25, 39, 55, 71, 105, 108, 109, 110, 135, 138, 155, 159, 165, 170, 12, 16, 20, 22, 23, 24, 25, 40, 56, 72, 106, 109, 111, 112, 136, 139, 156, 161, 166, 172, 13, 17, 21, 22, 23, 24, 25, 41, 57, 73, 107, 110, 112, 113, 137, 140, 157, 162, 167, 173, 10, 26, 27, 28, 29, 30, 34, 38, 42, 58, 74, 75, 84, 85, 86, 87, 95, 96, 105, 107, 11, 26, 27, 28, 29, 31, 35, 39, 43, 59, 75, 78, 85, 88, 89, 90, 98, 99, 108, 110, 12, 26, 27, 28, 29, 32, 36, 40, 44, 60, 76, 79, 86, 89, 91, 92, 99, 101, 109, 112, 13, 26, 27, 28, 29, 33, 37, 41, 45, 61, 77, 80, 87, 90, 92, 93, 100, 102, 110, 113, 14, 26, 30, 31, 32, 33, 34, 38, 46, 62, 84, 85, 114, 115, 116, 117, 125, 126, 135, 137, 15, 27, 30, 31, 32, 33, 35, 39, 47, 63, 85, 88, 115, 118, 119, 120, 128, 129, 138, 140, 16, 28, 30, 31, 32, 33, 36, 40, 48, 64, 86, 89, 116, 119, 121, 122, 129, 131, 139, 142, 17, 29, 30, 31, 32, 33, 37, 41, 49, 65, 87, 90, 117, 120, 122, 123, 130, 132, 140, 143, 18, 26, 30, 34, 35, 36, 37, 38, 50, 66, 94, 95, 124, 125, 126, 127, 145, 146, 155, 157, 19, 27, 31, 34, 35, 36, 37, 39, 51, 67, 95, 98, 125, 128, 129, 130, 148, 149, 158, 160, 20, 28, 32, 34, 35, 36, 37, 40, 52, 68, 96, 99, 126, 129, 131, 132, 149, 151, 159, 162, 21, 29, 33, 34, 35, 36, 37, 41, 53, 69, 97, 100, 127, 130, 132, 133, 150, 152, 160, 163, 22, 26, 30, 34, 38, 39, 40, 41, 54, 70, 104, 105, 134, 135, 136, 137, 155, 156, 165, 167, 23, 27, 31, 35, 38, 39, 40, 41, 55, 71, 105, 108, 135, 138, 139, 140, 158, 159, 168, 170, 24, 28, 32, 36, 38, 39, 40, 41, 56, 72, 106, 109, 136, 139, 141, 142, 159, 161, 169, 172, 25, 29, 33, 37, 38, 39, 40, 41, 57, 73, 107, 110, 137, 140, 142, 143, 160, 162, 170, 173, 10, 26, 42, 43, 44, 45, 46, 50, 54, 58, 74, 76, 85, 86, 94, 95, 96, 97, 106, 107, 11, 27, 42, 43, 44, 45, 47, 51, 55, 59, 75, 79, 88, 89, 95, 98, 99, 100, 109, 110, 12, 28, 42, 43, 44, 45, 48, 52, 56, 60, 76, 81, 89, 91, 96, 99, 101, 102, 111, 112, 13, 29, 42, 43, 44, 45, 49, 53, 57, 61, 77, 82, 90, 92, 97, 100, 102, 103, 112, 113, 14, 30, 42, 46, 47, 48, 49, 50, 54, 62, 84, 86, 115, 116, 124, 125, 126, 127, 136, 137, 15, 31, 43, 46, 47, 48, 49, 51, 55, 63, 85, 89, 118, 119, 125, 128, 129, 130, 139, 140, 16, 32, 44, 46, 47, 48, 49, 52, 56, 64, 86, 91, 119, 121, 126, 129, 131, 132, 141, 142, 17, 33, 45, 46, 47, 48, 49, 53, 57, 65, 87, 92, 120, 122, 127, 130, 132, 133, 142, 143, 18, 34, 42, 46, 50, 51, 52, 53, 54, 66, 94, 96, 125, 126, 144, 145, 146, 147, 156, 157, 19, 35, 43, 47, 50, 51, 52, 53, 55, 67, 95, 99, 128, 129, 145, 148, 149, 150, 159, 160, 20, 36, 44, 48, 50, 51, 52, 53, 56, 68, 96, 101, 129, 131, 146, 149, 151, 152, 161, 162, 21, 37, 45, 49, 50, 51, 52, 53, 57, 69, 97, 102, 130, 132, 147, 150, 152, 153, 162, 163, 22, 38, 42, 46, 50, 54, 55, 56, 57, 70, 104, 106, 135, 136, 154, 155, 156, 157, 166, 167, 23, 39, 43, 47, 51, 54, 55, 56, 57, 71, 105, 109, 138, 139, 155, 158, 159, 160, 169, 170, 24, 40, 44, 48, 52, 54, 55, 56, 57, 72, 106, 111, 139, 141, 156, 159, 161, 162, 171, 172, 25, 41, 45, 49, 53, 54, 55, 56, 57, 73, 107, 112, 140, 142, 157, 160, 162, 163, 172, 173, 10, 26, 42, 58, 59, 60, 61, 62, 66, 70, 74, 77, 85, 87, 96, 97, 104, 105, 106, 107, 11, 27, 43, 58, 59, 60, 61, 63, 67, 71, 75, 80, 88, 90, 99, 100, 105, 108, 109, 110, 12, 28, 44, 58, 59, 60, 61, 64, 68, 72, 76, 82, 89, 92, 101, 102, 106, 109, 111, 112, 13, 29, 45, 58, 59, 60, 61, 65, 69, 73, 77, 83, 90, 93, 102, 103, 107, 110, 112, 113, 14, 30, 46, 58, 62, 63, 64, 65, 66, 70, 84, 87, 115, 117, 126, 127, 134, 135, 136, 137, 15, 31, 47, 59, 62, 63, 64, 65, 67, 71, 85, 90, 118, 120, 129, 130, 135, 138, 139, 140, 16, 32, 48, 60, 62, 63, 64, 65, 68, 72, 86, 92, 119, 122, 131, 132, 136, 139, 141, 142, 17, 33, 49, 61, 62, 63, 64, 65, 69, 73, 87, 93, 120, 123, 132, 133, 137, 140, 142, 143, 18, 34, 50, 58, 62, 66, 67, 68, 69, 70, 94, 97, 125, 127, 146, 147, 154, 155, 156, 157, 19, 35, 51, 59, 63, 66, 67, 68, 69, 71, 95, 100, 128, 130, 149, 150, 155, 158, 159, 160, 20, 36, 52, 60, 64, 66, 67, 68, 69, 72, 96, 102, 129, 132, 151, 152, 156, 159, 161, 162, 21, 37, 53, 61, 65, 66, 67, 68, 69, 73, 97, 103, 130, 133, 152, 153, 157, 160, 162, 163, 22, 38, 54, 58, 62, 66, 70, 71, 72, 73, 104, 107, 135, 137, 156, 157, 164, 165, 166, 167, 23, 39, 55, 59, 63, 67, 70, 71, 72, 73, 105, 110, 138, 140, 159, 160, 165, 168, 169, 170, 24, 40, 56, 60, 64, 68, 70, 71, 72, 73, 106, 112, 139, 142, 161, 162, 166, 169, 171, 172, 25, 41, 57, 61, 65, 69, 70, 71, 72, 73, 107, 113, 140, 143, 162, 163, 167, 170, 172, 173, 74, 75, 76, 77, 84, 94, 104, 74, 75, 76, 77, 78, 79, 80, 85, 95, 105, 74, 75, 76, 77, 79, 81, 82, 86, 96, 106, 74, 75, 76, 77, 80, 82, 83, 87, 97, 107, 75, 78, 79, 80, 88, 98, 108, 75, 76, 78, 79, 80, 81, 82, 89, 99, 109, 75, 77, 78, 79, 80, 82, 83, 90, 100, 110, 76, 79, 81, 82, 91, 101, 111, 76, 77, 79, 80, 81, 82, 83, 92, 102, 112, 77, 80, 82, 83, 93, 103, 113, 74, 84, 85, 86, 87, 94, 104, 114, 124, 134, 75, 84, 85, 86, 87, 88, 89, 90, 95, 105, 115, 125, 135, 76, 84, 85, 86, 87, 89, 91, 92, 96, 106, 116, 126, 136, 77, 84, 85, 86, 87, 90, 92, 93, 97, 107, 117, 127, 137, 78, 85, 88, 89, 90, 98, 108, 118, 128, 138, 79, 85, 86, 88, 89, 90, 91, 92, 99, 109, 119, 129, 139, 80, 85, 87, 88, 89, 90, 92, 93, 100, 110, 120, 130, 140, 81, 86, 89, 91, 92, 101, 111, 121, 131, 141, 82, 86, 87, 89, 90, 91, 92, 93, 102, 112, 122, 132, 142, 83, 87, 90, 92, 93, 103, 113, 123, 133, 143, 74, 84, 94, 95, 96, 97, 104, 124, 144, 154, 75, 85, 94, 95, 96, 97, 98, 99, 100, 105, 125, 145, 155, 76, 86, 94, 95, 96, 97, 99, 101, 102, 106, 126, 146, 156, 77, 87, 94, 95, 96, 97, 100, 102, 103, 107, 127, 147, 157, 78, 88, 95, 98, 99, 100, 108, 128, 148, 158, 79, 89, 95, 96, 98, 99, 100, 101, 102, 109, 129, 149, 159, 80, 90, 95, 97, 98, 99, 100, 102, 103, 110, 130, 150, 160, 81, 91, 96, 99, 101, 102, 111, 131, 151, 161, 82, 92, 96, 97, 99, 100, 101, 102, 103, 112, 132, 152, 162, 83, 93, 97, 100, 102, 103, 113, 133, 153, 163, 74, 84, 94, 104, 105, 106, 107, 134, 154, 164, 75, 85, 95, 104, 105, 106, 107, 108, 109, 110, 135, 155, 165, 76, 86, 96, 104, 105, 106, 107, 109, 111, 112, 136, 156, 166, 77, 87, 97, 104, 105, 106, 107, 110, 112, 113, 137, 157, 167, 78, 88, 98, 105, 108, 109, 110, 138, 158, 168, 79, 89, 99, 105, 106, 108, 109, 110, 111, 112, 139, 159, 169, 80, 90, 100, 105, 107, 108, 109, 110, 112, 113, 140, 160, 170, 81, 91, 101, 106, 109, 111, 112, 141, 161, 171, 82, 92, 102, 106, 107, 109, 110, 111, 112, 113, 142, 162, 172, 83, 93, 103, 107, 110, 112, 113, 143, 163, 173, 84, 114, 115, 116, 117, 124, 134, 85, 114, 115, 116, 117, 118, 119, 120, 125, 135, 86, 114, 115, 116, 117, 119, 121, 122, 126, 136, 87, 114, 115, 116, 117, 120, 122, 123, 127, 137, 88, 115, 118, 119, 120, 128, 138, 89, 115, 116, 118, 119, 120, 121, 122, 129, 139, 90, 115, 117, 118, 119, 120, 122, 123, 130, 140, 91, 116, 119, 121, 122, 131, 141, 92, 116, 117, 119, 120, 121, 122, 123, 132, 142, 93, 117, 120, 122, 123, 133, 143, 84, 94, 114, 124, 125, 126, 127, 134, 144, 154, 85, 95, 115, 124, 125, 126, 127, 128, 129, 130, 135, 145, 155, 86, 96, 116, 124, 125, 126, 127, 129, 131, 132, 136, 146, 156, 87, 97, 117, 124, 125, 126, 127, 130, 132, 133, 137, 147, 157, 88, 98, 118, 125, 128, 129, 130, 138, 148, 158, 89, 99, 119, 125, 126, 128, 129, 130, 131, 132, 139, 149, 159, 90, 100, 120, 125, 127, 128, 129, 130, 132, 133, 140, 150, 160, 91, 101, 121, 126, 129, 131, 132, 141, 151, 161, 92, 102, 122, 126, 127, 129, 130, 131, 132, 133, 142, 152, 162, 93, 103, 123, 127, 130, 132, 133, 143, 153, 163, 84, 104, 114, 124, 134, 135, 136, 137, 154, 164, 85, 105, 115, 125, 134, 135, 136, 137, 138, 139, 140, 155, 165, 86, 106, 116, 126, 134, 135, 136, 137, 139, 141, 142, 156, 166, 87, 107, 117, 127, 134, 135, 136, 137, 140, 142, 143, 157, 167, 88, 108, 118, 128, 135, 138, 139, 140, 158, 168, 89, 109, 119, 129, 135, 136, 138, 139, 140, 141, 142, 159, 169, 90, 110, 120, 130, 135, 137, 138, 139, 140, 142, 143, 160, 170, 91, 111, 121, 131, 136, 139, 141, 142, 161, 171, 92, 112, 122, 132, 136, 137, 139, 140, 141, 142, 143, 162, 172, 93, 113, 123, 133, 137, 140, 142, 143, 163, 173, 94, 124, 144, 145, 146, 147, 154, 95, 125, 144, 145, 146, 147, 148, 149, 150, 155, 96, 126, 144, 145, 146, 147, 149, 151, 152, 156, 97, 127, 144, 145, 146, 147, 150, 152, 153, 157, 98, 128, 145, 148, 149, 150, 158, 99, 129, 145, 146, 148, 149, 150, 151, 152, 159, 100, 130, 145, 147, 148, 149, 150, 152, 153, 160, 101, 131, 146, 149, 151, 152, 161, 102, 132, 146, 147, 149, 150, 151, 152, 153, 162, 103, 133, 147, 150, 152, 153, 163, 94, 104, 124, 134, 144, 154, 155, 156, 157, 164, 95, 105, 125, 135, 145, 154, 155, 156, 157, 158, 159, 160, 165, 96, 106, 126, 136, 146, 154, 155, 156, 157, 159, 161, 162, 166, 97, 107, 127, 137, 147, 154, 155, 156, 157, 160, 162, 163, 167, 98, 108, 128, 138, 148, 155, 158, 159, 160, 168, 99, 109, 129, 139, 149, 155, 156, 158, 159, 160, 161, 162, 169, 100, 110, 130, 140, 150, 155, 157, 158, 159, 160, 162, 163, 170, 101, 111, 131, 141, 151, 156, 159, 161, 162, 171, 102, 112, 132, 142, 152, 156, 157, 159, 160, 161, 162, 163, 172, 103, 113, 133, 143, 153, 157, 160, 162, 163, 173, 104, 134, 154, 164, 165, 166, 167, 105, 135, 155, 164, 165, 166, 167, 168, 169, 170, 106, 136, 156, 164, 165, 166, 167, 169, 171, 172, 107, 137, 157, 164, 165, 166, 167, 170, 172, 173, 108, 138, 158, 165, 168, 169, 170, 109, 139, 159, 165, 166, 168, 169, 170, 171, 172, 110, 140, 160, 165, 167, 168, 169, 170, 172, 173, 111, 141, 161, 166, 169, 171, 172, 112, 142, 162, 166, 167, 169, 170, 171, 172, 173, 113, 143, 163, 167, 170, 172, 173, 174, 175, 176, 177, 174, 175, 176, 177, 178, 179, 180, 174, 175, 176, 177, 179, 181, 182, 174, 175, 176, 177, 180, 182, 183, 175, 178, 179, 180, 175, 176, 178, 179, 180, 181, 182, 175, 177, 178, 179, 180, 182, 183, 176, 179, 181, 182, 176, 177, 179, 180, 181, 182, 183, 177, 180, 182, 183, 184, 185, 186, 187, 184, 185, 186, 187, 188, 189, 190, 184, 185, 186, 187, 189, 191, 192, 184, 185, 186, 187, 190, 192, 193, 185, 188, 189, 190, 185, 186, 188, 189, 190, 191, 192, 185, 187, 188, 189, 190, 192, 193, 186, 189, 191, 192, 186, 187, 189, 190, 191, 192, 193, 187, 190, 192, 193]
    data = [-2*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, (m21 + m31 + m41)/2, -m21/2, -m31/2, -m41/2, -m21/2, m21/2, -m31/2, m31/2, -m41/2, m41/2, m12, -m12 - m21 - m31 - m32 - m41 - m42, m32, m42, m21, m31, m41, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m13, m23, -m13 - m21 - m23 - m31 - m41 -m43, m43, m21, m31, m41, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m14, m24, m34, -m14 - m21 - m24 - m31 - m34 - m41, m21, m31, m41, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, 2*m12, -2*(m12 + m32 + m42), 2*m32, 2*m42, m12/2, -m12/2, -m12/2, (m12 + m32 + m42)/2, -m32/2, -m42/2, -m32/2, m32/2, -m42/2, m42/2, m13, m12, m23, -m12 - m13 - m23 - m32 - m42 - m43, m43, m32, m42, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m14, m12, m24, m34, -m12 - m14 - m24 - m32 - m34 - m42, m32, m42, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, 2*m13, 2*m23, -2*(m13 + m23 + m43), 2*m43, m13/2, -m13/2, m23/2, -m23/2, -m13/2, -m23/2, (m13 + m23 + m43)/2, -m43/2, -m43/2, m43/2, m14, m13, m24, m23, m34, -m13 - m14 - m23 - m24 - m34 - m43, m43, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, 2*m14, 2*m24, 2*m34, -2*(m14 + m24 + m34), m14/2, -m14/2, m24/2, -m24/2, m34/2, -m34/2, -m14/2, -m24/2, -m34/2, (m14 + m24 + m34)/2, -3*(m21 + m31 + m41), m21, m31, m41, m21, m31, m41, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m12, -m12 - 2*m21 - 2*m31 - m32 - 2*m41 - m42, m32, m42, m21, m31, m41, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m13, m23, -m13 - 2*m21 - m23 - 2*m31 - 2*m41 - m43, m43, m21, m31, m41, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m14, m24, m34, -m14 - 2*m21 - m24 - 2*m31 - m34 - 2*m41, m21, m31, m41, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m12, -m12 - 2*m21 - 2*m31 - m32 - 2*m41 - m42, m21, m31, m41, m32, m42, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m12, m12, -2*m12 - m21 - m31 - 2*m32 - m41 - 2*m42, m32, m42, m32, m42, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32 - m41 -m42 - m43, m43, m32, m42, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m12, m14, m24, m34, -m12 - m14 - m21 - m24 - m31 - m32 -m34 - m41 - m42, m32, m42, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m13, m23, -m13 - 2*m21 - m23 - 2*m31 - 2*m41 - m43, m21, m31, m41, m43, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32 -m41 - m42 - m43, m32, m42, m43, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31 -m41 - 2*m43, m43, m43, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m13, m23, m14, m24, m34, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m43, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m14, m24, m34, -m14 - 2*m21 - m24 - 2*m31 - m34 -2*m41, m21, m31, m41, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m14, m24, m34, m12, -m12 - m14 - m21 - m24 - m31 -m32 - m34 - m41 - m42, m32, m42, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m14, m24, m34, m13, m23, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m43, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m14, m24, m34, m14, m24, m34, -2*m14 - m21 - 2*m24 - m31 - 2*m34 - m41, m21, m31, m41, (m21 + m31 + m41)/4, -m21/4, -m31/4, -m41/4, -m21/4, m21/4, -m31/4, m31/4, -m41/4, m41/4, m12, -m12 - 2*m21 - 2*m31 - m32 - 2*m41 - m42, m21, m31, m41, m21, m31, m41, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m12, -2*m12 - m21 - m31 - 2*m32 - m41 - 2*m42, m32, m42, m21, m31, m41, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32 - m41 -m42 - m43, m43, m21, m31, m41, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m14, m24, m34, -m12 - m14 - m21 - m24 - m31 - m32 -m34 - m41 - m42, m21, m31, m41, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m12, -2*m12 - m21 - m31 - 2*m32 - m41 - 2*m42, m21, m31, m41, m32, m42, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m12, m12, -3*(m12 + m32 + m42), m32, m42, m32, m42, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m12, m13, m23, -2*m12 - m13 - m23 - 2*m32 -2*m42 - m43, m43, m32, m42, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m12, m14, m24, m34, -2*m12 - m14 - m24 - 2*m32 - m34 - 2*m42, m32, m42, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32 -m41 - m42 - m43, m21, m31, m41, m43, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m13, m23, m12, -2*m12 - m13 - m23 - 2*m32 -2*m42 - m43, m32, m42, m43, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m13, m23, m13, m23, -m12 - 2*m13 - 2*m23 - m32 - m42 - 2*m43, m43, m43, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m13, m23, m14, m24, m34, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m43, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m14, m24, m34, -m12 - m14 - m21 - m24 - m31 -m32 - m34 - m41 - m42, m21, m31, m41, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m14, m24, m34, m12, -2*m12 - m14 - m24 - 2*m32 - m34 - 2*m42, m32, m42, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m14, m24, m34, m13, m23, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m43, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m12, m14, m24, m34, m14, m24, m34, -m12 - 2*m14 - 2*m24 - m32 - 2*m34 - m42, m32, m42, m12/4, -m12/4, -m12/4, (m12 + m32 + m42)/4, -m32/4, -m42/4, -m32/4, m32/4, -m42/4, m42/4, m13, m23, -m13 - 2*m21 - m23 - 2*m31 - 2*m41 - m43, m21, m31, m41, m21, m31, m41, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32 - m41 -m42 - m43, m32, m42, m21, m31, m41, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31 - m41 -2*m43, m43, m21, m31, m41, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m14, m24, m34, -m13 - m14 - m21 - m23 - m24 -m31 - m34 - m41 - m43, m21, m31, m41, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32 -m41 - m42 - m43, m21, m31, m41, m32, m42, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m12, m12, -2*m12 - m13 - m23 - 2*m32 -2*m42 - m43, m32, m42, m32, m42, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m12, m13, m23, -m12 - 2*m13 - 2*m23 - m32 - m42 - 2*m43, m43, m32, m42, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m12, m14, m24, m34, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m32, m42, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31 -m41 - 2*m43, m21, m31, m41, m43, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m13, m23, m12, -m12 - 2*m13 - 2*m23 - m32 - m42 - 2*m43, m32, m42, m43, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m13, m23, m13, m23, -3*(m13 + m23 + m43), m43, m43, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m13, m23, m14, m24, m34, -2*m13 - m14 - 2*m23 - m24 - m34 - 2*m43, m43, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m14, m24, m34, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m21, m31, m41, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m14, m24, m34, m12, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m32, m42, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m14, m24, m34, m13, m23, -2*m13 - m14 - 2*m23 - m24 - m34 - 2*m43, m43, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m13, m23, m14, m24, m34, m14, m24, m34, -m13 - 2*m14 - m23 - 2*m24 - 2*m34 - m43, m43, m13/4, -m13/4, m23/4, -m23/4, -m13/4, -m23/4, (m13 + m23 + m43)/4, -m43/4, -m43/4, m43/4, m14, m24, m34, -m14 - 2*m21 - m24 - 2*m31 - m34 - 2*m41, m21, m31, m41, m21, m31, m41, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m12, -m12 - m14 - m21 - m24 - m31 - m32 -m34 - m41 - m42, m32, m42, m21, m31, m41, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m13, m23, -m13 - m14 - m21 - m23 - m24 -m31 - m34 - m41 - m43, m43, m21, m31, m41, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m14, m24, m34, -2*m14 - m21 - 2*m24 - m31 - 2*m34 - m41, m21, m31, m41, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m12, -m12 - m14 - m21 - m24 - m31 -m32 - m34 - m41 - m42, m21, m31, m41, m32, m42, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m12, m12, -2*m12 - m14 - m24 - 2*m32 - m34 - 2*m42, m32, m42, m32, m42, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m12, m13, m23, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m43, m32, m42, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m12, m14, m24, m34, -m12 - 2*m14 - 2*m24 - m32 - 2*m34 - m42, m32, m42, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m13, m23, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m21, m31, m41, m43, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m13, m23, m12, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m32, m42, m43, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m13, m23, m13, m23, -2*m13 - m14 - 2*m23 - m24 - m34 - 2*m43, m43, m43, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m13, m23, m14, m24, m34, -m13 - 2*m14 - m23 - 2*m24 - 2*m34 - m43, m43, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m14, m24, m34, -2*m14 - m21 - 2*m24 - m31 - 2*m34 - m41, m21, m31, m41, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m14, m24, m34, m12, -m12 - 2*m14 - 2*m24 - m32 - 2*m34 - m42, m32, m42, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m14, m24, m34, m13, m23, -m13 - 2*m14 - m23 - 2*m24 - 2*m34 - m43, m43, m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, m14, m24, m34, m14, m24, m34, m14, m24, m34, -3*(m14 + m24 + m34), m14/4, -m14/4, m24/4, -m24/4, m34/4, -m34/4, -m14/4, -m24/4, -m34/4, (m14 + m24 + m34)/4, -4*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, 2*m21, 2*m31, 2*m41, m12, -m12 - 3*m21 - 3*m31 - m32 - 3*m41 - m42, m32, m42, m21, m31, m41, 2*m21, 2*m31, 2*m41, m13, m23, -m13 - 3*m21 - m23 - 3*m31 - 3*m41 - m43, m43, m21, m31, m41, 2*m21, 2*m31, 2*m41, m14, m24, m34, -m14 - 3*m21 - m24 - 3*m31 - m34 - 3*m41, m21, m31, m41, 2*m21, 2*m31, 2*m41, 2*m12, -2*(m12 + m21 + m31 + m32 + m41 + m42), 2*m32, 2*m42, 2*m21, 2*m31, 2*m41, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, m43, m32, m42, 2*m21, 2*m31, 2*m41, m14, m12, m24, m34, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 -m42, m32, m42, 2*m21, 2*m31, 2*m41, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31 + m41 + m43), 2*m43, 2*m21, 2*m31, 2*m41, m14, m13, m24, m23, m34, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 -2*m41 - m43, m43, 2*m21, 2*m31, 2*m41, 2*m14, 2*m24, 2*m34, -2*(m14 + m21 + m24 + m31 + m34 + m41), 2*m21, 2*m31, 2*m41, m12, -m12 - 3*m21 - 3*m31 - m32 - 3*m41 - m42, 2*m21, 2*m31, 2*m41, m32, m42, m21, m31, m41, m12, m12, -2*(m12 + m21 + m31 + m32 + m41 + m42), m32, m42, m21, m31, m41, m32, m42, m21, m31, m41, m12, m13, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, m43, m21, m31, m41, m32, m42, m21, m31, m41, m12, m14, m24, m34, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 -m42, m21, m31, m41, m32, m42, m21, m31, m41, m12, 2*m12, -3*m12 - m21 - m31 - 3*m32 - m41 - 3*m42, 2*m32, 2*m42, m32, m42, m21, m31, m41, m12, m13, m12, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 -m43, m43, m32, m42, m32, m42, m21, m31, m41, m12, m14, m12, m24, m34, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 -m41 - 2*m42, m32, m42, m32, m42, m21, m31, m41, m12, 2*m13, 2*m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 - m42 -2*m43, 2*m43, m32, m42, m21, m31, m41, m12, m14, m13, m24, m23, m34, -m12 - m13 - m14 - m21 - m23 - m24 - m31 -m32 - m34 - m41 - m42 - m43, m43, m32, m42, m21, m31, m41, m12, 2*m14, 2*m24, 2*m34, -m12 - 2*m14 - m21 - 2*m24 - m31 - m32 - 2*m34 -m41 - m42, m32, m42, m21, m31, m41, m13, m23, -m13 - 3*m21 - m23 - 3*m31 - 3*m41 - m43, 2*m21, 2*m31, 2*m41, m43, m21, m31, m41, m13, m23, m12, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, m32, m42, m21, m31, m41, m43, m21, m31, m41, m13, m23, m13, m23, -2*(m13 + m21 + m23 + m31 + m41 + m43), m43, m21, m31, m41, m43, m21, m31, m41, m13, m23, m14, m24, m34, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 -2*m41 - m43, m21, m31, m41, m43, m21, m31, m41, m13, m23, 2*m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 -m43, 2*m32, 2*m42, m43, m21, m31, m41, m13, m23, m13, m12, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 -m42 - 2*m43, m43, m32, m42, m43, m21, m31, m41, m13, m23, m14, m12, m24, m34, -m12 - m13 - m14 - m21 - m23 - m24 - m31 -m32 - m34 - m41 - m42 - m43, m32, m42, m43, m21, m31, m41, m13, m23, 2*m13, 2*m23, -3*m13 - m21 - 3*m23 - m31 - m41 - 3*m43, 2*m43, m43, m21, m31, m41, m13, m23, m14, m13, m24, m23, m34, -2*m13 - m14 - m21 - 2*m23 - m24 -m31 - m34 - m41 - 2*m43, m43, m43, m21, m31, m41, m13, m23, 2*m14, 2*m24, 2*m34, -m13 - 2*m14 - m21 - m23 - 2*m24 - m31 -2*m34 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, -m14 - 3*m21 - m24 - 3*m31 - m34 - 3*m41, 2*m21, 2*m31, 2*m41, m21, m31, m41, m14, m24, m34, m12, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 -m42, m32, m42, m21, m31, m41, m21, m31, m41, m14, m24, m34, m13, m23, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 -2*m41 - m43, m43, m21, m31, m41, m21, m31, m41, m14, m24, m34, m14, m24, m34, -2*(m14 + m21 + m24 + m31 + m34 + m41), m21, m31, m41, m21, m31, m41, m14, m24, m34, 2*m12, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 - m41 -2*m42, 2*m32, 2*m42, m21, m31, m41, m14, m24, m34, m13, m12, m23, -m12 - m13 - m14 - m21 - m23 - m24 - m31 -m32 - m34 - m41 - m42 - m43, m43, m32, m42, m21, m31, m41, m14, m24, m34, m14, m12, m24, m34, -m12 - 2*m14 - m21 - 2*m24 - m31 -m32 - 2*m34 - m41 - m42, m32, m42, m21, m31, m41, m14, m24, m34, 2*m13, 2*m23, -2*m13 - m14 - m21 - 2*m23 - m24 - m31 -m34 - m41 - 2*m43, 2*m43, m21, m31, m41, m14, m24, m34, m14, m13, m24, m23, m34, -m13 - 2*m14 - m21 - m23 - 2*m24 -m31 - 2*m34 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, 2*m14, 2*m24, 2*m34, -3*m14 - m21 - 3*m24 - m31 - 3*m34 -m41, m21, m31, m41, 2*m12, -2*(m12 + m21 + m31 + m32 + m41 + m42), 2*m21, 2*m31, 2*m41, 2*m32, 2*m42, 2*m12, m12, -3*m12 - m21 - m31 - 3*m32 - m41 - 3*m42, m32, m42, m21, m31, m41, 2*m32, 2*m42, 2*m12, m13, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 -m43, m43, m21, m31, m41, 2*m32, 2*m42, 2*m12, m14, m24, m34, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 - m41 -2*m42, m21, m31, m41, 2*m32, 2*m42, 2*m12, 2*m12, -4*(m12 + m32 + m42), 2*m32, 2*m42, 2*m32, 2*m42, 2*m12, m13, m12, m23, -3*m12 - m13 - m23 - 3*m32 - 3*m42 - m43, m43, m32, m42, 2*m32, 2*m42, 2*m12, m14, m12, m24, m34, -3*m12 - m14 - m24 - 3*m32 - m34 - 3*m42, m32, m42, 2*m32, 2*m42, 2*m12, 2*m13, 2*m23, -2*(m12 + m13 + m23 + m32 + m42 + m43), 2*m43, 2*m32, 2*m42, 2*m12, m14, m13, m24, m23, m34, -2*m12 - m13 - m14 - m23 - m24 - 2*m32 -m34 - 2*m42 - m43, m43, 2*m32, 2*m42, 2*m12, 2*m14, 2*m24, 2*m34, -2*(m12 + m14 + m24 + m32 + m34 + m42), 2*m32, 2*m42, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, 2*m21, 2*m31, 2*m41, m43, m32, m42, m13, m12, m23, m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 -m43, m32, m42, m21, m31, m41, m43, m32, m42, m13, m12, m23, m13, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 -m42 - 2*m43, m43, m21, m31, m41, m43, m32, m42, m13, m12, m23, m14, m24, m34, -m12 - m13 - m14 - m21 - m23 - m24 - m31 -m32 - m34 - m41 - m42 - m43, m21, m31, m41, m43, m32, m42, m13, m12, m23, 2*m12, -3*m12 - m13 - m23 - 3*m32 - 3*m42 - m43, 2*m32, 2*m42, m43, m32, m42, m13, m12, m23, m13, m12, m23, -2*(m12 + m13 + m23 + m32 + m42 + m43), m43, m32, m42, m43, m32, m42, m13, m12, m23, m14, m12, m24, m34, -2*m12 - m13 - m14 - m23 - m24 -2*m32 - m34 - 2*m42 - m43, m32, m42, m43, m32, m42, m13, m12, m23, 2*m13, 2*m23, -m12 - 3*m13 - 3*m23 - m32 - m42 - 3*m43, 2*m43, m43, m32, m42, m13, m12, m23, m14, m13, m24, m23, m34, -m12 - 2*m13 - m14 - 2*m23 - m24 -m32 - m34 - m42 - 2*m43, m43, m43, m32, m42, m13, m12, m23, 2*m14, 2*m24, 2*m34, -m12 - m13 - 2*m14 - m23 - 2*m24 -m32 - 2*m34 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 -m42, 2*m21, 2*m31, 2*m41, m32, m42, m14, m12, m24, m34, m12, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 -m41 - 2*m42, m32, m42, m21, m31, m41, m32, m42, m14, m12, m24, m34, m13, m23, -m12 - m13 - m14 - m21 - m23 - m24 - m31 -m32 - m34 - m41 - m42 - m43, m43, m21, m31, m41, m32, m42, m14, m12, m24, m34, m14, m24, m34, -m12 - 2*m14 - m21 - 2*m24 - m31 -m32 - 2*m34 - m41 - m42, m21, m31, m41, m32, m42, m14, m12, m24, m34, 2*m12, -3*m12 - m14 - m24 - 3*m32 - m34 - 3*m42, 2*m32, 2*m42, m32, m42, m14, m12, m24, m34, m13, m12, m23, -2*m12 - m13 - m14 - m23 - m24 -2*m32 - m34 - 2*m42 - m43, m43, m32, m42, m32, m42, m14, m12, m24, m34, m14, m12, m24, m34, -2*(m12 + m14 + m24 + m32 + m34 + m42), m32, m42, m32, m42, m14, m12, m24, m34, 2*m13, 2*m23, -m12 - 2*m13 - m14 - 2*m23 - m24 - m32 -m34 - m42 - 2*m43, 2*m43, m32, m42, m14, m12, m24, m34, m14, m13, m24, m23, m34, -m12 - m13 - 2*m14 - m23 -2*m24 - m32 - 2*m34 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, 2*m14, 2*m24, 2*m34, -m12 - 3*m14 - 3*m24 - m32 -3*m34 - m42, m32, m42, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31 + m41 + m43), 2*m21, 2*m31, 2*m41, 2*m43, 2*m13, 2*m23, m12, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 - m42 -2*m43, m32, m42, m21, m31, m41, 2*m43, 2*m13, 2*m23, m13, m23, -3*m13 - m21 - 3*m23 - m31 - m41 - 3*m43, m43, m21, m31, m41, 2*m43, 2*m13, 2*m23, m14, m24, m34, -2*m13 - m14 - m21 - 2*m23 - m24 - m31 -m34 - m41 - 2*m43, m21, m31, m41, 2*m43, 2*m13, 2*m23, 2*m12, -2*(m12 + m13 + m23 + m32 + m42 + m43), 2*m32, 2*m42, 2*m43, 2*m13, 2*m23, m13, m12, m23, -m12 - 3*m13 - 3*m23 - m32 - m42 - 3*m43, m43, m32, m42, 2*m43, 2*m13, 2*m23, m14, m12, m24, m34, -m12 - 2*m13 - m14 - 2*m23 - m24 - m32 -m34 - m42 - 2*m43, m32, m42, 2*m43, 2*m13, 2*m23, 2*m13, 2*m23, -4*(m13 + m23 + m43), 2*m43, 2*m43, 2*m13, 2*m23, m14, m13, m24, m23, m34, -3*m13 - m14 - 3*m23 - m24 - m34 -3*m43, m43, 2*m43, 2*m13, 2*m23, 2*m14, 2*m24, 2*m34, -2*(m13 + m14 + m23 + m24 + m34 + m43), 2*m43, m14, m13, m24, m23, m34, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 -2*m41 - m43, 2*m21, 2*m31, 2*m41, m43, m14, m13, m24, m23, m34, m12, -m12 - m13 - m14 - m21 - m23 - m24 - m31 -m32 - m34 - m41 - m42 - m43, m32, m42, m21, m31, m41, m43, m14, m13, m24, m23, m34, m13, m23, -2*m13 - m14 - m21 - 2*m23 - m24 -m31 - m34 - m41 - 2*m43, m43, m21, m31, m41, m43, m14, m13, m24, m23, m34, m14, m24, m34, -m13 - 2*m14 - m21 - m23 - 2*m24 -m31 - 2*m34 - m41 - m43, m21, m31, m41, m43, m14, m13, m24, m23, m34, 2*m12, -2*m12 - m13 - m14 - m23 - m24 - 2*m32 -m34 - 2*m42 - m43, 2*m32, 2*m42, m43, m14, m13, m24, m23, m34, m13, m12, m23, -m12 - 2*m13 - m14 - 2*m23 - m24 -m32 - m34 - m42 - 2*m43, m43, m32, m42, m43, m14, m13, m24, m23, m34, m14, m12, m24, m34, -m12 - m13 - 2*m14 - m23 -2*m24 - m32 - 2*m34 - m42 - m43, m32, m42, m43, m14, m13, m24, m23, m34, 2*m13, 2*m23, -3*m13 - m14 - 3*m23 - m24 - m34 -3*m43, 2*m43, m43, m14, m13, m24, m23, m34, m14, m13, m24, m23, m34, -2*(m13 + m14 + m23 + m24 + m34 + m43), m43, m43, m14, m13, m24, m23, m34, 2*m14, 2*m24, 2*m34, -m13 - 3*m14 - m23 - 3*m24 -3*m34 - m43, m43, 2*m14, 2*m24, 2*m34, -2*(m14 + m21 + m24 + m31 + m34 + m41), 2*m21, 2*m31, 2*m41, 2*m14, 2*m24, 2*m34, m12, -m12 - 2*m14 - m21 - 2*m24 - m31 - m32 - 2*m34 -m41 - m42, m32, m42, m21, m31, m41, 2*m14, 2*m24, 2*m34, m13, m23, -m13 - 2*m14 - m21 - m23 - 2*m24 - m31 -2*m34 - m41 - m43, m43, m21, m31, m41, 2*m14, 2*m24, 2*m34, m14, m24, m34, -3*m14 - m21 - 3*m24 - m31 - 3*m34 -m41, m21, m31, m41, 2*m14, 2*m24, 2*m34, 2*m12, -2*(m12 + m14 + m24 + m32 + m34 + m42), 2*m32, 2*m42, 2*m14, 2*m24, 2*m34, m13, m12, m23, -m12 - m13 - 2*m14 - m23 - 2*m24 -m32 - 2*m34 - m42 - m43, m43, m32, m42, 2*m14, 2*m24, 2*m34, m14, m12, m24, m34, -m12 - 3*m14 - 3*m24 - m32 -3*m34 - m42, m32, m42, 2*m14, 2*m24, 2*m34, 2*m13, 2*m23, -2*(m13 + m14 + m23 + m24 + m34 + m43), 2*m43, 2*m14, 2*m24, 2*m34, m14, m13, m24, m23, m34, -m13 - 3*m14 - m23 - 3*m24 -3*m34 - m43, m43, 2*m14, 2*m24, 2*m34, 2*m14, 2*m24, 2*m34, -4*(m14 + m24 + m34), -2*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, m12, -m12 - m21 - m31 - m32 - m41 - m42, m32, m42, m21, m31, m41, m13, m23, -m13 - m21 - m23 - m31 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, -m14 - m21 - m24 - m31 - m34 - m41, m21, m31, m41, 2*m12, -2*(m12 + m32 + m42), 2*m32, 2*m42, m13, m12, m23, -m12 - m13 - m23 - m32 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, -m12 - m14 - m24 - m32 - m34 - m42, m32, m42, 2*m13, 2*m23, -2*(m13 + m23 + m43), 2*m43, m14, m13, m24, m23, m34, -m13 - m14 - m23 - m24 - m34 - m43, m43, 2*m14, 2*m24, 2*m34, -2*(m14 + m24 + m34), -2*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, m12, -m12 - m21 - m31 - m32 - m41 - m42, m32, m42, m21, m31, m41, m13, m23, -m13 - m21 - m23 - m31 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, -m14 - m21 - m24 - m31 - m34 - m41, m21, m31, m41, 2*m12, -2*(m12 + m32 + m42), 2*m32, 2*m42, m13, m12, m23, -m12 - m13 - m23 - m32 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, -m12 - m14 - m24 - m32 - m34 - m42, m32, m42, 2*m13, 2*m23, -2*(m13 + m23 + m43), 2*m43, m14, m13, m24, m23, m34, -m13 - m14 - m23 - m24 - m34 - m43, m43, 2*m14, 2*m24, 2*m34, -2*(m14 + m24 + m34)]
    return csc_matrix((data,(row,col)),shape=(195,195))


### multipop pi basis

def drift_two_pop_pi(params):
    nu1,nu2 = params
    nu1 /= 2.
    nu2 /= 2.
    row = [ 0, 0, 0, 1, 2, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 14, 14, 15, 15, 16, 16, 17, 18, 18, 19, 19, 20, 22, 23, 25 ]
    col = [ 0, 3, 11, 1, 2, 10, 19, 0, 3, 4, 5, 1, 6, 1, 7, 8, 9, 2, 10, 3, 11, 4, 12, 13, 5, 14, 6, 7, 8, 16, 17, 9, 18, 10, 19, 20, 22, 23, 25 ]
    data = [ -3./(2*nu1), 1./(2*nu1), 1./(2*nu1), -1.*(nu1 + nu2)/(2*nu1*nu2), -3./(2*nu2), 1./(2*nu2), 1./(2*nu2), 2./nu1, -5./(2*nu1), -3./(2*nu1), -3./(2*nu1), 2./nu2, -1./(2*nu1), 2./nu1, -1./(2*nu2), -3./(2*nu2), -3./(2*nu2), 2./nu2, -5./(2*nu2), 1./(2*nu1), -1./nu1, 1./(4*nu1), -1./(2*nu1), -1.*(nu1 + nu2)/(2*nu1*nu2), 1./(4*nu1), -1./(2*nu1), 1./(8*nu1), 1./(8*nu2), 1./(4*nu2), -1./(2*nu2), -1.*(nu1 + nu2)/(2*nu1*nu2), 1./(4*nu2), -1./(2*nu2), 1./(2*nu2), -1./nu2, -1./(2*nu1), -1./(2*nu2), -1./(2*nu1), -1./(2*nu2) ]
    return csc_matrix((data,(row,col)),shape=(27,27))

def recom_two_pop_pi(params):
    rho = params
    row = range(3+2**3)
    col = range(3+2**3)
    data = [-1.*rho]*3 + [-rho/2.]*2**3
    return csc_matrix((data,(row,col)),shape=(27,27))

def mutat_two_pop_pi(params): # reversible mutation
    theta = params
    row = range(3+2**3+3**2+3+3)
    col = range(3+2**3+3**2+3+3)
    data = [-4.*theta]*(3+2**3+3**2) + [-2.*theta]*(3+3)
    return csc_matrix((data,(row,col)),shape=(27,27))

def migra_two_pop_pi(params):
    m12,m21 = params
    row = [ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20, 20, 21, 21, 21, 22, 22, 23, 23, 24, 24, 24, 25, 25 ]
    col = [ 0, 1, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 7, 8, 9, 10, 3, 4, 5, 7, 11, 12, 14, 15, 3, 4, 6, 8, 12, 13, 15, 16, 3, 5, 6, 9, 14, 15, 17, 18, 4, 5, 6, 10, 15, 16, 18, 19, 3, 7, 8, 9, 11, 12, 14, 15, 4, 7, 8, 10, 12, 13, 15, 16, 5, 7, 9, 10, 14, 15, 17, 18, 6, 8, 9, 10, 15, 16, 18, 19, 11, 12, 14, 11, 12, 13, 15, 12, 13, 16, 11, 14, 15, 17, 12, 14, 15, 16, 18, 13, 15, 16, 19, 14, 17, 18, 15, 17, 18, 19, 16, 18, 19, 20, 21, 20, 21, 22, 21, 22, 23, 24, 23, 24, 25, 24, 25 ]
    data = [ -2*m21, 2*m21, m21*1./2, -m21*1./2, -m21*1./2, m21*1./2, m12, -m12 - m21, m21, m12*1./4, -m12*1./4, -m12*1./4, m12*1./4, m21*1./4, -m21*1./4, -m21*1./4, m21*1./4, 2*m12, -2*m12, m12*1./2, -m12*1./2, -m12*1./2, m12*1./2, -3*m21, m21, m21, m21, 4*m21, -4*m21, -4*m21, 4*m21, m12, -m12 - 2*m21, m21, m21, 4*m21, -4*m21, -4*m21, 4*m21, m12, -m12 - 2*m21, m21, m21, 4*m21, -4*m21, -4*m21, 4*m21, m12, m12, -2*m12 - m21, m21, 4*m21, -4*m21, -4*m21, 4*m21, m12, -m12 - 2*m21, m21, m21, 4*m12, -4*m12, -4*m12, 4*m12, m12, m12, -2*m12 - m21, m21, 4*m12, -4*m12, -4*m12, 4*m12, m12, m12, -2*m12 - m21, m21, 4*m12, -4*m12, -4*m12, 4*m12, m12, m12, m12, -3*m12, 4*m12, -4*m12, -4*m12, 4*m12, -4*m21, 2*m21, 2*m21, m12, -m12 - 3*m21, m21, 2*m21, 2*m12, -2*(m12 + m21), 2*m21, m12, -m12 - 3*m21, 2*m21, m21, m12, m12, -2*(m12 + m21), m21, m21, m12, 2*m12, -3*m12 - m21, m21, 2*m12, -2*(m12 + m21), 2*m21, 2*m12, m12, -3*m12 - m21, m21, 2*m12, 2*m12, -4*m12, -2*m21, 2*m21, m12, -m12 - m21, m21, 2*m12, -2*m12, -2*m21, 2*m21, m12, -m12 - m21, m21, 2*m12, -2*m12 ]
    return csc_matrix((data,(row,col)),shape=(27,27))

def drift_three_pop_pi(params):
    nu1,nu2,nu3 = params
    nu1 /= 2.
    nu2 /= 2.
    nu3 /= 2.
    row = [ 0, 0, 0, 1, 2, 3, 3, 3, 4, 5, 5, 5, 6, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 14, 15, 15, 16, 17, 18, 19, 19, 20, 21, 22, 23, 23, 24, 24, 25, 26, 27, 28, 28, 29, 30, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 37, 38, 39, 39, 40, 40, 41, 42, 42, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 55, 56, 57, 58, 59, 60, 60, 61, 61, 62, 62, 63, 64, 65, 65, 66, 67, 67, 68, 68, 69, 72, 74, 75, 78, 80 ]
    col = [ 0, 6, 33, 1, 2, 3, 19, 54, 4, 5, 32, 68, 0, 6, 7, 8, 9, 1, 10, 11, 12, 13, 2, 14, 1, 15, 16, 17, 18, 3, 19, 20, 21, 22, 4, 23, 2, 24, 25, 26, 27, 4, 28, 29, 30, 31, 5, 32, 6, 33, 7, 34, 8, 35, 36, 37, 38, 9, 39, 10, 15, 11, 16, 42, 17, 44, 12, 45, 13, 14, 24, 48, 25, 26, 50, 51, 18, 52, 53, 19, 54, 20, 55, 56, 57, 21, 27, 22, 60, 23, 28, 29, 62, 63, 64, 30, 65, 66, 31, 67, 32, 68, 69, 72, 74, 75, 78, 80 ]
    data = [ -3./(2*nu1), 1./(2*nu1), 1./(2*nu1), -1.*(nu1 + nu2)/(2*nu1*nu2), -1.*(nu1 + nu3)/(2*nu1*nu3), -3./(2*nu2), 1./(2*nu2), 1./(2*nu2), -1.*(nu2 + nu3)/(2*nu2*nu3), -3./(2*nu3), 1./(2*nu3), 1./(2*nu3), 2./nu1, -5./(2*nu1), -3./(2*nu1), -3./(2*nu1), -3./(2*nu1), 2./nu2, -1./(2*nu1), -1./(2*nu1), -3./(2*nu1), -1./(2*nu1), 2./nu3, -1./(2*nu1), 2./nu1, -1./(2*nu2), -3./(2*nu2), -1./(2*nu2), -3./(2*nu2), 2./nu2, -5./(2*nu2), -3./(2*nu2), -1./(2*nu2), -3./(2*nu2), 2./nu3, -1./(2*nu2), 2./nu1, -1./(2*nu3), -1./(2*nu3), -3./(2*nu3), -1./(2*nu3), 2./nu2, -1./(2*nu3), -3./(2*nu3), -3./(2*nu3), -3./(2*nu3), 2./nu3, -5./(2*nu3), 1./(2*nu1), -1./nu1, 1./(4*nu1), -1./(2*nu1), 1./(4*nu1), -1./(2*nu1), -1.*(nu1 + nu2)/(2*nu1*nu2), -1./(2*nu1), -1.*(nu1 + nu3)/(2*nu1*nu3), 1./(4*nu1), -1./(2*nu1), 1./(8*nu1), 1./(8*nu2), 1./(8*nu1), 1./(4*nu2), -1./(2*nu2), 1./(8*nu2), -1./(2*nu3), 1./(4*nu1), -1./(2*nu1), 1./(8*nu1), 1./(8*nu1), 1./(8*nu3), -1./(2*nu2), 1./(8*nu3), 1./(4*nu3), -1./(2*nu3), -1.*(nu1 + nu2)/(2*nu1*nu2), 1./(4*nu2), -1./(2*nu2), -1./(2*nu2), 1./(2*nu2), -1./nu2, 1./(4*nu2), -1./(2*nu2), -1.*(nu2 + nu3)/(2*nu2*nu3), -1./(2*nu1), 1./(8*nu2), 1./(8*nu3), 1./(4*nu2), -1./(2*nu2), 1./(8*nu2), 1./(8*nu3), 1./(4*nu3), -1./(2*nu3), -1.*(nu1 + nu3)/(2*nu1*nu3), -1./(2*nu3), 1./(4*nu3), -1./(2*nu3), -1.*(nu2 + nu3)/(2*nu2*nu3), 1./(4*nu3), -1./(2*nu3), 1./(2*nu3), -1./nu3, -1./(2*nu1), -1./(2*nu2), -1./(2*nu3), -1./(2*nu1), -1./(2*nu2), -1./(2*nu3) ]
    return csc_matrix((data,(row,col)),shape=(82,82))

def recom_three_pop_pi(params):
    rho = params
    row = range(6+3**3)
    col = range(6+3**3)
    data = [-1./rho]*6 + [-rho/2.]*3**3
    return csc_matrix((data,(row,col)),shape=(82,82))

def mutat_three_pop_pi(params): # reversible mutation
    theta = params
    row = range(6+3**3+6**2+6+6)
    col = range(6+3**3+6**2+6+6)
    data = [-4.*theta]*(6+3**3+6**2) + [-2.*theta]*(6+6)
    return csc_matrix((data,(row,col)),shape=(82,82))

def migra_three_pop_pi(params):
    m12,m21,m13,m31,m23,m32 = params
    row = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 69, 69, 69, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 72, 72, 72, 73, 73, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 78, 78, 78, 79, 79, 79, 79, 79, 80, 80, 80 ]
    col = [ 0, 1, 2, 6, 7, 8, 9, 10, 12, 14, 0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 23, 0, 1, 2, 4, 5, 6, 8, 10, 11, 12, 13, 14, 24, 25, 26, 27, 28, 30, 32, 1, 3, 4, 15, 16, 18, 19, 20, 22, 23, 1, 2, 3, 4, 5, 15, 17, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 31, 32, 2, 4, 5, 24, 26, 28, 29, 30, 31, 32, 6, 7, 8, 9, 12, 15, 24, 33, 34, 35, 39, 40, 45, 47, 6, 7, 8, 10, 13, 16, 25, 34, 36, 37, 40, 42, 46, 49, 6, 7, 8, 11, 14, 17, 26, 35, 37, 38, 41, 43, 47, 50, 6, 9, 10, 11, 12, 18, 27, 39, 40, 41, 51, 52, 57, 59, 7, 9, 10, 11, 13, 19, 28, 40, 42, 43, 52, 54, 58, 61, 8, 9, 10, 11, 14, 20, 29, 41, 43, 44, 53, 55, 59, 62, 6, 9, 12, 13, 14, 21, 30, 45, 46, 47, 57, 58, 63, 65, 7, 10, 12, 13, 14, 22, 31, 46, 48, 49, 58, 60, 64, 67, 8, 11, 12, 13, 14, 23, 32, 47, 49, 50, 59, 61, 65, 68, 6, 15, 16, 17, 18, 21, 24, 33, 34, 39, 40, 41, 46, 47, 7, 15, 16, 17, 19, 22, 25, 34, 36, 40, 42, 43, 48, 49, 8, 15, 16, 17, 20, 23, 26, 35, 37, 41, 43, 44, 49, 50, 9, 15, 18, 19, 20, 21, 27, 39, 40, 51, 52, 53, 58, 59, 10, 16, 18, 19, 20, 22, 28, 40, 42, 52, 54, 55, 60, 61, 11, 17, 18, 19, 20, 23, 29, 41, 43, 53, 55, 56, 61, 62, 12, 15, 18, 21, 22, 23, 30, 45, 46, 57, 58, 59, 64, 65, 13, 16, 19, 21, 22, 23, 31, 46, 48, 58, 60, 61, 66, 67, 14, 17, 20, 21, 22, 23, 32, 47, 49, 59, 61, 62, 67, 68, 6, 15, 24, 25, 26, 27, 30, 33, 35, 40, 41, 45, 46, 47, 7, 16, 24, 25, 26, 28, 31, 34, 37, 42, 43, 46, 48, 49, 8, 17, 24, 25, 26, 29, 32, 35, 38, 43, 44, 47, 49, 50, 9, 18, 24, 27, 28, 29, 30, 39, 41, 52, 53, 57, 58, 59, 10, 19, 25, 27, 28, 29, 31, 40, 43, 54, 55, 58, 60, 61, 11, 20, 26, 27, 28, 29, 32, 41, 44, 55, 56, 59, 61, 62, 12, 21, 24, 27, 30, 31, 32, 45, 47, 58, 59, 63, 64, 65, 13, 22, 25, 28, 30, 31, 32, 46, 49, 60, 61, 64, 66, 67, 14, 23, 26, 29, 30, 31, 32, 47, 50, 61, 62, 65, 67, 68, 33, 34, 35, 39, 45, 33, 34, 35, 36, 37, 40, 46, 33, 34, 35, 37, 38, 41, 47, 34, 36, 37, 42, 48, 34, 35, 36, 37, 38, 43, 49, 35, 37, 38, 44, 50, 33, 39, 40, 41, 45, 51, 57, 34, 39, 40, 41, 42, 43, 46, 52, 58, 35, 39, 40, 41, 43, 44, 47, 53, 59, 36, 40, 42, 43, 48, 54, 60, 37, 40, 41, 42, 43, 44, 49, 55, 61, 38, 41, 43, 44, 50, 56, 62, 33, 39, 45, 46, 47, 57, 63, 34, 40, 45, 46, 47, 48, 49, 58, 64, 35, 41, 45, 46, 47, 49, 50, 59, 65, 36, 42, 46, 48, 49, 60, 66, 37, 43, 46, 47, 48, 49, 50, 61, 67, 38, 44, 47, 49, 50, 62, 68, 39, 51, 52, 53, 57, 40, 51, 52, 53, 54, 55, 58, 41, 51, 52, 53, 55, 56, 59, 42, 52, 54, 55, 60, 43, 52, 53, 54, 55, 56, 61, 44, 53, 55, 56, 62, 39, 45, 51, 57, 58, 59, 63, 40, 46, 52, 57, 58, 59, 60, 61, 64, 41, 47, 53, 57, 58, 59, 61, 62, 65, 42, 48, 54, 58, 60, 61, 66, 43, 49, 55, 58, 59, 60, 61, 62, 67, 44, 50, 56, 59, 61, 62, 68, 45, 57, 63, 64, 65, 46, 58, 63, 64, 65, 66, 67, 47, 59, 63, 64, 65, 67, 68, 48, 60, 64, 66, 67, 49, 61, 64, 65, 66, 67, 68, 50, 62, 65, 67, 68, 69, 70, 71, 69, 70, 71, 72, 73, 69, 70, 71, 73, 74, 70, 72, 73, 70, 71, 72, 73, 74, 71, 73, 74, 75, 76, 77, 75, 76, 77, 78, 79, 75, 76, 77, 79, 80, 76, 78, 79, 76, 77, 78, 79, 80, 77, 79, 80 ]
    data = [ -2*(m21 + m31), 2*m21, 2*m31, (m21 + m31)*1./2, -m21*1./2, -m31*1./2, -m21*1./2, m21*1./2, -m31*1./2, m31*1./2, m12, -m12 - m21 - m31 - m32, m32, m21, m31, m12*1./4, -m12*1./4, -m12*1./4, (m12 + m32)*1./4, -m32*1./4, -m32*1./4, m32*1./4, (m21 + m31)*1./4, -m21*1./4, -m31*1./4, -m21*1./4, m21*1./4, -m31*1./4, m31*1./4, m13, m23, -m13 - m21 - m23 - m31, m21, m31, m13*1./4, -m13*1./4, m23*1./4, -m23*1./4, -m13*1./4, -m23*1./4, (m13 + m23)*1./4, (m21 + m31)*1./4, -m21*1./4, -m31*1./4, -m21*1./4, m21*1./4, -m31*1./4, m31*1./4, 2*m12, -2*(m12 + m32), 2*m32, m12*1./2, -m12*1./2, -m12*1./2, (m12 + m32)*1./2, -m32*1./2, -m32*1./2, m32*1./2, m13, m12, m23, -m12 - m13 - m23 - m32, m32, m13*1./4, -m13*1./4, m23*1./4, -m23*1./4, -m13*1./4, -m23*1./4, (m13 + m23)*1./4, m12*1./4, -m12*1./4, -m12*1./4, (m12 + m32)*1./4, -m32*1./4, -m32*1./4, m32*1./4, 2*m13, 2*m23, -2*(m13 + m23), m13*1./2, -m13*1./2, m23*1./2, -m23*1./2, -m13*1./2, -m23*1./2, (m13 + m23)*1./2, -3*(m21 + m31), m21, m31, m21, m31, m21, m31, 4*m21 + 4*m31, -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m12, -m12 - 2*m21 - 2*m31 - m32, m32, m21, m31, m21, m31, 2*(2*m21 + 2*m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m13, m23, -m13 - 2*m21 - m23 - 2*m31, m21, m31, m21, m31, 2*(2*m21 + 2*m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m12, -m12 - 2*m21 - 2*m31 - m32, m21, m31, m32, m21, m31, 2*(2*m21 + 2*m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m12, m12, -2*m12 - m21 - m31 - 2*m32, m32, m32, m21, m31, 4*(m21 + m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32, m32, m21, m31, 4*(m21 + m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m13, m23, -m13 - 2*m21 - m23 - 2*m31, m21, m31, m21, m31, 2*(2*m21 + 2*m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32, m32, m21, m31, 4*(m21 + m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31, m21, m31, 4*(m21 + m31), -4*m21, -4*m31, -4*m21, 4*m21, -4*m31, 4*m31, m12, -m12 - 2*m21 - 2*m31 - m32, m21, m31, m21, m31, m32, 4*m12, -4*m12, -4*m12, 4*(m12 + m32), -4*m32, -4*m32, 4*m32, m12, m12, -2*m12 - m21 - m31 - 2*m32, m32, m21, m31, m32, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32), -4*m32, -4*m32, 4*m32, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32, m21, m31, m32, 4*m12, -4*m12, -4*m12, 4*(m12 + m32), -4*m32, -4*m32, 4*m32, m12, m12, -2*m12 - m21 - m31 - 2*m32, m21, m31, m32, m32, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32), -4*m32, -4*m32, 4*m32, m12, m12, m12, -3*(m12 + m32), m32, m32, m32, 4*m12, -4*m12, -4*m12, 4*m12 + 4*m32, -4*m32, -4*m32, 4*m32, m12, m12, m13, m23, -2*m12 - m13 - m23 - 2*m32, m32, m32, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32), -4*m32, -4*m32, 4*m32, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32, m21, m31, m32, 4*m12, -4*m12, -4*m12, 4*(m12 + m32), -4*m32, -4*m32, 4*m32, m12, m13, m23, m12, -2*m12 - m13 - m23 - 2*m32, m32, m32, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32), -4*m32, -4*m32, 4*m32, m12, m13, m23, m13, m23, -m12 - 2*m13 - 2*m23 - m32, m32, 4*m12, -4*m12, -4*m12, 4*(m12 + m32), -4*m32, -4*m32, 4*m32, m13, m23, -m13 - 2*m21 - m23 - 2*m31, m21, m31, m21, m31, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23), m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32, m32, m21, m31, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23), m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31, m21, m31, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23), m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32, m21, m31, m32, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23), m13, m23, m12, m12, -2*m12 - m13 - m23 - 2*m32, m32, m32, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23), m13, m23, m12, m13, m23, -m12 - 2*m13 - 2*m23 - m32, m32, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23), m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31, m21, m31, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23), m13, m23, m13, m23, m12, -m12 - 2*m13 - 2*m23 - m32, m32, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23), m13, m23, m13, m23, m13, m23, -3*(m13 + m23), 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*m13 + 4*m23, -4*(m21 + m31), 2*m21, 2*m31, 2*m21, 2*m31, m12, -m12 - 3*m21 - 3*m31 - m32, m32, m21, m31, 2*m21, 2*m31, m13, m23, -m13 - 3*m21 - m23 - 3*m31, m21, m31, 2*m21, 2*m31, 2*m12, -2*(m12 + m21 + m31 + m32), 2*m32, 2*m21, 2*m31, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, m32, 2*m21, 2*m31, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31), 2*m21, 2*m31, m12, -m12 - 3*m21 - 3*m31 - m32, 2*m21, 2*m31, m32, m21, m31, m12, m12, -2*(m12 + m21 + m31 + m32), m32, m21, m31, m32, m21, m31, m12, m13, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, m21, m31, m32, m21, m31, m12, 2*m12, -3*m12 - m21 - m31 - 3*m32, 2*m32, m32, m21, m31, m12, m13, m12, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, m32, m32, m21, m31, m12, 2*m13, 2*m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m32, m21, m31, m13, m23, -m13 - 3*m21 - m23 - 3*m31, 2*m21, 2*m31, m21, m31, m13, m23, m12, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, m32, m21, m31, m21, m31, m13, m23, m13, m23, -2*(m13 + m21 + m23 + m31), m21, m31, m21, m31, m13, m23, 2*m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, 2*m32, m21, m31, m13, m23, m13, m12, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m32, m21, m31, m13, m23, 2*m13, 2*m23, -3*m13 - m21 - 3*m23 - m31, m21, m31, 2*m12, -2*(m12 + m21 + m31 + m32), 2*m21, 2*m31, 2*m32, 2*m12, m12, -3*m12 - m21 - m31 - 3*m32, m32, m21, m31, 2*m32, 2*m12, m13, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, m21, m31, 2*m32, 2*m12, 2*m12, -4*(m12 + m32), 2*m32, 2*m32, 2*m12, m13, m12, m23, -3*m12 - m13 - m23 - 3*m32, m32, 2*m32, 2*m12, 2*m13, 2*m23, -2*(m12 + m13 + m23 + m32), 2*m32, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32, 2*m21, 2*m31, m32, m13, m12, m23, m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32, m32, m21, m31, m32, m13, m12, m23, m13, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m21, m31, m32, m13, m12, m23, 2*m12, -3*m12 - m13 - m23 - 3*m32, 2*m32, m32, m13, m12, m23, m13, m12, m23, -2*(m12 + m13 + m23 + m32), m32, m32, m13, m12, m23, 2*m13, 2*m23, -m12 - 3*m13 - 3*m23 - m32, m32, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31), 2*m21, 2*m31, 2*m13, 2*m23, m12, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32, m32, m21, m31, 2*m13, 2*m23, m13, m23, -3*m13 - m21 - 3*m23 - m31, m21, m31, 2*m13, 2*m23, 2*m12, -2*(m12 + m13 + m23 + m32), 2*m32, 2*m13, 2*m23, m13, m12, m23, -m12 - 3*m13 - 3*m23 - m32, m32, 2*m13, 2*m23, 2*m13, 2*m23, -4*(m13 + m23), -2*(m21 + m31), 2*m21, 2*m31, m12, -m12 - m21 - m31 - m32, m32, m21, m31, m13, m23, -m13 - m21 - m23 - m31, m21, m31, 2*m12, -2*(m12 + m32), 2*m32, m13, m12, m23, -m12 - m13 - m23 - m32, m32, 2*m13, 2*m23, -2*(m13 + m23), -2*(m21 + m31), 2*m21, 2*m31, m12, -m12 - m21 - m31 - m32, m32, m21, m31, m13, m23, -m13 - m21 - m23 - m31, m21, m31, 2*m12, -2*(m12 + m32), 2*m32, m13, m12, m23, -m12 - m13 - m23 - m32, m32, 2*m13, 2*m23, -2*(m13 + m23) ]
    return csc_matrix((data,(row,col)),shape=(82,82))

def drift_four_pop_pi(params):
    nu1,nu2,nu3,nu4 = params
    nu1 /= 2.
    nu2 /= 2.
    nu3 /= 2.
    nu4 /= 2.
    row = [ 0, 0, 0, 1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 7, 8, 9, 9, 9, 10, 10, 11, 12, 13, 14, 15, 15, 16, 17, 18, 19, 20, 20, 21, 22, 23, 24, 25, 25, 26, 26, 27, 28, 29, 30, 31, 31, 32, 33, 34, 35, 36, 36, 37, 38, 39, 40, 41, 41, 42, 42, 43, 44, 45, 46, 47, 47, 48, 49, 50, 51, 52, 52, 53, 54, 55, 56, 57, 57, 58, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72, 73, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 79, 80, 81, 82, 83, 84, 84, 85, 85, 86, 87, 88, 88, 89, 90, 91, 93, 94, 94, 95, 96, 96, 97, 98, 99, 101, 101, 102, 103, 104, 104, 105, 106, 107, 107, 108, 110, 111, 112, 113, 113, 114, 115, 115, 116, 117, 118, 118, 119, 119, 120, 120, 121, 122, 123, 124, 125, 126, 128, 128, 129, 129, 130, 131, 131, 132, 133, 134, 135, 137, 138, 138, 139, 140, 140, 141, 142, 143, 143, 144, 145, 146, 146, 147, 148, 149, 149, 150, 151, 151, 152, 152, 153, 154, 156, 157, 158, 159, 160, 161, 161, 162, 162, 163, 163, 164, 165, 166, 167, 167, 168, 169, 170, 170, 171, 172, 172, 173, 173, 174, 178, 181, 183, 184, 188, 191, 193 ]
    col = [ 0, 10, 74, 1, 2, 3, 4, 31, 118, 5, 6, 7, 52, 151, 8, 9, 73, 173, 0, 10, 11, 12, 13, 14, 1, 15, 16, 17, 18, 19, 2, 20, 21, 22, 23, 24, 3, 25, 1, 26, 27, 28, 29, 30, 4, 31, 32, 33, 34, 35, 5, 36, 37, 38, 39, 40, 6, 41, 2, 42, 43, 44, 45, 46, 5, 47, 48, 49, 50, 51, 7, 52, 53, 54, 55, 56, 8, 57, 3, 58, 59, 60, 61, 62, 6, 63, 64, 65, 66, 67, 8, 68, 69, 70, 71, 72, 9, 73, 10, 74, 11, 75, 12, 76, 13, 77, 78, 79, 80, 81, 82, 83, 14, 84, 15, 26, 16, 17, 27, 88, 28, 29, 91, 93, 18, 94, 19, 20, 42, 21, 98, 43, 44, 101, 45, 103, 22, 104, 23, 24, 25, 58, 108, 59, 111, 60, 61, 113, 114, 30, 115, 116, 117, 31, 118, 32, 119, 33, 120, 121, 122, 123, 124, 34, 46, 35, 128, 36, 47, 37, 48, 131, 49, 133, 134, 38, 62, 39, 138, 40, 41, 63, 141, 64, 65, 143, 144, 145, 50, 146, 147, 148, 51, 149, 150, 52, 151, 53, 152, 153, 154, 54, 66, 158, 55, 67, 56, 161, 57, 68, 69, 163, 164, 165, 166, 70, 167, 168, 169, 71, 170, 171, 72, 172, 73, 173, 174, 178, 181, 183, 184, 188, 191, 193 ]
    data = [ -3./(2*nu1), 1./(2*nu1), 1./(2*nu1), -1.*(nu1 + nu2)/(2*nu1*nu2), -1.*(nu1 + nu3)/(2*nu1*nu3), -1.*(nu1 + nu4)/(2*nu1*nu4), -3./(2*nu2), 1./(2*nu2), 1./(2*nu2), -1.*(nu2 + nu3)/(2*nu2*nu3), -1.*(nu2 + nu4)/(2*nu2*nu4), -3./(2*nu3), 1./(2*nu3), 1./(2*nu3), -1.*(nu3 + nu4)/(2*nu3*nu4), -3./(2*nu4), 1./(2*nu4), 1./(2*nu4), 2./nu1, -5./(2*nu1), -3./(2*nu1), -3./(2*nu1), -3./(2*nu1), -3./(2*nu1), 2./nu2, -1./(2*nu1), -1./(2*nu1), -1./(2*nu1), -3./(2*nu1), -1./(2*nu1), 2./nu3, -1./(2*nu1), -1./(2*nu1), -3./(2*nu1), -1./(2*nu1), -1./(2*nu1), 2./nu4, -1./(2*nu1), 2./nu1, -1./(2*nu2), -3./(2*nu2), -1./(2*nu2), -1./(2*nu2), -3./(2*nu2), 2./nu2, -5./(2*nu2), -3./(2*nu2), -3./(2*nu2), -1./(2*nu2), -3./(2*nu2), 2./nu3, -1./(2*nu2), -1./(2*nu2), -1./(2*nu2), -3./(2*nu2), -1./(2*nu2), 2./nu4, -1./(2*nu2), 2./nu1, -1./(2*nu3), -1./(2*nu3), -3./(2*nu3), -1./(2*nu3), -1./(2*nu3), 2./nu2, -1./(2*nu3), -3./(2*nu3), -1./(2*nu3), -3./(2*nu3), -3./(2*nu3), 2./nu3, -5./(2*nu3), -3./(2*nu3), -1./(2*nu3), -1./(2*nu3), -3./(2*nu3), 2./nu4, -1./(2*nu3), 2./nu1, -1./(2*nu4), -1./(2*nu4), -1./(2*nu4), -3./(2*nu4), -1./(2*nu4), 2./nu2, -1./(2*nu4), -1./(2*nu4), -3./(2*nu4), -1./(2*nu4), -1./(2*nu4), 2./nu3, -1./(2*nu4), -3./(2*nu4), -3./(2*nu4), -3./(2*nu4), -3./(2*nu4), 2./nu4, -5./(2*nu4), 1./(2*nu1), -1./nu1, 1./(4*nu1), -1./(2*nu1), 1./(4*nu1), -1./(2*nu1), 1./(4*nu1), -1./(2*nu1), -1.*(nu1 + nu2)/(2*nu1*nu2), -1./(2*nu1), -1./(2*nu1), -1.*(nu1 + nu3)/(2*nu1*nu3), -1./(2*nu1), -1.*(nu1 + nu4)/(2*nu1*nu4), 1./(4*nu1), -1./(2*nu1), 1./(8*nu1), 1./(8*nu2), 1./(8*nu1), 1./(8*nu1), 1./(4*nu2), -1./(2*nu2), 1./(8*nu2), 1./(8*nu2), -1./(2*nu3), -1./(2*nu4), 1./(4*nu1), -1./(2*nu1), 1./(8*nu1), 1./(8*nu1), 1./(8*nu3), 1./(8*nu1), -1./(2*nu2), 1./(8*nu3), 1./(4*nu3), -1./(2*nu3), 1./(8*nu3), -1./(2*nu4), 1./(4*nu1), -1./(2*nu1), 1./(8*nu1), 1./(8*nu1), 1./(8*nu1), 1./(8*nu4), -1./(2*nu2), 1./(8*nu4), -1./(2*nu3), 1./(8*nu4), 1./(4*nu4), -1./(2*nu4), -1.*(nu1 + nu2)/(2*nu1*nu2), 1./(4*nu2), -1./(2*nu2), -1./(2*nu2), -1./(2*nu2), 1./(2*nu2), -1./nu2, 1./(4*nu2), -1./(2*nu2), 1./(4*nu2), -1./(2*nu2), -1.*(nu2 + nu3)/(2*nu2*nu3), -1./(2*nu2), -1.*(nu2 + nu4)/(2*nu2*nu4), -1./(2*nu1), 1./(8*nu2), 1./(8*nu3), 1./(4*nu2), -1./(2*nu2), 1./(8*nu2), 1./(8*nu3), 1./(8*nu2), 1./(4*nu3), -1./(2*nu3), 1./(8*nu3), -1./(2*nu4), -1./(2*nu1), 1./(8*nu2), 1./(8*nu4), 1./(4*nu2), -1./(2*nu2), 1./(8*nu2), 1./(8*nu2), 1./(8*nu4), -1./(2*nu3), 1./(8*nu4), 1./(4*nu4), -1./(2*nu4), -1.*(nu1 + nu3)/(2*nu1*nu3), -1./(2*nu3), 1./(4*nu3), -1./(2*nu3), -1./(2*nu3), -1.*(nu2 + nu3)/(2*nu2*nu3), 1./(4*nu3), -1./(2*nu3), -1./(2*nu3), 1./(2*nu3), -1./nu3, 1./(4*nu3), -1./(2*nu3), -1.*(nu3 + nu4)/(2*nu3*nu4), -1./(2*nu1), 1./(8*nu3), 1./(8*nu4), -1./(2*nu2), 1./(8*nu3), 1./(8*nu4), 1./(4*nu3), -1./(2*nu3), 1./(8*nu3), 1./(8*nu4), 1./(4*nu4), -1./(2*nu4), -1.*(nu1 + nu4)/(2*nu1*nu4), -1./(2*nu4), -1./(2*nu4), 1./(4*nu4), -1./(2*nu4), -1.*(nu2 + nu4)/(2*nu2*nu4), -1./(2*nu4), 1./(4*nu4), -1./(2*nu4), -1.*(nu3 + nu4)/(2*nu3*nu4), 1./(4*nu4), -1./(2*nu4), 1./(2*nu4), -1./nu4, -1./(2*nu1), -1./(2*nu2), -1./(2*nu3), -1./(2*nu4), -1./(2*nu1), -1./(2*nu2), -1./(2*nu3), -1./(2*nu4) ]
    return csc_matrix((data,(row,col)),shape=(195,195))

def recom_four_pop_pi(params):
    rho = params
    row = range(10+4**3)
    col = range(10+4**3)
    data = [-1.*rho]*10 + [-rho/2.]*4**3
    return csc_matrix((data,(row,col)),shape=(195,195))

def mutat_four_pop_pi(params):
    theta = params
    row = range(10+4**3+10**2+10+10)
    col = range(10+4**3+10**2+10+10)
    data = [-4.*theta]*(10+4**3+10**2) + [-2.*theta]*(10+10)
    return csc_matrix((data,(row,col)),shape=(195,195))

def migra_four_pop_pi(params):
    m12,m21,m13,m31,m14,m41,m23,m32,m24,m42,m34,m43 = params
    row = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 74, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 118, 118, 118, 118, 118, 118, 118, 119, 119, 119, 119, 119, 119, 119, 119, 119, 119, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 121, 121, 121, 121, 121, 121, 121, 122, 122, 122, 122, 122, 122, 122, 122, 122, 122, 123, 123, 123, 123, 123, 123, 123, 124, 124, 124, 124, 124, 124, 124, 124, 124, 124, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 126, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 130, 131, 131, 131, 131, 131, 131, 131, 131, 131, 131, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 133, 133, 133, 133, 133, 133, 133, 133, 133, 133, 134, 134, 134, 134, 134, 134, 134, 134, 134, 134, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 135, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 137, 138, 138, 138, 138, 138, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 141, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 143, 143, 143, 143, 143, 143, 143, 144, 144, 144, 144, 144, 144, 144, 145, 145, 145, 145, 145, 145, 145, 145, 145, 145, 146, 146, 146, 146, 146, 146, 146, 146, 146, 146, 147, 147, 147, 147, 147, 147, 147, 147, 147, 147, 148, 148, 148, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 151, 151, 151, 151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 153, 153, 153, 153, 153, 153, 153, 154, 154, 154, 154, 154, 154, 154, 154, 154, 154, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 155, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 156, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 157, 158, 158, 158, 158, 158, 158, 158, 158, 158, 158, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 159, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 161, 161, 161, 161, 161, 161, 161, 161, 161, 161, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 162, 163, 163, 163, 163, 163, 163, 163, 163, 163, 163, 164, 164, 164, 164, 164, 164, 164, 165, 165, 165, 165, 165, 165, 165, 165, 165, 165, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 167, 167, 167, 167, 167, 167, 167, 167, 167, 167, 168, 168, 168, 168, 168, 168, 168, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 170, 170, 170, 170, 170, 170, 170, 170, 170, 170, 171, 171, 171, 171, 171, 171, 171, 172, 172, 172, 172, 172, 172, 172, 172, 172, 172, 173, 173, 173, 173, 173, 173, 173, 174, 174, 174, 174, 175, 175, 175, 175, 175, 175, 175, 176, 176, 176, 176, 176, 176, 176, 177, 177, 177, 177, 177, 177, 177, 178, 178, 178, 178, 179, 179, 179, 179, 179, 179, 179, 180, 180, 180, 180, 180, 180, 180, 181, 181, 181, 181, 182, 182, 182, 182, 182, 182, 182, 183, 183, 183, 183, 184, 184, 184, 184, 185, 185, 185, 185, 185, 185, 185, 186, 186, 186, 186, 186, 186, 186, 187, 187, 187, 187, 187, 187, 187, 188, 188, 188, 188, 189, 189, 189, 189, 189, 189, 189, 190, 190, 190, 190, 190, 190, 190, 191, 191, 191, 191, 192, 192, 192, 192, 192, 192, 192, 193, 193, 193, 193 ]
    col = [ 0, 1, 2, 3, 10, 11, 12, 13, 14, 15, 18, 20, 22, 25, 0, 1, 2, 3, 4, 5, 6, 10, 11, 14, 15, 16, 17, 19, 20, 23, 25, 26, 27, 28, 29, 30, 31, 34, 36, 38, 41, 0, 1, 2, 3, 5, 7, 8, 10, 12, 15, 16, 18, 19, 20, 21, 24, 25, 42, 43, 44, 45, 46, 47, 50, 52, 54, 57, 0, 1, 2, 3, 6, 8, 9, 10, 13, 15, 17, 20, 21, 22, 23, 24, 25, 58, 59, 60, 61, 62, 63, 66, 68, 70, 73, 1, 4, 5, 6, 26, 27, 30, 31, 32, 33, 35, 36, 39, 41, 1, 2, 4, 5, 6, 7, 8, 26, 28, 31, 32, 34, 35, 36, 37, 40, 41, 42, 43, 46, 47, 48, 49, 51, 52, 55, 57, 1, 3, 4, 5, 6, 8, 9, 26, 29, 31, 33, 36, 37, 38, 39, 40, 41, 58, 59, 62, 63, 64, 65, 67, 68, 71, 73, 2, 5, 7, 8, 42, 44, 47, 48, 50, 51, 52, 53, 56, 57, 2, 3, 5, 6, 7, 8, 9, 42, 45, 47, 49, 52, 53, 54, 55, 56, 57, 58, 60, 63, 64, 66, 67, 68, 69, 72, 73, 3, 6, 8, 9, 58, 61, 63, 65, 68, 69, 70, 71, 72, 73, 10, 11, 12, 13, 14, 18, 22, 26, 42, 58, 74, 75, 76, 77, 84, 85, 94, 96, 104, 107, 10, 11, 12, 13, 15, 19, 23, 27, 43, 59, 75, 78, 79, 80, 85, 88, 95, 99, 105, 110, 10, 11, 12, 13, 16, 20, 24, 28, 44, 60, 76, 79, 81, 82, 86, 89, 96, 101, 106, 112, 10, 11, 12, 13, 17, 21, 25, 29, 45, 61, 77, 80, 82, 83, 87, 90, 97, 102, 107, 113, 10, 14, 15, 16, 17, 18, 22, 30, 46, 62, 84, 85, 86, 87, 114, 115, 124, 126, 134, 137, 11, 14, 15, 16, 17, 19, 23, 31, 47, 63, 85, 88, 89, 90, 115, 118, 125, 129, 135, 140, 12, 14, 15, 16, 17, 20, 24, 32, 48, 64, 86, 89, 91, 92, 116, 119, 126, 131, 136, 142, 13, 14, 15, 16, 17, 21, 25, 33, 49, 65, 87, 90, 92, 93, 117, 120, 127, 132, 137, 143, 10, 14, 18, 19, 20, 21, 22, 34, 50, 66, 94, 95, 96, 97, 124, 125, 144, 146, 154, 157, 11, 15, 18, 19, 20, 21, 23, 35, 51, 67, 95, 98, 99, 100, 125, 128, 145, 149, 155, 160, 12, 16, 18, 19, 20, 21, 24, 36, 52, 68, 96, 99, 101, 102, 126, 129, 146, 151, 156, 162, 13, 17, 18, 19, 20, 21, 25, 37, 53, 69, 97, 100, 102, 103, 127, 130, 147, 152, 157, 163, 10, 14, 18, 22, 23, 24, 25, 38, 54, 70, 104, 105, 106, 107, 134, 135, 154, 156, 164, 167, 11, 15, 19, 22, 23, 24, 25, 39, 55, 71, 105, 108, 109, 110, 135, 138, 155, 159, 165, 170, 12, 16, 20, 22, 23, 24, 25, 40, 56, 72, 106, 109, 111, 112, 136, 139, 156, 161, 166, 172, 13, 17, 21, 22, 23, 24, 25, 41, 57, 73, 107, 110, 112, 113, 137, 140, 157, 162, 167, 173, 10, 26, 27, 28, 29, 30, 34, 38, 42, 58, 74, 75, 84, 85, 86, 87, 95, 96, 105, 107, 11, 26, 27, 28, 29, 31, 35, 39, 43, 59, 75, 78, 85, 88, 89, 90, 98, 99, 108, 110, 12, 26, 27, 28, 29, 32, 36, 40, 44, 60, 76, 79, 86, 89, 91, 92, 99, 101, 109, 112, 13, 26, 27, 28, 29, 33, 37, 41, 45, 61, 77, 80, 87, 90, 92, 93, 100, 102, 110, 113, 14, 26, 30, 31, 32, 33, 34, 38, 46, 62, 84, 85, 114, 115, 116, 117, 125, 126, 135, 137, 15, 27, 30, 31, 32, 33, 35, 39, 47, 63, 85, 88, 115, 118, 119, 120, 128, 129, 138, 140, 16, 28, 30, 31, 32, 33, 36, 40, 48, 64, 86, 89, 116, 119, 121, 122, 129, 131, 139, 142, 17, 29, 30, 31, 32, 33, 37, 41, 49, 65, 87, 90, 117, 120, 122, 123, 130, 132, 140, 143, 18, 26, 30, 34, 35, 36, 37, 38, 50, 66, 94, 95, 124, 125, 126, 127, 145, 146, 155, 157, 19, 27, 31, 34, 35, 36, 37, 39, 51, 67, 95, 98, 125, 128, 129, 130, 148, 149, 158, 160, 20, 28, 32, 34, 35, 36, 37, 40, 52, 68, 96, 99, 126, 129, 131, 132, 149, 151, 159, 162, 21, 29, 33, 34, 35, 36, 37, 41, 53, 69, 97, 100, 127, 130, 132, 133, 150, 152, 160, 163, 22, 26, 30, 34, 38, 39, 40, 41, 54, 70, 104, 105, 134, 135, 136, 137, 155, 156, 165, 167, 23, 27, 31, 35, 38, 39, 40, 41, 55, 71, 105, 108, 135, 138, 139, 140, 158, 159, 168, 170, 24, 28, 32, 36, 38, 39, 40, 41, 56, 72, 106, 109, 136, 139, 141, 142, 159, 161, 169, 172, 25, 29, 33, 37, 38, 39, 40, 41, 57, 73, 107, 110, 137, 140, 142, 143, 160, 162, 170, 173, 10, 26, 42, 43, 44, 45, 46, 50, 54, 58, 74, 76, 85, 86, 94, 95, 96, 97, 106, 107, 11, 27, 42, 43, 44, 45, 47, 51, 55, 59, 75, 79, 88, 89, 95, 98, 99, 100, 109, 110, 12, 28, 42, 43, 44, 45, 48, 52, 56, 60, 76, 81, 89, 91, 96, 99, 101, 102, 111, 112, 13, 29, 42, 43, 44, 45, 49, 53, 57, 61, 77, 82, 90, 92, 97, 100, 102, 103, 112, 113, 14, 30, 42, 46, 47, 48, 49, 50, 54, 62, 84, 86, 115, 116, 124, 125, 126, 127, 136, 137, 15, 31, 43, 46, 47, 48, 49, 51, 55, 63, 85, 89, 118, 119, 125, 128, 129, 130, 139, 140, 16, 32, 44, 46, 47, 48, 49, 52, 56, 64, 86, 91, 119, 121, 126, 129, 131, 132, 141, 142, 17, 33, 45, 46, 47, 48, 49, 53, 57, 65, 87, 92, 120, 122, 127, 130, 132, 133, 142, 143, 18, 34, 42, 46, 50, 51, 52, 53, 54, 66, 94, 96, 125, 126, 144, 145, 146, 147, 156, 157, 19, 35, 43, 47, 50, 51, 52, 53, 55, 67, 95, 99, 128, 129, 145, 148, 149, 150, 159, 160, 20, 36, 44, 48, 50, 51, 52, 53, 56, 68, 96, 101, 129, 131, 146, 149, 151, 152, 161, 162, 21, 37, 45, 49, 50, 51, 52, 53, 57, 69, 97, 102, 130, 132, 147, 150, 152, 153, 162, 163, 22, 38, 42, 46, 50, 54, 55, 56, 57, 70, 104, 106, 135, 136, 154, 155, 156, 157, 166, 167, 23, 39, 43, 47, 51, 54, 55, 56, 57, 71, 105, 109, 138, 139, 155, 158, 159, 160, 169, 170, 24, 40, 44, 48, 52, 54, 55, 56, 57, 72, 106, 111, 139, 141, 156, 159, 161, 162, 171, 172, 25, 41, 45, 49, 53, 54, 55, 56, 57, 73, 107, 112, 140, 142, 157, 160, 162, 163, 172, 173, 10, 26, 42, 58, 59, 60, 61, 62, 66, 70, 74, 77, 85, 87, 96, 97, 104, 105, 106, 107, 11, 27, 43, 58, 59, 60, 61, 63, 67, 71, 75, 80, 88, 90, 99, 100, 105, 108, 109, 110, 12, 28, 44, 58, 59, 60, 61, 64, 68, 72, 76, 82, 89, 92, 101, 102, 106, 109, 111, 112, 13, 29, 45, 58, 59, 60, 61, 65, 69, 73, 77, 83, 90, 93, 102, 103, 107, 110, 112, 113, 14, 30, 46, 58, 62, 63, 64, 65, 66, 70, 84, 87, 115, 117, 126, 127, 134, 135, 136, 137, 15, 31, 47, 59, 62, 63, 64, 65, 67, 71, 85, 90, 118, 120, 129, 130, 135, 138, 139, 140, 16, 32, 48, 60, 62, 63, 64, 65, 68, 72, 86, 92, 119, 122, 131, 132, 136, 139, 141, 142, 17, 33, 49, 61, 62, 63, 64, 65, 69, 73, 87, 93, 120, 123, 132, 133, 137, 140, 142, 143, 18, 34, 50, 58, 62, 66, 67, 68, 69, 70, 94, 97, 125, 127, 146, 147, 154, 155, 156, 157, 19, 35, 51, 59, 63, 66, 67, 68, 69, 71, 95, 100, 128, 130, 149, 150, 155, 158, 159, 160, 20, 36, 52, 60, 64, 66, 67, 68, 69, 72, 96, 102, 129, 132, 151, 152, 156, 159, 161, 162, 21, 37, 53, 61, 65, 66, 67, 68, 69, 73, 97, 103, 130, 133, 152, 153, 157, 160, 162, 163, 22, 38, 54, 58, 62, 66, 70, 71, 72, 73, 104, 107, 135, 137, 156, 157, 164, 165, 166, 167, 23, 39, 55, 59, 63, 67, 70, 71, 72, 73, 105, 110, 138, 140, 159, 160, 165, 168, 169, 170, 24, 40, 56, 60, 64, 68, 70, 71, 72, 73, 106, 112, 139, 142, 161, 162, 166, 169, 171, 172, 25, 41, 57, 61, 65, 69, 70, 71, 72, 73, 107, 113, 140, 143, 162, 163, 167, 170, 172, 173, 74, 75, 76, 77, 84, 94, 104, 74, 75, 76, 77, 78, 79, 80, 85, 95, 105, 74, 75, 76, 77, 79, 81, 82, 86, 96, 106, 74, 75, 76, 77, 80, 82, 83, 87, 97, 107, 75, 78, 79, 80, 88, 98, 108, 75, 76, 78, 79, 80, 81, 82, 89, 99, 109, 75, 77, 78, 79, 80, 82, 83, 90, 100, 110, 76, 79, 81, 82, 91, 101, 111, 76, 77, 79, 80, 81, 82, 83, 92, 102, 112, 77, 80, 82, 83, 93, 103, 113, 74, 84, 85, 86, 87, 94, 104, 114, 124, 134, 75, 84, 85, 86, 87, 88, 89, 90, 95, 105, 115, 125, 135, 76, 84, 85, 86, 87, 89, 91, 92, 96, 106, 116, 126, 136, 77, 84, 85, 86, 87, 90, 92, 93, 97, 107, 117, 127, 137, 78, 85, 88, 89, 90, 98, 108, 118, 128, 138, 79, 85, 86, 88, 89, 90, 91, 92, 99, 109, 119, 129, 139, 80, 85, 87, 88, 89, 90, 92, 93, 100, 110, 120, 130, 140, 81, 86, 89, 91, 92, 101, 111, 121, 131, 141, 82, 86, 87, 89, 90, 91, 92, 93, 102, 112, 122, 132, 142, 83, 87, 90, 92, 93, 103, 113, 123, 133, 143, 74, 84, 94, 95, 96, 97, 104, 124, 144, 154, 75, 85, 94, 95, 96, 97, 98, 99, 100, 105, 125, 145, 155, 76, 86, 94, 95, 96, 97, 99, 101, 102, 106, 126, 146, 156, 77, 87, 94, 95, 96, 97, 100, 102, 103, 107, 127, 147, 157, 78, 88, 95, 98, 99, 100, 108, 128, 148, 158, 79, 89, 95, 96, 98, 99, 100, 101, 102, 109, 129, 149, 159, 80, 90, 95, 97, 98, 99, 100, 102, 103, 110, 130, 150, 160, 81, 91, 96, 99, 101, 102, 111, 131, 151, 161, 82, 92, 96, 97, 99, 100, 101, 102, 103, 112, 132, 152, 162, 83, 93, 97, 100, 102, 103, 113, 133, 153, 163, 74, 84, 94, 104, 105, 106, 107, 134, 154, 164, 75, 85, 95, 104, 105, 106, 107, 108, 109, 110, 135, 155, 165, 76, 86, 96, 104, 105, 106, 107, 109, 111, 112, 136, 156, 166, 77, 87, 97, 104, 105, 106, 107, 110, 112, 113, 137, 157, 167, 78, 88, 98, 105, 108, 109, 110, 138, 158, 168, 79, 89, 99, 105, 106, 108, 109, 110, 111, 112, 139, 159, 169, 80, 90, 100, 105, 107, 108, 109, 110, 112, 113, 140, 160, 170, 81, 91, 101, 106, 109, 111, 112, 141, 161, 171, 82, 92, 102, 106, 107, 109, 110, 111, 112, 113, 142, 162, 172, 83, 93, 103, 107, 110, 112, 113, 143, 163, 173, 84, 114, 115, 116, 117, 124, 134, 85, 114, 115, 116, 117, 118, 119, 120, 125, 135, 86, 114, 115, 116, 117, 119, 121, 122, 126, 136, 87, 114, 115, 116, 117, 120, 122, 123, 127, 137, 88, 115, 118, 119, 120, 128, 138, 89, 115, 116, 118, 119, 120, 121, 122, 129, 139, 90, 115, 117, 118, 119, 120, 122, 123, 130, 140, 91, 116, 119, 121, 122, 131, 141, 92, 116, 117, 119, 120, 121, 122, 123, 132, 142, 93, 117, 120, 122, 123, 133, 143, 84, 94, 114, 124, 125, 126, 127, 134, 144, 154, 85, 95, 115, 124, 125, 126, 127, 128, 129, 130, 135, 145, 155, 86, 96, 116, 124, 125, 126, 127, 129, 131, 132, 136, 146, 156, 87, 97, 117, 124, 125, 126, 127, 130, 132, 133, 137, 147, 157, 88, 98, 118, 125, 128, 129, 130, 138, 148, 158, 89, 99, 119, 125, 126, 128, 129, 130, 131, 132, 139, 149, 159, 90, 100, 120, 125, 127, 128, 129, 130, 132, 133, 140, 150, 160, 91, 101, 121, 126, 129, 131, 132, 141, 151, 161, 92, 102, 122, 126, 127, 129, 130, 131, 132, 133, 142, 152, 162, 93, 103, 123, 127, 130, 132, 133, 143, 153, 163, 84, 104, 114, 124, 134, 135, 136, 137, 154, 164, 85, 105, 115, 125, 134, 135, 136, 137, 138, 139, 140, 155, 165, 86, 106, 116, 126, 134, 135, 136, 137, 139, 141, 142, 156, 166, 87, 107, 117, 127, 134, 135, 136, 137, 140, 142, 143, 157, 167, 88, 108, 118, 128, 135, 138, 139, 140, 158, 168, 89, 109, 119, 129, 135, 136, 138, 139, 140, 141, 142, 159, 169, 90, 110, 120, 130, 135, 137, 138, 139, 140, 142, 143, 160, 170, 91, 111, 121, 131, 136, 139, 141, 142, 161, 171, 92, 112, 122, 132, 136, 137, 139, 140, 141, 142, 143, 162, 172, 93, 113, 123, 133, 137, 140, 142, 143, 163, 173, 94, 124, 144, 145, 146, 147, 154, 95, 125, 144, 145, 146, 147, 148, 149, 150, 155, 96, 126, 144, 145, 146, 147, 149, 151, 152, 156, 97, 127, 144, 145, 146, 147, 150, 152, 153, 157, 98, 128, 145, 148, 149, 150, 158, 99, 129, 145, 146, 148, 149, 150, 151, 152, 159, 100, 130, 145, 147, 148, 149, 150, 152, 153, 160, 101, 131, 146, 149, 151, 152, 161, 102, 132, 146, 147, 149, 150, 151, 152, 153, 162, 103, 133, 147, 150, 152, 153, 163, 94, 104, 124, 134, 144, 154, 155, 156, 157, 164, 95, 105, 125, 135, 145, 154, 155, 156, 157, 158, 159, 160, 165, 96, 106, 126, 136, 146, 154, 155, 156, 157, 159, 161, 162, 166, 97, 107, 127, 137, 147, 154, 155, 156, 157, 160, 162, 163, 167, 98, 108, 128, 138, 148, 155, 158, 159, 160, 168, 99, 109, 129, 139, 149, 155, 156, 158, 159, 160, 161, 162, 169, 100, 110, 130, 140, 150, 155, 157, 158, 159, 160, 162, 163, 170, 101, 111, 131, 141, 151, 156, 159, 161, 162, 171, 102, 112, 132, 142, 152, 156, 157, 159, 160, 161, 162, 163, 172, 103, 113, 133, 143, 153, 157, 160, 162, 163, 173, 104, 134, 154, 164, 165, 166, 167, 105, 135, 155, 164, 165, 166, 167, 168, 169, 170, 106, 136, 156, 164, 165, 166, 167, 169, 171, 172, 107, 137, 157, 164, 165, 166, 167, 170, 172, 173, 108, 138, 158, 165, 168, 169, 170, 109, 139, 159, 165, 166, 168, 169, 170, 171, 172, 110, 140, 160, 165, 167, 168, 169, 170, 172, 173, 111, 141, 161, 166, 169, 171, 172, 112, 142, 162, 166, 167, 169, 170, 171, 172, 173, 113, 143, 163, 167, 170, 172, 173, 174, 175, 176, 177, 174, 175, 176, 177, 178, 179, 180, 174, 175, 176, 177, 179, 181, 182, 174, 175, 176, 177, 180, 182, 183, 175, 178, 179, 180, 175, 176, 178, 179, 180, 181, 182, 175, 177, 178, 179, 180, 182, 183, 176, 179, 181, 182, 176, 177, 179, 180, 181, 182, 183, 177, 180, 182, 183, 184, 185, 186, 187, 184, 185, 186, 187, 188, 189, 190, 184, 185, 186, 187, 189, 191, 192, 184, 185, 186, 187, 190, 192, 193, 185, 188, 189, 190, 185, 186, 188, 189, 190, 191, 192, 185, 187, 188, 189, 190, 192, 193, 186, 189, 191, 192, 186, 187, 189, 190, 191, 192, 193, 187, 190, 192, 193 ]
    data = [ -2*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, (m21 + m31 + m41)*1./2, -m21*1./2, -m31*1./2, -m41*1./2, -m21*1./2, m21*1./2, -m31*1./2, m31*1./2, -m41*1./2, m41*1./2, m12, -m12 - m21 - m31 - m32 - m41 - m42, m32, m42, m21, m31, m41, m12*1./4, -m12*1./4, -m12*1./4, (m12 + m32 + m42)*1./4, -m32*1./4, -m42*1./4, -m32*1./4, m32*1./4, -m42*1./4, m42*1./4, (m21 + m31 + m41)*1./4, -m21*1./4, -m31*1./4, -m41*1./4, -m21*1./4, m21*1./4, -m31*1./4, m31*1./4, -m41*1./4, m41*1./4, m13, m23, -m13 - m21 - m23 - m31 - m41 - m43, m43, m21, m31, m41, m13*1./4, -m13*1./4, m23*1./4, -m23*1./4, -m13*1./4, -m23*1./4, (m13 + m23 + m43)*1./4, -m43*1./4, -m43*1./4, m43*1./4, (m21 + m31 + m41)*1./4, -m21*1./4, -m31*1./4, -m41*1./4, -m21*1./4, m21*1./4, -m31*1./4, m31*1./4, -m41*1./4, m41*1./4, m14, m24, m34, -m14 - m21 - m24 - m31 - m34 - m41, m21, m31, m41, m14*1./4, -m14*1./4, m24*1./4, -m24*1./4, m34*1./4, -m34*1./4, -m14*1./4, -m24*1./4, -m34*1./4, (m14 + m24 + m34)*1./4, (m21 + m31 + m41)*1./4, -m21*1./4, -m31*1./4, -m41*1./4, -m21*1./4, m21*1./4, -m31*1./4, m31*1./4, -m41*1./4, m41*1./4, 2*m12, -2*(m12 + m32 + m42), 2*m32, 2*m42, m12*1./2, -m12*1./2, -m12*1./2, (m12 + m32 + m42)*1./2, -m32*1./2, -m42*1./2, -m32*1./2, m32*1./2, -m42*1./2, m42*1./2, m13, m12, m23, -m12 - m13 - m23 - m32 - m42 - m43, m43, m32, m42, m13*1./4, -m13*1./4, m23*1./4, -m23*1./4, -m13*1./4, -m23*1./4, (m13 + m23 + m43)*1./4, -m43*1./4, -m43*1./4, m43*1./4, m12*1./4, -m12*1./4, -m12*1./4, (m12 + m32 + m42)*1./4, -m32*1./4, -m42*1./4, -m32*1./4, m32*1./4, -m42*1./4, m42*1./4, m14, m12, m24, m34, -m12 - m14 - m24 - m32 - m34 - m42, m32, m42, m14*1./4, -m14*1./4, m24*1./4, -m24*1./4, m34*1./4, -m34*1./4, -m14*1./4, -m24*1./4, -m34*1./4, (m14 + m24 + m34)*1./4, m12*1./4, -m12*1./4, -m12*1./4, (m12 + m32 + m42)*1./4, -m32*1./4, -m42*1./4, -m32*1./4, m32*1./4, -m42*1./4, m42*1./4, 2*m13, 2*m23, -2*(m13 + m23 + m43), 2*m43, m13*1./2, -m13*1./2, m23*1./2, -m23*1./2, -m13*1./2, -m23*1./2, (m13 + m23 + m43)*1./2, -m43*1./2, -m43*1./2, m43*1./2, m14, m13, m24, m23, m34, -m13 - m14 - m23 - m24 - m34 - m43, m43, m14*1./4, -m14*1./4, m24*1./4, -m24*1./4, m34*1./4, -m34*1./4, -m14*1./4, -m24*1./4, -m34*1./4, (m14 + m24 + m34)*1./4, m13*1./4, -m13*1./4, m23*1./4, -m23*1./4, -m13*1./4, -m23*1./4, (m13 + m23 + m43)*1./4, -m43*1./4, -m43*1./4, m43*1./4, 2*m14, 2*m24, 2*m34, -2*(m14 + m24 + m34), m14*1./2, -m14*1./2, m24*1./2, -m24*1./2, m34*1./2, -m34*1./2, -m14*1./2, -m24*1./2, -m34*1./2, (m14 + m24 + m34)*1./2, -3*(m21 + m31 + m41), m21, m31, m41, m21, m31, m41, m21, m31, m41, 4*m21 + 4*m31 + 4*m41, -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m12, -m12 - 2*m21 - 2*m31 - m32 - 2*m41 - m42, m32, m42, m21, m31, m41, m21, m31, m41, 2*(2*m21 + 2*m31 + 2*m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m13, m23, -m13 - 2*m21 - m23 - 2*m31 - 2*m41 - m43, m43, m21, m31, m41, m21, m31, m41, 2*(2*m21 + 2*m31 + 2*m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m14, m24, m34, -m14 - 2*m21 - m24 - 2*m31 - m34 - 2*m41, m21, m31, m41, m21, m31, m41, 2*(2*m21 + 2*m31 + 2*m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m12, -m12 - 2*m21 - 2*m31 - m32 - 2*m41 - m42, m21, m31, m41, m32, m42, m21, m31, m41, 2*(2*m21 + 2*m31 + 2*m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m12, m12, -2*m12 - m21 - m31 - 2*m32 - m41 - 2*m42, m32, m42, m32, m42, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32 - m41 - m42 - m43, m43, m32, m42, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m12, m14, m24, m34, -m12 - m14 - m21 - m24 - m31 - m32 - m34 - m41 - m42, m32, m42, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m13, m23, -m13 - 2*m21 - m23 - 2*m31 - 2*m41 - m43, m21, m31, m41, m43, m21, m31, m41, 2*(2*m21 + 2*m31 + 2*m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32 - m41 - m42 - m43, m32, m42, m43, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31 - m41 - 2*m43, m43, m43, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m13, m23, m14, m24, m34, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m43, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m14, m24, m34, -m14 - 2*m21 - m24 - 2*m31 - m34 - 2*m41, m21, m31, m41, m21, m31, m41, 2*(2*m21 + 2*m31 + 2*m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m14, m24, m34, m12, -m12 - m14 - m21 - m24 - m31 - m32 - m34 - m41 - m42, m32, m42, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m14, m24, m34, m13, m23, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m43, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m14, m24, m34, m14, m24, m34, -2*m14 - m21 - 2*m24 - m31 - 2*m34 - m41, m21, m31, m41, 4*(m21 + m31 + m41), -4*m21, -4*m31, -4*m41, -4*m21, 4*m21, -4*m31, 4*m31, -4*m41, 4*m41, m12, -m12 - 2*m21 - 2*m31 - m32 - 2*m41 - m42, m21, m31, m41, m21, m31, m41, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m12, -2*m12 - m21 - m31 - 2*m32 - m41 - 2*m42, m32, m42, m21, m31, m41, m32, m42, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32 + 2*m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32 - m41 - m42 - m43, m43, m21, m31, m41, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m14, m24, m34, -m12 - m14 - m21 - m24 - m31 - m32 - m34 - m41 - m42, m21, m31, m41, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m12, -2*m12 - m21 - m31 - 2*m32 - m41 - 2*m42, m21, m31, m41, m32, m42, m32, m42, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32 + 2*m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m12, m12, -3*(m12 + m32 + m42), m32, m42, m32, m42, m32, m42, 4*m12, -4*m12, -4*m12, 4*m12 + 4*m32 + 4*m42, -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m12, m13, m23, -2*m12 - m13 - m23 - 2*m32 - 2*m42 - m43, m43, m32, m42, m32, m42, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32 + 2*m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m12, m14, m24, m34, -2*m12 - m14 - m24 - 2*m32 - m34 - 2*m42, m32, m42, m32, m42, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32 + 2*m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m13, m23, -m12 - m13 - m21 - m23 - m31 - m32 - m41 - m42 - m43, m21, m31, m41, m43, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m13, m23, m12, -2*m12 - m13 - m23 - 2*m32 - 2*m42 - m43, m32, m42, m43, m32, m42, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32 + 2*m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m13, m23, m13, m23, -m12 - 2*m13 - 2*m23 - m32 - m42 - 2*m43, m43, m43, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m13, m23, m14, m24, m34, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m43, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m14, m24, m34, -m12 - m14 - m21 - m24 - m31 - m32 - m34 - m41 - m42, m21, m31, m41, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m14, m24, m34, m12, -2*m12 - m14 - m24 - 2*m32 - m34 - 2*m42, m32, m42, m32, m42, 4*m12, -4*m12, -4*m12, 2*(2*m12 + 2*m32 + 2*m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m14, m24, m34, m13, m23, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m43, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m12, m14, m24, m34, m14, m24, m34, -m12 - 2*m14 - 2*m24 - m32 - 2*m34 - m42, m32, m42, 4*m12, -4*m12, -4*m12, 4*(m12 + m32 + m42), -4*m32, -4*m42, -4*m32, 4*m32, -4*m42, 4*m42, m13, m23, -m13 - 2*m21 - m23 - 2*m31 - 2*m41 - m43, m21, m31, m41, m21, m31, m41, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32 - m41 - m42 - m43, m32, m42, m21, m31, m41, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31 - m41 - 2*m43, m43, m21, m31, m41, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23 + 2*m43), -4*m43, -4*m43, 4*m43, m13, m23, m14, m24, m34, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m21, m31, m41, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m12, -m12 - m13 - m21 - m23 - m31 - m32 - m41 - m42 - m43, m21, m31, m41, m32, m42, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m12, m12, -2*m12 - m13 - m23 - 2*m32 - 2*m42 - m43, m32, m42, m32, m42, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m12, m13, m23, -m12 - 2*m13 - 2*m23 - m32 - m42 - 2*m43, m43, m32, m42, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23 + 2*m43), -4*m43, -4*m43, 4*m43, m13, m23, m12, m14, m24, m34, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m32, m42, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m13, m23, -2*m13 - m21 - 2*m23 - m31 - m41 - 2*m43, m21, m31, m41, m43, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23 + 2*m43), -4*m43, -4*m43, 4*m43, m13, m23, m13, m23, m12, -m12 - 2*m13 - 2*m23 - m32 - m42 - 2*m43, m32, m42, m43, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23 + 2*m43), -4*m43, -4*m43, 4*m43, m13, m23, m13, m23, m13, m23, -3*(m13 + m23 + m43), m43, m43, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*m13 + 4*m23 + 4*m43, -4*m43, -4*m43, 4*m43, m13, m23, m13, m23, m14, m24, m34, -2*m13 - m14 - 2*m23 - m24 - m34 - 2*m43, m43, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23 + 2*m43), -4*m43, -4*m43, 4*m43, m13, m23, m14, m24, m34, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m21, m31, m41, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m14, m24, m34, m12, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m32, m42, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m13, m23, m14, m24, m34, m13, m23, -2*m13 - m14 - 2*m23 - m24 - m34 - 2*m43, m43, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 2*(2*m13 + 2*m23 + 2*m43), -4*m43, -4*m43, 4*m43, m13, m23, m14, m24, m34, m14, m24, m34, -m13 - 2*m14 - m23 - 2*m24 - 2*m34 - m43, m43, 4*m13, -4*m13, 4*m23, -4*m23, -4*m13, -4*m23, 4*(m13 + m23 + m43), -4*m43, -4*m43, 4*m43, m14, m24, m34, -m14 - 2*m21 - m24 - 2*m31 - m34 - 2*m41, m21, m31, m41, m21, m31, m41, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m12, -m12 - m14 - m21 - m24 - m31 - m32 - m34 - m41 - m42, m32, m42, m21, m31, m41, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m13, m23, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m43, m21, m31, m41, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m14, m24, m34, -2*m14 - m21 - 2*m24 - m31 - 2*m34 - m41, m21, m31, m41, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 2*(2*m14 + 2*m24 + 2*m34), m14, m24, m34, m12, -m12 - m14 - m21 - m24 - m31 - m32 - m34 - m41 - m42, m21, m31, m41, m32, m42, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m12, m12, -2*m12 - m14 - m24 - 2*m32 - m34 - 2*m42, m32, m42, m32, m42, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m12, m13, m23, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m43, m32, m42, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m12, m14, m24, m34, -m12 - 2*m14 - 2*m24 - m32 - 2*m34 - m42, m32, m42, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 2*(2*m14 + 2*m24 + 2*m34), m14, m24, m34, m13, m23, -m13 - m14 - m21 - m23 - m24 - m31 - m34 - m41 - m43, m21, m31, m41, m43, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m13, m23, m12, -m12 - m13 - m14 - m23 - m24 - m32 - m34 - m42 - m43, m32, m42, m43, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m13, m23, m13, m23, -2*m13 - m14 - 2*m23 - m24 - m34 - 2*m43, m43, m43, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*(m14 + m24 + m34), m14, m24, m34, m13, m23, m14, m24, m34, -m13 - 2*m14 - m23 - 2*m24 - 2*m34 - m43, m43, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 2*(2*m14 + 2*m24 + 2*m34), m14, m24, m34, m14, m24, m34, -2*m14 - m21 - 2*m24 - m31 - 2*m34 - m41, m21, m31, m41, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 2*(2*m14 + 2*m24 + 2*m34), m14, m24, m34, m14, m24, m34, m12, -m12 - 2*m14 - 2*m24 - m32 - 2*m34 - m42, m32, m42, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 2*(2*m14 + 2*m24 + 2*m34), m14, m24, m34, m14, m24, m34, m13, m23, -m13 - 2*m14 - m23 - 2*m24 - 2*m34 - m43, m43, 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 2*(2*m14 + 2*m24 + 2*m34), m14, m24, m34, m14, m24, m34, m14, m24, m34, -3*(m14 + m24 + m34), 4*m14, -4*m14, 4*m24, -4*m24, 4*m34, -4*m34, -4*m14, -4*m24, -4*m34, 4*m14 + 4*m24 + 4*m34, -4*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, 2*m21, 2*m31, 2*m41, m12, -m12 - 3*m21 - 3*m31 - m32 - 3*m41 - m42, m32, m42, m21, m31, m41, 2*m21, 2*m31, 2*m41, m13, m23, -m13 - 3*m21 - m23 - 3*m31 - 3*m41 - m43, m43, m21, m31, m41, 2*m21, 2*m31, 2*m41, m14, m24, m34, -m14 - 3*m21 - m24 - 3*m31 - m34 - 3*m41, m21, m31, m41, 2*m21, 2*m31, 2*m41, 2*m12, -2*(m12 + m21 + m31 + m32 + m41 + m42), 2*m32, 2*m42, 2*m21, 2*m31, 2*m41, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, m43, m32, m42, 2*m21, 2*m31, 2*m41, m14, m12, m24, m34, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 - m42, m32, m42, 2*m21, 2*m31, 2*m41, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31 + m41 + m43), 2*m43, 2*m21, 2*m31, 2*m41, m14, m13, m24, m23, m34, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 - 2*m41 - m43, m43, 2*m21, 2*m31, 2*m41, 2*m14, 2*m24, 2*m34, -2*(m14 + m21 + m24 + m31 + m34 + m41), 2*m21, 2*m31, 2*m41, m12, -m12 - 3*m21 - 3*m31 - m32 - 3*m41 - m42, 2*m21, 2*m31, 2*m41, m32, m42, m21, m31, m41, m12, m12, -2*(m12 + m21 + m31 + m32 + m41 + m42), m32, m42, m21, m31, m41, m32, m42, m21, m31, m41, m12, m13, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, m43, m21, m31, m41, m32, m42, m21, m31, m41, m12, m14, m24, m34, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 - m42, m21, m31, m41, m32, m42, m21, m31, m41, m12, 2*m12, -3*m12 - m21 - m31 - 3*m32 - m41 - 3*m42, 2*m32, 2*m42, m32, m42, m21, m31, m41, m12, m13, m12, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 - m43, m43, m32, m42, m32, m42, m21, m31, m41, m12, m14, m12, m24, m34, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 - m41 - 2*m42, m32, m42, m32, m42, m21, m31, m41, m12, 2*m13, 2*m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 - m42 - 2*m43, 2*m43, m32, m42, m21, m31, m41, m12, m14, m13, m24, m23, m34, -m12 - m13 - m14 - m21 - m23 - m24 - m31 - m32 - m34 - m41 - m42 - m43, m43, m32, m42, m21, m31, m41, m12, 2*m14, 2*m24, 2*m34, -m12 - 2*m14 - m21 - 2*m24 - m31 - m32 - 2*m34 - m41 - m42, m32, m42, m21, m31, m41, m13, m23, -m13 - 3*m21 - m23 - 3*m31 - 3*m41 - m43, 2*m21, 2*m31, 2*m41, m43, m21, m31, m41, m13, m23, m12, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, m32, m42, m21, m31, m41, m43, m21, m31, m41, m13, m23, m13, m23, -2*(m13 + m21 + m23 + m31 + m41 + m43), m43, m21, m31, m41, m43, m21, m31, m41, m13, m23, m14, m24, m34, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 - 2*m41 - m43, m21, m31, m41, m43, m21, m31, m41, m13, m23, 2*m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 - m43, 2*m32, 2*m42, m43, m21, m31, m41, m13, m23, m13, m12, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 - m42 - 2*m43, m43, m32, m42, m43, m21, m31, m41, m13, m23, m14, m12, m24, m34, -m12 - m13 - m14 - m21 - m23 - m24 - m31 - m32 - m34 - m41 - m42 - m43, m32, m42, m43, m21, m31, m41, m13, m23, 2*m13, 2*m23, -3*m13 - m21 - 3*m23 - m31 - m41 - 3*m43, 2*m43, m43, m21, m31, m41, m13, m23, m14, m13, m24, m23, m34, -2*m13 - m14 - m21 - 2*m23 - m24 - m31 - m34 - m41 - 2*m43, m43, m43, m21, m31, m41, m13, m23, 2*m14, 2*m24, 2*m34, -m13 - 2*m14 - m21 - m23 - 2*m24 - m31 - 2*m34 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, -m14 - 3*m21 - m24 - 3*m31 - m34 - 3*m41, 2*m21, 2*m31, 2*m41, m21, m31, m41, m14, m24, m34, m12, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 - m42, m32, m42, m21, m31, m41, m21, m31, m41, m14, m24, m34, m13, m23, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 - 2*m41 - m43, m43, m21, m31, m41, m21, m31, m41, m14, m24, m34, m14, m24, m34, -2*(m14 + m21 + m24 + m31 + m34 + m41), m21, m31, m41, m21, m31, m41, m14, m24, m34, 2*m12, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 - m41 - 2*m42, 2*m32, 2*m42, m21, m31, m41, m14, m24, m34, m13, m12, m23, -m12 - m13 - m14 - m21 - m23 - m24 - m31 - m32 - m34 - m41 - m42 - m43, m43, m32, m42, m21, m31, m41, m14, m24, m34, m14, m12, m24, m34, -m12 - 2*m14 - m21 - 2*m24 - m31 - m32 - 2*m34 - m41 - m42, m32, m42, m21, m31, m41, m14, m24, m34, 2*m13, 2*m23, -2*m13 - m14 - m21 - 2*m23 - m24 - m31 - m34 - m41 - 2*m43, 2*m43, m21, m31, m41, m14, m24, m34, m14, m13, m24, m23, m34, -m13 - 2*m14 - m21 - m23 - 2*m24 - m31 - 2*m34 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, 2*m14, 2*m24, 2*m34, -3*m14 - m21 - 3*m24 - m31 - 3*m34 - m41, m21, m31, m41, 2*m12, -2*(m12 + m21 + m31 + m32 + m41 + m42), 2*m21, 2*m31, 2*m41, 2*m32, 2*m42, 2*m12, m12, -3*m12 - m21 - m31 - 3*m32 - m41 - 3*m42, m32, m42, m21, m31, m41, 2*m32, 2*m42, 2*m12, m13, m23, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 - m43, m43, m21, m31, m41, 2*m32, 2*m42, 2*m12, m14, m24, m34, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 - m41 - 2*m42, m21, m31, m41, 2*m32, 2*m42, 2*m12, 2*m12, -4*(m12 + m32 + m42), 2*m32, 2*m42, 2*m32, 2*m42, 2*m12, m13, m12, m23, -3*m12 - m13 - m23 - 3*m32 - 3*m42 - m43, m43, m32, m42, 2*m32, 2*m42, 2*m12, m14, m12, m24, m34, -3*m12 - m14 - m24 - 3*m32 - m34 - 3*m42, m32, m42, 2*m32, 2*m42, 2*m12, 2*m13, 2*m23, -2*(m12 + m13 + m23 + m32 + m42 + m43), 2*m43, 2*m32, 2*m42, 2*m12, m14, m13, m24, m23, m34, -2*m12 - m13 - m14 - m23 - m24 - 2*m32 - m34 - 2*m42 - m43, m43, 2*m32, 2*m42, 2*m12, 2*m14, 2*m24, 2*m34, -2*(m12 + m14 + m24 + m32 + m34 + m42), 2*m32, 2*m42, m13, m12, m23, -m12 - m13 - 2*m21 - m23 - 2*m31 - m32 - 2*m41 - m42 - m43, 2*m21, 2*m31, 2*m41, m43, m32, m42, m13, m12, m23, m12, -2*m12 - m13 - m21 - m23 - m31 - 2*m32 - m41 - 2*m42 - m43, m32, m42, m21, m31, m41, m43, m32, m42, m13, m12, m23, m13, m23, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 - m42 - 2*m43, m43, m21, m31, m41, m43, m32, m42, m13, m12, m23, m14, m24, m34, -m12 - m13 - m14 - m21 - m23 - m24 - m31 - m32 - m34 - m41 - m42 - m43, m21, m31, m41, m43, m32, m42, m13, m12, m23, 2*m12, -3*m12 - m13 - m23 - 3*m32 - 3*m42 - m43, 2*m32, 2*m42, m43, m32, m42, m13, m12, m23, m13, m12, m23, -2*(m12 + m13 + m23 + m32 + m42 + m43), m43, m32, m42, m43, m32, m42, m13, m12, m23, m14, m12, m24, m34, -2*m12 - m13 - m14 - m23 - m24 - 2*m32 - m34 - 2*m42 - m43, m32, m42, m43, m32, m42, m13, m12, m23, 2*m13, 2*m23, -m12 - 3*m13 - 3*m23 - m32 - m42 - 3*m43, 2*m43, m43, m32, m42, m13, m12, m23, m14, m13, m24, m23, m34, -m12 - 2*m13 - m14 - 2*m23 - m24 - m32 - m34 - m42 - 2*m43, m43, m43, m32, m42, m13, m12, m23, 2*m14, 2*m24, 2*m34, -m12 - m13 - 2*m14 - m23 - 2*m24 - m32 - 2*m34 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, -m12 - m14 - 2*m21 - m24 - 2*m31 - m32 - m34 - 2*m41 - m42, 2*m21, 2*m31, 2*m41, m32, m42, m14, m12, m24, m34, m12, -2*m12 - m14 - m21 - m24 - m31 - 2*m32 - m34 - m41 - 2*m42, m32, m42, m21, m31, m41, m32, m42, m14, m12, m24, m34, m13, m23, -m12 - m13 - m14 - m21 - m23 - m24 - m31 - m32 - m34 - m41 - m42 - m43, m43, m21, m31, m41, m32, m42, m14, m12, m24, m34, m14, m24, m34, -m12 - 2*m14 - m21 - 2*m24 - m31 - m32 - 2*m34 - m41 - m42, m21, m31, m41, m32, m42, m14, m12, m24, m34, 2*m12, -3*m12 - m14 - m24 - 3*m32 - m34 - 3*m42, 2*m32, 2*m42, m32, m42, m14, m12, m24, m34, m13, m12, m23, -2*m12 - m13 - m14 - m23 - m24 - 2*m32 - m34 - 2*m42 - m43, m43, m32, m42, m32, m42, m14, m12, m24, m34, m14, m12, m24, m34, -2*(m12 + m14 + m24 + m32 + m34 + m42), m32, m42, m32, m42, m14, m12, m24, m34, 2*m13, 2*m23, -m12 - 2*m13 - m14 - 2*m23 - m24 - m32 - m34 - m42 - 2*m43, 2*m43, m32, m42, m14, m12, m24, m34, m14, m13, m24, m23, m34, -m12 - m13 - 2*m14 - m23 - 2*m24 - m32 - 2*m34 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, 2*m14, 2*m24, 2*m34, -m12 - 3*m14 - 3*m24 - m32 - 3*m34 - m42, m32, m42, 2*m13, 2*m23, -2*(m13 + m21 + m23 + m31 + m41 + m43), 2*m21, 2*m31, 2*m41, 2*m43, 2*m13, 2*m23, m12, -m12 - 2*m13 - m21 - 2*m23 - m31 - m32 - m41 - m42 - 2*m43, m32, m42, m21, m31, m41, 2*m43, 2*m13, 2*m23, m13, m23, -3*m13 - m21 - 3*m23 - m31 - m41 - 3*m43, m43, m21, m31, m41, 2*m43, 2*m13, 2*m23, m14, m24, m34, -2*m13 - m14 - m21 - 2*m23 - m24 - m31 - m34 - m41 - 2*m43, m21, m31, m41, 2*m43, 2*m13, 2*m23, 2*m12, -2*(m12 + m13 + m23 + m32 + m42 + m43), 2*m32, 2*m42, 2*m43, 2*m13, 2*m23, m13, m12, m23, -m12 - 3*m13 - 3*m23 - m32 - m42 - 3*m43, m43, m32, m42, 2*m43, 2*m13, 2*m23, m14, m12, m24, m34, -m12 - 2*m13 - m14 - 2*m23 - m24 - m32 - m34 - m42 - 2*m43, m32, m42, 2*m43, 2*m13, 2*m23, 2*m13, 2*m23, -4*(m13 + m23 + m43), 2*m43, 2*m43, 2*m13, 2*m23, m14, m13, m24, m23, m34, -3*m13 - m14 - 3*m23 - m24 - m34 - 3*m43, m43, 2*m43, 2*m13, 2*m23, 2*m14, 2*m24, 2*m34, -2*(m13 + m14 + m23 + m24 + m34 + m43), 2*m43, m14, m13, m24, m23, m34, -m13 - m14 - 2*m21 - m23 - m24 - 2*m31 - m34 - 2*m41 - m43, 2*m21, 2*m31, 2*m41, m43, m14, m13, m24, m23, m34, m12, -m12 - m13 - m14 - m21 - m23 - m24 - m31 - m32 - m34 - m41 - m42 - m43, m32, m42, m21, m31, m41, m43, m14, m13, m24, m23, m34, m13, m23, -2*m13 - m14 - m21 - 2*m23 - m24 - m31 - m34 - m41 - 2*m43, m43, m21, m31, m41, m43, m14, m13, m24, m23, m34, m14, m24, m34, -m13 - 2*m14 - m21 - m23 - 2*m24 - m31 - 2*m34 - m41 - m43, m21, m31, m41, m43, m14, m13, m24, m23, m34, 2*m12, -2*m12 - m13 - m14 - m23 - m24 - 2*m32 - m34 - 2*m42 - m43, 2*m32, 2*m42, m43, m14, m13, m24, m23, m34, m13, m12, m23, -m12 - 2*m13 - m14 - 2*m23 - m24 - m32 - m34 - m42 - 2*m43, m43, m32, m42, m43, m14, m13, m24, m23, m34, m14, m12, m24, m34, -m12 - m13 - 2*m14 - m23 - 2*m24 - m32 - 2*m34 - m42 - m43, m32, m42, m43, m14, m13, m24, m23, m34, 2*m13, 2*m23, -3*m13 - m14 - 3*m23 - m24 - m34 - 3*m43, 2*m43, m43, m14, m13, m24, m23, m34, m14, m13, m24, m23, m34, -2*(m13 + m14 + m23 + m24 + m34 + m43), m43, m43, m14, m13, m24, m23, m34, 2*m14, 2*m24, 2*m34, -m13 - 3*m14 - m23 - 3*m24 - 3*m34 - m43, m43, 2*m14, 2*m24, 2*m34, -2*(m14 + m21 + m24 + m31 + m34 + m41), 2*m21, 2*m31, 2*m41, 2*m14, 2*m24, 2*m34, m12, -m12 - 2*m14 - m21 - 2*m24 - m31 - m32 - 2*m34 - m41 - m42, m32, m42, m21, m31, m41, 2*m14, 2*m24, 2*m34, m13, m23, -m13 - 2*m14 - m21 - m23 - 2*m24 - m31 - 2*m34 - m41 - m43, m43, m21, m31, m41, 2*m14, 2*m24, 2*m34, m14, m24, m34, -3*m14 - m21 - 3*m24 - m31 - 3*m34 - m41, m21, m31, m41, 2*m14, 2*m24, 2*m34, 2*m12, -2*(m12 + m14 + m24 + m32 + m34 + m42), 2*m32, 2*m42, 2*m14, 2*m24, 2*m34, m13, m12, m23, -m12 - m13 - 2*m14 - m23 - 2*m24 - m32 - 2*m34 - m42 - m43, m43, m32, m42, 2*m14, 2*m24, 2*m34, m14, m12, m24, m34, -m12 - 3*m14 - 3*m24 - m32 - 3*m34 - m42, m32, m42, 2*m14, 2*m24, 2*m34, 2*m13, 2*m23, -2*(m13 + m14 + m23 + m24 + m34 + m43), 2*m43, 2*m14, 2*m24, 2*m34, m14, m13, m24, m23, m34, -m13 - 3*m14 - m23 - 3*m24 - 3*m34 - m43, m43, 2*m14, 2*m24, 2*m34, 2*m14, 2*m24, 2*m34, -4*(m14 + m24 + m34), -2*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, m12, -m12 - m21 - m31 - m32 - m41 - m42, m32, m42, m21, m31, m41, m13, m23, -m13 - m21 - m23 - m31 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, -m14 - m21 - m24 - m31 - m34 - m41, m21, m31, m41, 2*m12, -2*(m12 + m32 + m42), 2*m32, 2*m42, m13, m12, m23, -m12 - m13 - m23 - m32 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, -m12 - m14 - m24 - m32 - m34 - m42, m32, m42, 2*m13, 2*m23, -2*(m13 + m23 + m43), 2*m43, m14, m13, m24, m23, m34, -m13 - m14 - m23 - m24 - m34 - m43, m43, 2*m14, 2*m24, 2*m34, -2*(m14 + m24 + m34), -2*(m21 + m31 + m41), 2*m21, 2*m31, 2*m41, m12, -m12 - m21 - m31 - m32 - m41 - m42, m32, m42, m21, m31, m41, m13, m23, -m13 - m21 - m23 - m31 - m41 - m43, m43, m21, m31, m41, m14, m24, m34, -m14 - m21 - m24 - m31 - m34 - m41, m21, m31, m41, 2*m12, -2*(m12 + m32 + m42), 2*m32, 2*m42, m13, m12, m23, -m12 - m13 - m23 - m32 - m42 - m43, m43, m32, m42, m14, m12, m24, m34, -m12 - m14 - m24 - m32 - m34 - m42, m32, m42, 2*m13, 2*m23, -2*(m13 + m23 + m43), 2*m43, m14, m13, m24, m23, m34, -m13 - m14 - m23 - m24 - m34 - m43, m43, 2*m14, 2*m24, 2*m34, -2*(m14 + m24 + m34) ]
    return csc_matrix((data,(row,col)),shape=(195,195))
    

### arbitrary number of populations drift terms
def drift_multipop_terms(mom,nus):
    """
    mom: DD_i_j, Dz_i_j_k, zz_i_j_k_l, zp_i_j, zq_i_j, 1
    nus: list of relative size for all populations (i,j,k,l refer to indices in this list (off by one)) 
    return mom2s, vals
    """
    if mom == '1':
        return [],[]
    elif mom.split('_')[0] == 'DD':
        pop1 = int(mom.split('_')[1])
        pop2 = int(mom.split('_')[2])
        if pop1 == pop2: # D_i^2
            nu1 = nus[pop1-1]
            mom2s = ['DD_{0}_{0}'.format(pop1),
                     'Dz_{0}_{0}_{0}'.format(pop1),
                     'zz_{0}_{0}_{0}_{0}'.format(pop1),
                     'zp_{0}_{0}'.format(pop1),
                     'zq_{0}_{0}'.format(pop1),
                     '1']
            vals = [-3./nu1, 1./nu1, 1./(16*nu1), -1./(16*nu1), -1./(16*nu1), 1./(16*nu1)]
            return mom2s, vals
        else: # D_i D_j
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = ['DD_{0}_{1}'.format(pop1,pop2)]
            vals = [-(nu1+nu2)/(nu1*nu2)]
            return mom2s, vals
    elif mom.split('_')[0] == 'Dz':
        pop1 = int(mom.split('_')[1])
        pop2 = int(mom.split('_')[2])
        pop3 = int(mom.split('_')[3])
        if pop1 == pop2 and pop1 == pop3: # D_i(1-2p_i)(1-2q_i)
            nu1 = nus[pop1-1]
            mom2s = ['DD_{0}_{0}'.format(pop1), 'Dz_{0}_{0}_{0}'.format(pop1)]
            vals = [4./nu1, -5./nu1]
            return mom2s, vals
        elif pop2 == pop3: # D_i(1-2p_j)(1-2q_j)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = ['DD_{0}_{1}'.format(sorted([pop1,pop2])[0], sorted([pop1,pop2])[1]), 'Dz_{0}_{1}_{1}'.format(pop1,pop2)]
            vals = [4./nu2, -1./nu1]
            return mom2s, vals
        elif pop1 == pop2: # D_i(1-2p_i)(1-2q_j)
            nu1 = nus[pop1-1]
            nu2 = nus[pop3-1]
            mom2s = ['Dz_{0}_{0}_{1}'.format(pop1,pop3)]
            vals = [-3./nu1]
            return mom2s, vals
        elif pop1 == pop3: # D_i(1-2p_j)(1-2q_i)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = ['Dz_{0}_{1}_{0}'.format(pop1,pop2)]
            vals = [-3./nu1]
            return mom2s, vals
        else: # D_i(1-2p_j)(1-2q_k)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop3-1]
            mom2s = ['Dz_{0}_{1}_{2}'.format(pop1,pop2,pop3)]
            vals = [-1./nu1]
            return mom2s, vals
    elif mom.split('_')[0] == 'zz':
        pop1 = int(mom.split('_')[1])
        pop2 = int(mom.split('_')[2])
        pop3 = int(mom.split('_')[3])
        pop4 = int(mom.split('_')[4])
        if pop1 == pop2 and pop1 == pop3 and pop1 == pop4: # (1-2p_1)(1-2p_1)(1-2q_1)(1-2q_1)
            nu1 = nus[pop1-1]
            mom2s = ['Dz_{0}_{0}_{0}'.format(pop1), 
                     'zz_{0}_{0}_{0}_{0}'.format(pop1), 
                     'zp_{0}_{0}'.format(pop1), 
                     'zq_{0}_{0}'.format(pop1)]
            vals = [16./nu1, -2./nu1, 1./nu1, 1./nu1]
            return mom2s, vals
        elif pop1 == pop2 and pop1 == pop3 and pop1 != pop4: # (1-2p_1)(1-2p_1)(1-2q_1)(1-2q_2)
            nu1 = nus[pop1-1]
            nu2 = nus[pop4-1]
            mom2s = ['Dz_{0}_{0}_{1}'.format(pop1, pop4),
                     'zz_{0}_{0}_{0}_{1}'.format(pop1, pop4),
                     'zq_{0}_{1}'.format(pop1, pop4)]
            vals = [8./nu1, -1./nu1, 1./nu1]
            return mom2s, vals
        elif pop1 == pop2 and pop1 != pop3 and pop1 == pop4: # (1-2p_1)(1-2p_1)(1-2q_2)(1-2q_1)
            nu1 = nus[pop1-1]
            nu2 = nus[pop3-1]
            mom2s = ['Dz_{0}_{0}_{1}'.format(pop1, pop3),
                     'zz_{0}_{0}_{1}_{0}'.format(pop1, pop3),
                     'zq_{1}_{0}'.format(pop1, pop3)]
            vals = [8./nu1, -1./nu1, 1./nu1]
            return mom2s, vals
        elif pop1 == pop2 and pop1 != pop3 and pop3 == pop4: # (1-2p_1)(1-2p_1)(1-2q_2)(1-2q_2)
            nu1 = nus[pop1-1]
            nu2 = nus[pop3-1]
            mom2s = ['zz_{0}_{0}_{1}_{1}'.format(pop1, pop3),
                     'zp_{0}_{0}'.format(pop1),
                     'zq_{0}_{0}'.format(pop3)]
            vals = [-(nu1+nu2)/(nu1*nu2), 1./nu2, 1./nu1]
            return mom2s, vals
        elif pop1 == pop2 and pop1 != pop3 and pop1 != pop4 and pop3 != pop4: # (1-2p_1)(1-2p_1)(1-2q_2)(1-2q_3)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop3-1]
            mom2s = ['zz_{0}_{0}_{1}_{2}'.format(pop1,pop3,pop4), 'zq_{0}_{1}'.format(pop3,pop4)]
            vals = [-1./nu1, 1./nu1]
            return mom2s, vals
        elif pop1 != pop2 and pop1 == pop3 and pop1 == pop4: # (1-2p_1)(1-2p_2)(1-2q_1)(1-2q_1)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = ['Dz_{0}_{1}_{0}'.format(pop1, pop2),
                     'zz_{0}_{1}_{0}_{0}'.format(pop1, pop2),
                     'zp_{0}_{1}'.format(pop1, pop2)]
            vals = [8./nu1, -1./nu1, 1./nu1]
            return mom2s, vals
        elif pop1 != pop2 and pop1 == pop3 and pop2 == pop4: # (1-2p_1)(1-2p_2)(1-2q_1)(1-2q_2)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = ['Dz_{0}_{1}_{1}'.format(pop1, pop2), 'Dz_{0}_{1}_{1}'.format(pop2, pop1)]
            vals = [4./nu1, 4./nu2]
            return mom2s, vals
        elif pop1 != pop2 and pop2 == pop3 and pop2 == pop4: # (1-2p_1)(1-2p_2)(1-2q_2)(1-2q_2)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = ['Dz_{0}_{1}_{0}'.format(pop2, pop1), 
                     'zz_{0}_{1}_{1}_{1}'.format(pop1, pop2), 
                     'zp_{0}_{1}'.format(pop1, pop2)]
            vals = [8./nu2, -1./nu2, 1./nu2]
            return mom2s, vals
        elif pop1 != pop2 and pop2 == pop3 and pop1 != pop4 and pop2 != pop4: # (1-2p_1)(1-2p_2)(1-2q_2)(1-2q_3)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop4-1]
            mom2s = ['Dz_{0}_{1}_{2}'.format(pop2, pop1, pop4)]
            vals = [4./nu2]
            return mom2s, vals
        elif pop1 != pop2 and pop1 == pop3 and pop1 != pop4 and pop2 != pop4: # (1-2p_1)(1-2p_2)(1-2q_1)(1-2q_3)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop4-1]
            mom2s = ['Dz_{0}_{1}_{2}'.format(pop1, pop2, pop4)]
            vals = [4./nu1]
            return mom2s, vals
        elif pop1 != pop2 and pop1 != pop3 and pop2 != pop3 and pop1 == pop4: # (1-2p_1)(1-2p_2)(1-2q_3)(1-2q_1)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop3-1]
            mom2s = ['Dz_{0}_{1}_{2}'.format(pop1, pop2, pop3)]
            vals = [4./nu1]
            return mom2s, vals
        elif pop1 != pop2 and pop1 != pop3 and pop2 != pop3 and pop2 == pop4: # (1-2p_1)(1-2p_2)(1-2q_3)(1-2q_2)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop3-1]
            mom2s = ['Dz_{0}_{1}_{2}'.format(pop2, pop1, pop3)]
            vals = [4./nu2]
            return mom2s, vals
        elif pop1 != pop2 and pop1 != pop3 and pop2 != pop3 and pop3 == pop4: # (1-2p_1)(1-2p_2)(1-2q_3)(1-2q_3)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop3-1]
            mom2s = ['zz_{0}_{1}_{2}_{2}'.format(pop1, pop2, pop3), 'zp_{0}_{1}'.format(pop1, pop2)]
            vals = [-1./nu3, 1./nu3]
            return mom2s, vals
        elif pop1 != pop2 and pop1 != pop3 and pop1 != pop4 and pop2 != pop3 and pop2 != pop4 and pop3 != pop4: # (1-2p_1)(1-2p_2)(1-2q_3)(1-2q_4)
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            nu3 = nus[pop3-1]
            nu4 = nus[pop4-1]
            mom2s = []
            vals = []
            return mom2s, vals

    elif mom.split('_')[0] == 'zp':
        pop1 = int(mom.split('_')[1])
        pop2 = int(mom.split('_')[2])
        if pop1 == pop2:
            nu1 = nus[pop1-1]
            mom2s = ['zp_{0}_{0}'.format(pop1), '1']
            vals = [-1./nu1, 1./nu1]
            return mom2s, vals
        else:
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = []
            vals = []
            return mom2s, vals
    elif mom.split('_')[0] == 'zq':
        pop1 = int(mom.split('_')[1])
        pop2 = int(mom.split('_')[2])
        if pop1 == pop2:
            nu1 = nus[pop1-1]
            mom2s = ['zq_{0}_{0}'.format(pop1), '1']
            vals = [-1./nu1, 1./nu1]
            return mom2s, vals
        else:
            nu1 = nus[pop1-1]
            nu2 = nus[pop2-1]
            mom2s = []
            vals = []
            return mom2s, vals
    else:
        print("oh no: what about this one? {0}".format(mom))

def migration_multipop_terms(mom, ms, npops):
    mdict = {}
    mijs = []
    all_pops = range(1,npops+1)
    
    for pair in itertools.combinations(all_pops, 2):
        mijs.append((pair[0],pair[1]))
        mijs.append((pair[1],pair[0]))
    for ii,m in enumerate(ms):
        mdict[mijs[ii]] = m
    
    for ii in all_pops:
        mdict[(ii,ii)] = 0.0
    
    mom2s, vals = ([], [])
    
    if mom.split('_')[0] == 'DD':
        pops = mom.split('_')[1:]
        pop1 = int(pops[0])
        pop2 = int(pops[1])
        if pop1 == pop2:
            i = pop1
            mom2s.append('DD_{0}_{0}'.format(i))
            vals.append( -2.*np.sum( [mdict[(j,i)] for j in all_pops] ) )
            for j in all_pops:
                if j != i:
                    mom2s.append('DD_{0}_{1}'.format(i, j))
                    vals.append( 2.*mdict[(j,i)])
            mom2s.append('Dz_{0}_{0}_{0}'.format(i))
            vals.append( 1./2 * np.sum( [mdict[(j,i)] for j in all_pops] ) )
            for j in all_pops:
                if j != i:
                    mom2s.append('Dz_{0}_{1}_{1}'.format(i, j))
                    vals.append( 1./2.*mdict[(j,i)])
                    mom2s.append('Dz_{0}_{0}_{1}'.format(i, j))
                    vals.append( -1./2.*mdict[(j,i)])
                    mom2s.append('Dz_{0}_{1}_{0}'.format(i, j))
                    vals.append( -1./2.*mdict[(j,i)])
        else:
            i = pop1
            j = pop2
            mom2s.append('DD_{0}_{1}'.format(i, j))
            vals.append( - np.sum([mdict[(k,i)] for k in all_pops]) - np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != j:
                    mom2s.append('DD_{0}_{1}'.format(i, k))
                    vals.append(mdict[(k,j)])
                if k != i:
                    mom2s.append('DD_{0}_{1}'.format(j, k))
                    vals.append(mdict[(k,i)])
            mom2s.append('Dz_{0}_{1}_{1}'.format(i, j))
            vals.append( 1./4 * np.sum( [mdict[(k,j)] for k in all_pops] ) )
            for k in all_pops:
                if k != j:
                    mom2s.append('Dz_{0}_{1}_{1}'.format(i, k))
                    vals.append( 1./4*mdict[(k,j)] )
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i, j, k))
                    vals.append( -1./4*mdict[(k,j)] )
                    mom2s.append('Dz_{0}_{2}_{1}'.format(i, j, k))
                    vals.append( -1./4*mdict[(k,j)] )
            mom2s.append('Dz_{0}_{1}_{1}'.format(j, i))
            vals.append(1./4 * np.sum( [mdict[(k,i)] for k in all_pops] ) )
            for k in all_pops:
                if k != i:
                    mom2s.append('Dz_{0}_{1}_{1}'.format(j, k))
                    vals.append( 1./4*mdict[(k,i)] )
                    mom2s.append('Dz_{0}_{1}_{2}'.format(j, k, i))
                    vals.append( -1./4*mdict[(k,i)] )
                    mom2s.append('Dz_{0}_{2}_{1}'.format(j, i, k))
                    vals.append( -1./4*mdict[(k,i)] )
            
    elif mom.split('_')[0] == 'Dz':
        pops = mom.split('_')[1:]
        pop1 = int(pops[0])
        pop2 = int(pops[1])
        pop3 = int(pops[2])
        if pop1 == pop2 == pop3:
            i = pop1
            mom2s.append('Dz_{0}_{0}_{0}'.format(i))
            vals.append( -3.*np.sum(mdict[(j,i)] for j in all_pops) )
            for j in all_pops:
                if j != i:
                    mom2s.append('Dz_{0}_{0}_{1}'.format(i,j))
                    vals.append( mdict[(j,i)] )
                    mom2s.append('Dz_{0}_{1}_{0}'.format(i,j))
                    vals.append( mdict[(j,i)] )
                    mom2s.append('Dz_{1}_{0}_{1}'.format(i,j))
                    vals.append( mdict[(j,i)] )
            mom2s.append('zz_{0}_{0}_{0}_{0}'.format(i))
            vals.append( 1./4 * np.sum( [mdict[(j,i)] for j in all_pops] ) )
            for j in all_pops:
                if j != i:
                    mom2s.append('zz_{0}_{1}_{0}_{1}'.format(i,j))
                    vals.append( 1./4 * mdict[(j,i)])
                    mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,j))
                    vals.append( -1./4 * mdict[(j,i)])
                    mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,j))
                    vals.append( -1./4 * mdict[(j,i)])
        elif pop1 == pop2:
            i = pop1
            j = pop3
            mom2s.append('Dz_{0}_{0}_{1}'.format(i,j))
            vals.append( -2.*np.sum([mdict[(k,i)] for k in all_pops]) - np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != j:
                    mom2s.append('Dz_{0}_{0}_{1}'.format(i,k))
                    vals.append( mdict[(k,j)] )
                if k != i:
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i,k,j))
                    vals.append( mdict[(k,i)] )
                    mom2s.append('Dz_{0}_{1}_{2}'.format(k,i,j))
                    vals.append( mdict[(k,i)] )
            mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,j))
            vals.append( 1./4 * np.sum( [mdict[(k,i)] for k in all_pops] ) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zz_{0}_{2}_{1}_{2}'.format(i,j,k))
                    vals.append( 1./4 * mdict[(k,i)] )
                    mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,j,k))
                    vals.append( -1./4 * mdict[(k,i)] )
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,j,k))
                    vals.append( -1./4 * mdict[(k,i)] )
                    
        elif pop1 == pop3:
            i = pop1
            j = pop2
            mom2s.append('Dz_{0}_{1}_{0}'.format(i,j))
            vals.append(-2.*np.sum([mdict[(k,i)] for k in all_pops]) - np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != j:
                    mom2s.append('Dz_{0}_{1}_{0}'.format(i,k))
                    vals.append( mdict[(k,j)] )
                if k != i:
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                    mom2s.append('Dz_{0}_{1}_{2}'.format(k,j,i))
                    vals.append( mdict[(k,i)] )
            mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,j))
            vals.append( 1./4 * np.sum( [mdict[(k,i)] for k in all_pops] ) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zz_{0}_{2}_{1}_{2}'.format(j,i,k))
                    vals.append( 1./4 * mdict[(k,i)] )
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
                    vals.append( -1./4 * mdict[(k,i)] )
                    mom2s.append('zz_{1}_{2}_{0}_{0}'.format(i,j,k))
                    vals.append( -1./4 * mdict[(k,i)] )

        elif pop2 == pop3:
            i = pop1
            j = pop2
            mom2s.append('Dz_{0}_{1}_{1}'.format(i,j))
            vals.append( -np.sum([mdict[(k,i)] for k in all_pops]) -2.*np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != j:
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i,j,k))
                    vals.append( mdict[(k,j)] )
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i,k,j))
                    vals.append( mdict[(k,j)] )
                if k != i:
                    mom2s.append('Dz_{0}_{1}_{1}'.format(k,j))
                    vals.append( mdict[(k,i)] )
            mom2s.append('zz_{0}_{1}_{0}_{1}'.format(i,j))
            vals.append( 1./4 * np.sum( [mdict[(k,i)] for k in all_pops] ) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zz_{0}_{1}_{0}_{1}'.format(j,k))
                    vals.append( 1./4 * mdict[(k,i)] )
                    mom2s.append('zz_{0}_{1}_{1}_{2}'.format(i,j,k))
                    vals.append( -1./4 * mdict[(k,i)] )
                    mom2s.append('zz_{1}_{2}_{0}_{1}'.format(i,j,k))
                    vals.append( -1./4 * mdict[(k,i)] )
        else:
            i = pop1
            j = pop2
            k = pop3
            mom2s.append('Dz_{0}_{1}_{2}'.format(i,j,k))
            vals.append( -np.sum([mdict[(l,i)] for l in all_pops]) - np.sum([mdict[(l,j)] for l in all_pops]) - np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != k:
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i,j,l))
                    vals.append( mdict[(l,k)] )
                if l != j:
                    mom2s.append('Dz_{0}_{1}_{2}'.format(i,l,k))
                    vals.append( mdict[(l,j)] )
                if l != i:
                    mom2s.append('Dz_{0}_{1}_{2}'.format(l,j,k))
                    vals.append( mdict[(l,i)] )
            mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
            vals.append( 1./4 * np.sum( [mdict[(l,i)] for l in all_pops] ) )
            for l in all_pops:
                if l != i:
                    mom2s.append('zz_{0}_{2}_{1}_{2}'.format(j,k,l))
                    vals.append( 1./4 * mdict[(l,i)] )
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
                    vals.append( -1./4 * mdict[(l,i)] )
                    mom2s.append('zz_{1}_{3}_{0}_{2}'.format(i,j,k,l))
                    vals.append( -1./4 * mdict[(l,i)] )
    elif mom.split('_')[0] == 'zz':
        pops = mom.split('_')[1:]
        pop1 = int(pops[0])
        pop2 = int(pops[1])
        pop3 = int(pops[2])
        pop4 = int(pops[3])
        if pop1 == pop2 == pop3 == pop4:
            i = pop1
            mom2s.append('zz_{0}_{0}_{0}_{0}'.format(i))
            vals.append( -4.*np.sum([mdict[(j,i)] for j in all_pops]) )
            for j in all_pops:
                if j != i:
                    mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,j))
                    vals.append( 2.*mdict[(j,i)] )
                    mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,j))
                    vals.append( 2.*mdict[(j,i)] )
        elif pop1 == pop2 == pop3:
            i = pop1
            j = pop4
            mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,j))
            vals.append( -3.*np.sum([mdict[(k,i)] for k in all_pops]) -np.sum([mdict[(k,j)] for k in all_pops]))
            for k in all_pops:
                if k != j:
                    mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,k))
                    vals.append( mdict[(k,j)] )
                if k != i:
                    mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,j,k))
                    vals.append( 2*mdict[(k,i)] )
        elif pop1 == pop2 == pop4:
            i = pop1
            j = pop3
            mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,j))
            vals.append( -3.*np.sum([mdict[(k,i)] for k in all_pops]) -np.sum([mdict[(k,j)] for k in all_pops]))
            for k in all_pops:
                if k != j:
                    mom2s.append('zz_{0}_{0}_{0}_{1}'.format(i,k))
                    vals.append( mdict[(k,j)] )
                if k != i:
                    mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,j,k))
                    vals.append( 2*mdict[(k,i)] )

        elif pop1 == pop2 and pop3 == pop4:
            i = pop1
            j = pop3
            mom2s.append('zz_{0}_{0}_{1}_{1}'.format(i,j))
            vals.append( -2.*np.sum([mdict[(k,i)] for k in all_pops]) -2.*np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != j:
                    mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,j,k))
                    vals.append( 2.*mdict[(k,j)] )
                if k != i:
                    mom2s.append('zz_{0}_{2}_{1}_{1}'.format(i,j,k))
                    vals.append( 2.*mdict[(k,i)] )
        elif pop1 == pop2:
            i = pop1
            j = pop3
            k = pop4
            mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,j,k))
            vals.append( -2.*np.sum([mdict[(l,i)] for l in all_pops]) -np.sum([mdict[(l,j)] for l in all_pops]) -np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != k:
                    mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,j,l))
                    vals.append( mdict[(l,k)] )
                if l != j:
                    mom2s.append('zz_{0}_{0}_{1}_{2}'.format(i,k,l))
                    vals.append( mdict[(l,j)] )
                if l != i:
                    mom2s.append('zz_{0}_{3}_{1}_{2}'.format(i,j,k,l))
                    vals.append( 2.*mdict[(l,i)] )
        elif pop1 == pop3 == pop4:
            i = pop1
            j = pop2
            mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,j))
            vals.append( -3.*np.sum([mdict[(k,i)] for k in all_pops]) -np.sum(mdict[(k,j)] for k in all_pops) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
                    vals.append( 2.*mdict[(k,i)] )
                    mom2s.append('zz_{1}_{2}_{0}_{0}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                if k != j:
                    mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,k))
                    vals.append( mdict[(k,j)] )
        elif pop2 == pop3 == pop4:
            i = pop2
            j = pop1
            mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,j))
            vals.append( -3.*np.sum([mdict[(k,i)] for k in all_pops]) -np.sum(mdict[(k,j)] for k in all_pops) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
                    vals.append( 2.*mdict[(k,i)] )
                    mom2s.append('zz_{1}_{2}_{0}_{0}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                if k != j:
                    mom2s.append('zz_{0}_{1}_{0}_{0}'.format(i,k))
                    vals.append( mdict[(k,j)] )
        elif pop1 == pop3 and pop2 == pop4:
            i = pop1
            j = pop2
            mom2s.append('zz_{0}_{1}_{0}_{1}'.format(i,j))
            vals.append( -2.*np.sum([mdict[(k,i)] for k in all_pops]) -2.*np.sum(mdict[(k,j)] for k in all_pops) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zz_{0}_{1}_{1}_{2}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                    mom2s.append('zz_{1}_{2}_{0}_{1}'.format(i,j,k))
                    vals.append( mdict[(k,i)] )
                if k != j:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
                    vals.append( mdict[(k,j)] )
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,j,k))
                    vals.append( mdict[(k,j)] )
        elif pop1 == pop3:
            i = pop1
            j = pop2
            k = pop4
            mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
            vals.append( -2.*np.sum([mdict[(l,i)] for l in all_pops]) -np.sum([mdict[(l,j)] for l in all_pops]) -np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != i:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                    mom2s.append('zz_{1}_{3}_{0}_{2}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                if l != j:
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,k,l))
                    vals.append( mdict[(l,j)] )
                if l != k:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,l))
                    vals.append( mdict[(l,k)] )
        elif pop1 == pop4:
            i = pop1
            j = pop2
            k = pop3
            mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
            vals.append( -2.*np.sum([mdict[(l,i)] for l in all_pops]) -np.sum([mdict[(l,j)] for l in all_pops]) -np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != i:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                    mom2s.append('zz_{1}_{3}_{0}_{2}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                if l != j:
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,k,l))
                    vals.append( mdict[(l,j)] )
                if l != k:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,l))
                    vals.append( mdict[(l,k)] )
        elif pop2 == pop3:
            i = pop2
            j = pop1
            k = pop4
            mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
            vals.append( -2.*np.sum([mdict[(l,i)] for l in all_pops]) -np.sum([mdict[(l,j)] for l in all_pops]) -np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != i:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                    mom2s.append('zz_{1}_{3}_{0}_{2}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                if l != j:
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,k,l))
                    vals.append( mdict[(l,j)] )
                if l != k:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,l))
                    vals.append( mdict[(l,k)] )
        elif pop2 == pop4:
            i = pop2
            j = pop1
            k = pop3
            mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,k))
            vals.append( -2.*np.sum([mdict[(l,i)] for l in all_pops]) -np.sum([mdict[(l,j)] for l in all_pops]) -np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != i:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                    mom2s.append('zz_{1}_{3}_{0}_{2}'.format(i,j,k,l))
                    vals.append( mdict[(l,i)] )
                if l != j:
                    mom2s.append('zz_{0}_{2}_{0}_{1}'.format(i,k,l))
                    vals.append( mdict[(l,j)] )
                if l != k:
                    mom2s.append('zz_{0}_{1}_{0}_{2}'.format(i,j,l))
                    vals.append( mdict[(l,k)] )
        elif pop3 == pop4:
            i = pop1
            j = pop2
            k = pop3
            mom2s.append('zz_{0}_{1}_{2}_{2}'.format(i,j,k))
            vals.append( -np.sum([mdict[(l,i)] for l in all_pops]) -np.sum([mdict[(l,j)] for l in all_pops]) -2.*np.sum([mdict[(l,k)] for l in all_pops]) )
            for l in all_pops:
                if l != k:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
                    vals.append( 2*mdict[(l,k)] )
                if l != j:
                    mom2s.append('zz_{0}_{2}_{1}_{1}'.format(i,k,l))
                    vals.append( mdict[(l,j)] )
                if l != i:
                    mom2s.append('zz_{0}_{2}_{1}_{1}'.format(j,k,l))
                    vals.append( mdict[(l,i)] )
        else:
            if len(set([pop1,pop2,pop3,pop4])) != 4:
                print mom
            i = pop1
            j = pop2
            k = pop3
            l = pop4
            mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,l))
            vals.append( - np.sum([mdict[(r,i)] for r in all_pops])
                         - np.sum([mdict[(r,j)] for r in all_pops])
                         - np.sum([mdict[(r,k)] for r in all_pops])
                         - np.sum([mdict[(r,l)] for r in all_pops]) )
            for r in all_pops:
                if r != i:
                    mom2s.append('zz_{0}_{3}_{1}_{2}'.format(j,k,l,r))
                    vals.append(mdict[(r,i)])
                if r != j:
                    mom2s.append('zz_{0}_{3}_{1}_{2}'.format(i,k,l,r))
                    vals.append(mdict[(r,j)])
                if r != k:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,l,r))
                    vals.append(mdict[(r,k)])
                if r != l:
                    mom2s.append('zz_{0}_{1}_{2}_{3}'.format(i,j,k,r))
                    vals.append(mdict[(r,l)])
    elif mom.split('_')[0] == 'zp':
        pops = mom.split('_')[1:]
        pop1 = int(pops[0])
        pop2 = int(pops[1])
        if pop1 == pop2:
            i = pop1
            mom2s.append('zp_{0}_{0}'.format(i))
            vals.append( -2.*np.sum([mdict[(j,i)] for j in all_pops]) )
            for j in all_pops:
                if j != i:
                    mom2s.append('zp_{0}_{1}'.format(i,j))
                    vals.append( 2.*mdict[(j,i)] )
        else:
            i = pop1
            j = pop2
            mom2s.append('zp_{0}_{1}'.format(i,j))
            vals.append( -np.sum([mdict[(k,i)] for k in all_pops]) -np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zp_{0}_{1}'.format(j,k))
                    vals.append( mdict[(k,i)] )
                if k != j:
                    mom2s.append('zp_{0}_{1}'.format(i,k))
                    vals.append( mdict[(k,j)] )
    elif mom.split('_')[0] == 'zq':
        pops = mom.split('_')[1:]
        pop1 = int(pops[0])
        pop2 = int(pops[1])
        if pop1 == pop2:
            i = pop1
            mom2s.append('zq_{0}_{0}'.format(i))
            vals.append( -2.*np.sum([mdict[(j,i)] for j in all_pops]) )
            for j in all_pops:
                if j != i:
                    mom2s.append('zq_{0}_{1}'.format(i,j))
                    vals.append( 2.*mdict[(j,i)] )
        else:
            i = pop1
            j = pop2
            mom2s.append('zq_{0}_{1}'.format(i,j))
            vals.append( -np.sum([mdict[(k,i)] for k in all_pops]) -np.sum([mdict[(k,j)] for k in all_pops]) )
            for k in all_pops:
                if k != i:
                    mom2s.append('zq_{0}_{1}'.format(j,k))
                    vals.append( mdict[(k,i)] )
                if k != j:
                    mom2s.append('zq_{0}_{1}'.format(i,k))
                    vals.append( mdict[(k,j)] )
    
    return mom2s, vals

mom_map = {}
def map_moment(mom):
    try:
        return mom_map[mom]
    except KeyError:
        if mom.split('_')[0] == 'DD':
            pops = sorted([int(p) for p in mom.split('_')[1:]])
            mom_out = 'DD_'+'_'.join([str(p) for p in pops])
            mom_map[mom] = mom_out
        elif mom.split('_')[0] == 'zz':
            popsp = sorted([int(p) for p in mom.split('_')[1:3]])
            popsq = sorted([int(p) for p in mom.split('_')[3:]])
            mom_out = 'zz_'+'_'.join([str(p) for p in popsp])+'_'+'_'.join([str(p) for p in popsq])
            mom_map[mom] = mom_out
        elif mom.split('_')[0] == 'zp':
            pops = sorted([int(p) for p in mom.split('_')[1:]])
            mom_out = 'zp_'+'_'.join([str(p) for p in pops])
            mom_map[mom] = mom_out
        elif mom.split('_')[0] == 'zq':
            pops = sorted([int(p) for p in mom.split('_')[1:]])
            mom_out = 'zq_'+'_'.join([str(p) for p in pops])
            mom_map[mom] = mom_out
        else:
            mom_out = mom
        mom_map[mom] = mom_out
        return mom_map[mom] 

def admix_npops(n_pops, pop1, pop2, f, moms_from, moms_to):
    # not going to comment this fucking mess
    A = np.zeros((len(moms_to), len(moms_from)))
    for ii,mom_to in enumerate(moms_to):
        if mom_to in moms_from: # moments that don't include the new population are unchanged
            A[ii, moms_from.index(mom_to)] = 1
        else:
            mom = mom_to.split('_')[0]
            pops = [int(p) for p in mom_to.split('_')[1:]]
            if mom == 'DD':
                if pops[0] == pops[1]: # D_new^2
                    A[ii, moms_from.index('DD_{0}_{0}'.format(pop1))] = f**2
                    A[ii, moms_from.index('DD_{0}_{1}'.format(pop1,pop2))] = 2*f*(1-f)
                    A[ii, moms_from.index('DD_{0}_{0}'.format(pop2))] = (1-f)**2
                    A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1))] = 1./2*(1-f)*f**2
                    A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = -1./2*(1-f)*f**2
                    A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = -1./2*(1-f)*f**2
                    A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = 1./2*(1-f)*f**2
                    A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = 1./2*(1-f)**2*f
                    A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = -1./2*(1-f)**2*f
                    A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = -1./2*(1-f)**2*f
                    A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = 1./2*(1-f)**2*f
                    A[ii, moms_from.index('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2))] = 1./16*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = -1./8*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2))] = 1./16*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./8*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = -1./8*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2))] = 1./16*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./8*(1-f)**2*f**2
                    A[ii, moms_from.index('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./16*(1-f)**2*f**2
                elif pops[0] == pop1: # D_pop1 D_new
                    A[ii, moms_from.index('DD_{0}_{0}'.format(pop1))] = f
                    A[ii, moms_from.index('DD_{0}_{1}'.format(pop1,pop2))] = 1-f
                    A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = 1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = -1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                elif pops[0] == pop2: # D_pop2 D_new
                    A[ii, moms_from.index('DD_{0}_{1}'.format(pop1,pop2))] = f
                    A[ii, moms_from.index('DD_{0}_{0}'.format(pop2))] = 1-f
                    A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = 1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = -1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                else: # D_other D_new
                    A[ii, moms_from.index(map_moment('DD_{0}_{1}'.format(pop1,pops[0])))] = f
                    A[ii, moms_from.index(map_moment('DD_{0}_{1}'.format(pop2,pops[0])))] = 1-f
                    A[ii, moms_from.index('Dz_{2}_{0}_{0}'.format(pop1,pop2,pops[0]))] = 1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{2}_{0}_{1}'.format(pop1,pop2,pops[0]))] = -1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{2}_{1}_{0}'.format(pop1,pop2,pops[0]))] = -1./4*f*(1-f)
                    A[ii, moms_from.index('Dz_{2}_{1}_{1}'.format(pop1,pop2,pops[0]))] = 1./4*f*(1-f)
            if mom == 'Dz':
                if pops[0] == pops[1] == pops[2]: # this is D_{n+1}(1-2p_{n+1})(1-2q_{n+1})
                    A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f**3
                    A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = f**2*(1-f)
                    A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = f**2*(1-f)
                    A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = f*(1-f)**2
                    A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = f**2*(1-f)
                    A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = f*(1-f)**2
                    A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = f*(1-f)**2
                    A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = (1-f)**3
                    A[ii, moms_from.index('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2))] = 1./4*(1-f)*f**3
                    A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = 1./4*f**2*(1-f)*(1-2*f)
                    A[ii, moms_from.index('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2))] = -1./4*f**2*(1-f)**2
                    A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = 1./4*f**2*(1-f)*(1-2*f)
                    A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*(1-2*f)**2*(1-f)*f
                    A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = -1./4*(1-f)**2*f*(1-2*f)
                    A[ii, moms_from.index('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./4*f**2*(1-f)**2
                    A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-2*f)*(1-f)**2
                    A[ii, moms_from.index('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)**3
                elif pops[0] == pops[1] == n_pops+1:
                    if pops[2] == pop1:
                        A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = (1-f)**2
                        A[ii, moms_from.index('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2))] = 1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = -1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = 1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./4*f*(1-f)**2
                        A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)**2
                    elif pops[2] == pop2:
                        A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = (1-f)**2
                        A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = 1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2))] = -1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)**2
                        A[ii, moms_from.index('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)**2
                    else:
                        A[ii, moms_from.index('Dz_{0}_{0}_{2}'.format(pop1,pop2,pops[2]))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{1}_{2}'.format(pop1,pop2,pops[2]))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{0}_{2}'.format(pop1,pop2,pops[2]))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{2}'.format(pop1,pop2,pops[2]))] = (1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f*(1-f)**2
                elif pops[0] == pops[2] == n_pops+1:
                    if pops[1] == pop1:
                        A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = (1-f)**2
                        A[ii, moms_from.index('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2))] = 1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)**2
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)**2
                    elif pops[1] == pop2:
                        A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = (1-f)**2
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = 1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)**2
                        A[ii, moms_from.index('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./4*f**2*(1-f)
                        A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)**2
                    else:
                        A[ii, moms_from.index('Dz_{0}_{2}_{0}'.format(pop1,pop2,pops[1]))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{2}_{1}'.format(pop1,pop2,pops[1]))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{2}_{0}'.format(pop1,pop2,pops[1]))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{2}_{1}'.format(pop1,pop2,pops[1]))] = (1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = 1./4*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = -1./4*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)*(1-2*f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)**2
                elif pops[1] == pops[2] == n_pops+1:
                    if pops[0] == pop1:
                        A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f**2
                        A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = (1-f)**2
                    elif pops[0] == pop2:
                        A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = f**2
                        A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = (1-f)**2
                    else:
                        A[ii, moms_from.index('Dz_{2}_{0}_{0}'.format(pop1,pop2,pops[0]))] = f**2
                        A[ii, moms_from.index('Dz_{2}_{0}_{1}'.format(pop1,pop2,pops[0]))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{2}_{1}_{0}'.format(pop1,pop2,pops[0]))] = f*(1-f)
                        A[ii, moms_from.index('Dz_{2}_{1}_{1}'.format(pop1,pop2,pops[0]))] = (1-f)**2
                elif pops[0] == n_pops+1:
                    if pops[1] == pop1:
                        if pops[2] == pop1:
                            A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = (1-f)
                            A[ii, moms_from.index('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2))] = 1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                        elif pops[2] == pop2:
                            A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = (1-f)
                            A[ii, moms_from.index('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                        else:
                            A[ii, moms_from.index('Dz_{0}_{0}_{2}'.format(pop1,pop2,pops[2]))] = f
                            A[ii, moms_from.index('Dz_{1}_{0}_{2}'.format(pop1,pop2,pops[2]))] = (1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f*(1-f)
                    elif pops[1] == pop2:
                        if pops[2] == pop1:
                            A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = (1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2))] = 1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                        elif pops[2] == pop2:
                            A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = (1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2))] = -1./4*f*(1-f)
                            A[ii, moms_from.index('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2))] = 1./4*f*(1-f)
                        else:
                            A[ii, moms_from.index('Dz_{0}_{1}_{2}'.format(pop1,pop2,pops[2]))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{2}'.format(pop1,pop2,pops[2]))] = (1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1./4*f*(1-f)
                    else:
                        if pops[2] == pop1:
                            A[ii, moms_from.index('Dz_{0}_{2}_{0}'.format(pop1,pop2,pops[1]))] = f
                            A[ii, moms_from.index('Dz_{1}_{2}_{0}'.format(pop1,pop2,pops[1]))] = (1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)
                        elif pops[2] == pop2:
                            A[ii, moms_from.index('Dz_{0}_{2}_{1}'.format(pop1,pop2,pops[1]))] = f
                            A[ii, moms_from.index('Dz_{1}_{2}_{1}'.format(pop1,pop2,pops[1]))] = (1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)
                            A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)
                        else:
                            if pops[1] == pops[2]:
                                A[ii, moms_from.index('Dz_{0}_{2}_{2}'.format(pop1,pop2,pops[1]))] = f
                                A[ii, moms_from.index('Dz_{1}_{2}_{2}'.format(pop1,pop2,pops[1]))] = (1-f)
                                A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{2}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)
                                A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{2}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)
                                A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{2}'.format(pop1,pop2,pops[1])))] = -1./4*f*(1-f)
                                A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{2}'.format(pop1,pop2,pops[1])))] = 1./4*f*(1-f)
                            else:
                                A[ii, moms_from.index('Dz_{0}_{2}_{3}'.format(pop1,pop2,pops[1],pops[2]))] = f
                                A[ii, moms_from.index('Dz_{1}_{2}_{3}'.format(pop1,pop2,pops[1],pops[2]))] = (1-f)
                                A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = 1./4*f*(1-f)
                                A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = -1./4*f*(1-f)
                                A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = -1./4*f*(1-f)
                                A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = 1./4*f*(1-f)
                elif pops[1] == n_pops+1:
                    if pops[0] == pop1:
                        if pops[2] == pop1:
                            A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = 1-f
                        elif pops[2] == pop2:
                            A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = 1-f
                        else:
                            A[ii, moms_from.index('Dz_{0}_{0}_{2}'.format(pop1,pop2,pops[2]))] = f
                            A[ii, moms_from.index('Dz_{0}_{1}_{2}'.format(pop1,pop2,pops[2]))] = 1-f
                    elif pops[0] == pop2:
                        if pops[2] == pop1:
                            A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = 1-f
                        elif pops[2] == pop2:
                            A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = 1-f
                        else:
                            A[ii, moms_from.index('Dz_{1}_{0}_{2}'.format(pop1,pop2,pops[2]))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{2}'.format(pop1,pop2,pops[2]))] = 1-f
                    else:
                        if pops[2] == pop1:
                            A[ii, moms_from.index('Dz_{2}_{0}_{0}'.format(pop1,pop2,pops[0]))] = f
                            A[ii, moms_from.index('Dz_{2}_{1}_{0}'.format(pop1,pop2,pops[0]))] = 1-f
                        elif pops[2] == pop2:
                            A[ii, moms_from.index('Dz_{2}_{0}_{1}'.format(pop1,pop2,pops[0]))] = f
                            A[ii, moms_from.index('Dz_{2}_{1}_{1}'.format(pop1,pop2,pops[0]))] = 1-f
                        else:
                            if pops[0] == pops[2]:
                                A[ii, moms_from.index('Dz_{2}_{0}_{2}'.format(pop1,pop2,pops[0]))] = f
                                A[ii, moms_from.index('Dz_{2}_{1}_{2}'.format(pop1,pop2,pops[0]))] = 1-f
                            else:
                                A[ii, moms_from.index('Dz_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2]))] = f
                                A[ii, moms_from.index('Dz_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2]))] = 1-f
                elif pops[2] == n_pops+1:
                    if pops[0] == pop1:
                        if pops[1] == pop1:
                            A[ii, moms_from.index('Dz_{0}_{0}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{0}_{0}_{1}'.format(pop1,pop2))] = 1-f
                        elif pops[1] == pop2:
                            A[ii, moms_from.index('Dz_{0}_{1}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{0}_{1}_{1}'.format(pop1,pop2))] = 1-f
                        else:
                            A[ii, moms_from.index('Dz_{0}_{2}_{0}'.format(pop1,pop2,pops[1]))] = f
                            A[ii, moms_from.index('Dz_{0}_{2}_{1}'.format(pop1,pop2,pops[1]))] = 1-f
                    elif pops[0] == pop2:
                        if pops[1] == pop1:
                            A[ii, moms_from.index('Dz_{1}_{0}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{0}_{1}'.format(pop1,pop2))] = 1-f
                        elif pops[1] == pop2:
                            A[ii, moms_from.index('Dz_{1}_{1}_{0}'.format(pop1,pop2))] = f
                            A[ii, moms_from.index('Dz_{1}_{1}_{1}'.format(pop1,pop2))] = 1-f
                        else:
                            A[ii, moms_from.index('Dz_{1}_{2}_{0}'.format(pop1,pop2,pops[1]))] = f
                            A[ii, moms_from.index('Dz_{1}_{2}_{1}'.format(pop1,pop2,pops[1]))] = 1-f
                    else:
                        if pops[1] == pop1:
                            A[ii, moms_from.index('Dz_{2}_{0}_{0}'.format(pop1,pop2,pops[0]))] = f
                            A[ii, moms_from.index('Dz_{2}_{0}_{1}'.format(pop1,pop2,pops[0]))] = 1-f
                        elif pops[1] == pop2:
                            A[ii, moms_from.index('Dz_{2}_{1}_{0}'.format(pop1,pop2,pops[0]))] = f
                            A[ii, moms_from.index('Dz_{2}_{1}_{1}'.format(pop1,pop2,pops[0]))] = 1-f
                        else:
                            if pops[0] == pops[1]:
                                A[ii, moms_from.index('Dz_{2}_{2}_{0}'.format(pop1,pop2,pops[0]))] = f
                                A[ii, moms_from.index('Dz_{2}_{2}_{1}'.format(pop1,pop2,pops[0]))] = 1-f
                            else:
                                A[ii, moms_from.index('Dz_{2}_{3}_{0}'.format(pop1,pop2,pops[0],pops[1]))] = f
                                A[ii, moms_from.index('Dz_{2}_{3}_{1}'.format(pop1,pop2,pops[0],pops[1]))] = 1-f

            if mom == 'zz':
                if pops[0] == pops[1] == n_pops+1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f**4
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = 2*f**3*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = f**2*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = 2*(1-f)*f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 4*(1-f)**2*f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = 2*(1-f)**3*f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = f**2*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)**3
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**4
                    elif pops[2] == pop1 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = 2*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*(1-f)**2*f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = (1-f)**3
                    elif pops[2] == pop2 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = 2*(1-f)**2*f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**3
                    elif pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 2*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 2*(1-f)**2*f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = (1-f)**3
                    elif pops[2] == pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop1 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[3])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[3])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[3])))] = (1-f)**2
                    elif pops[2] == pop2 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[3])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[3])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[3])))] = (1-f)**2
                    elif pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = (1-f)**2
                    elif pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = (1-f)**2
                    elif pops[2] == pops[3]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{2}_{2}'.format(pop1,pop2,pops[2])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{2}_{2}'.format(pop1,pop2,pops[2])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{2}_{2}'.format(pop1,pop2,pops[2])))] = (1-f)**2
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = (1-f)**2
                
                elif pops[0] == pop1 and pops[1] == n_pops+1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = 2*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = (1-f)*f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*(1-f)**2*f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**3
                    elif pops[2] == pop1 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop2 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = (1-f)**2
                    elif pops[2] == pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop1 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[3])))] = 1-f
                    elif pops[2] == pop2 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[3])))] = 1-f
                    elif pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                    elif pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                    elif pops[2] == pops[3]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{2}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{2}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = 1-f

                elif pops[0] == pop2 and pops[1] == n_pops+1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = (1-f)*f**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*(1-f)**2*f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**3
                    elif pops[2] == pop1 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop2 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = (1-f)**2
                    elif pops[2] == pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop1 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[3])))] = 1-f
                    elif pops[2] == pop2 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[3])))] = 1-f
                    elif pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                    elif pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                    elif pops[2] == pops[3]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{2}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{2}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{2}_{3}'.format(pop1,pop2,pops[2],pops[3])))] = 1-f

                elif pops[1] == n_pops+1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f**3
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 2*f**2*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = f*(1-f)**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = (1-f)*f**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 2*(1-f)**2*f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = (1-f)**3
                    elif pops[2] == pop1 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = (1-f)**2
                    elif pops[2] == pop2 and pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = (1-f)**2
                    elif pops[3] == n_pops+1 and pops[0] == pops[2]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = (1-f)**2
                    elif pops[3] == n_pops+1 and pops[0] != pops[2]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = (1-f)**2
                    elif pops[2] == pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop1 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop1 and pops[3] == pops[0]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop1 and pops[3] != pops[0]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[3])))] = 1-f
                    elif pops[2] == pop2 and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop2 and pops[3] == pops[0]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop2 and pops[3] != pops[0]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[3])))] = 1-f
                    elif pops[2] == pops[0] and pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pops[0] and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pops[0] and pops[3] == pops[2]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{2}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{2}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pops[0] and pops[3] != pops[2]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{2}_{3}'.format(pop1,pop2,pops[0],pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{2}_{3}'.format(pop1,pop2,pops[0],pops[3])))] = 1-f
                    elif pops[2] != pops[0] and pops[3] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                    elif pops[2] != pops[0] and pops[3] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                    elif pops[2] != pops[0] and pops[3] == pops[0]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{2}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{2}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                    elif pops[2] != pops[0] and pops[3] == pops[2]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{3}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{3}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                    elif pops[2] != pops[0] and pops[3] != pops[2]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{3}_{4}'.format(pop1,pop2,pops[0],pops[2],pops[3])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{3}_{4}'.format(pop1,pop2,pops[0],pops[2],pops[3])))] = 1-f
                        
                elif pops[0] == pops[1] == pop1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{0}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{1}'.format(pop1,pop2)))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{0}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                        
                elif pops[0] == pop1 and pops[1] == pop2:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{0}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{1}'.format(pop1,pop2)))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1-f

                elif pops[0] == pop1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = 1-f
                    elif pops[2] == pops[1]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{2}'.format(pop1,pop2,pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{2}'.format(pop1,pop2,pops[1])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = 1-f
                
                elif pops[0] == pops[1] == pop2:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{0}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{1}'.format(pop1,pop2)))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{1}'.format(pop1,pop2)))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{0}_{2}'.format(pop1,pop2,pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{1}_{1}_{2}'.format(pop1,pop2,pops[2])))] = 1-f
                
                elif pops[0] == pop2:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[1])))] = 1-f
                    elif pops[2] == pops[1]:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{2}'.format(pop1,pop2,pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{2}'.format(pop1,pop2,pops[1])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{3}'.format(pop1,pop2,pops[1],pops[2])))] = 1-f
                        
                elif pops[1] == pop1:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pops[1]:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{0}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                    
                elif pops[1] == pop2:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pops[1]:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{1}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                        
                elif pops[0] == pops[1]:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{0}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{1}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{1}_{1}'.format(pop1,pop2,pops[0])))] = 1-f
                    elif pops[2] == pops[1]:
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{0}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{2}_{1}_{3}'.format(pop1,pop2,pops[0],pops[2])))] = 1-f
                        
                else:
                    if pops[2] == pops[3] == n_pops+1:
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{0}'.format(pop1,pop2,pops[0],pops[1])))] = f**2
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{1}'.format(pop1,pop2,pops[0],pops[1])))] = 2*f*(1-f)
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{1}_{1}'.format(pop1,pop2,pops[0],pops[1])))] = (1-f)**2
                    elif pops[2] == pop1:
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{0}'.format(pop1,pop2,pops[0],pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{1}'.format(pop1,pop2,pops[0],pops[1])))] = 1-f
                    elif pops[2] == pop2:
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{1}'.format(pop1,pop2,pops[0],pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{1}_{1}'.format(pop1,pop2,pops[0],pops[1])))] = 1-f
                    elif pops[2] == pops[0]:
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{2}'.format(pop1,pop2,pops[0],pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{1}_{2}'.format(pop1,pop2,pops[0],pops[1])))] = 1-f
                    elif pops[2] == pops[1]:
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{3}'.format(pop1,pop2,pops[0],pops[1])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{1}_{3}'.format(pop1,pop2,pops[0],pops[1])))] = 1-f
                    else:
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{0}_{4}'.format(pop1,pop2,pops[0],pops[1],pops[2])))] = f
                        A[ii, moms_from.index(map_moment('zz_{2}_{3}_{1}_{4}'.format(pop1,pop2,pops[0],pops[1],pops[2])))] = 1-f
                
            if mom == 'zp':
                if pops[0] == pops[1] == n_pops+1:
                    A[ii, moms_from.index(map_moment('zp_{0}_{0}'.format(pop1,pop2)))] = f**2
                    A[ii, moms_from.index(map_moment('zp_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                    A[ii, moms_from.index(map_moment('zp_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                elif pops[0] == pop1:
                    A[ii, moms_from.index(map_moment('zp_{0}_{0}'.format(pop1,pop2)))] = f
                    A[ii, moms_from.index(map_moment('zp_{0}_{1}'.format(pop1,pop2)))] = 1-f
                elif pops[0] == pop2:
                    A[ii, moms_from.index(map_moment('zp_{0}_{1}'.format(pop1,pop2)))] = f
                    A[ii, moms_from.index(map_moment('zp_{1}_{1}'.format(pop1,pop2)))] = 1-f
                else:
                    A[ii, moms_from.index(map_moment('zp_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                    A[ii, moms_from.index(map_moment('zp_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f
            
            if mom == 'zq':
                if pops[0] == pops[1] == n_pops+1:
                    A[ii, moms_from.index(map_moment('zq_{0}_{0}'.format(pop1,pop2)))] = f**2
                    A[ii, moms_from.index(map_moment('zq_{0}_{1}'.format(pop1,pop2)))] = 2*f*(1-f)
                    A[ii, moms_from.index(map_moment('zq_{1}_{1}'.format(pop1,pop2)))] = (1-f)**2
                elif pops[0] == pop1:
                    A[ii, moms_from.index(map_moment('zq_{0}_{0}'.format(pop1,pop2)))] = f
                    A[ii, moms_from.index(map_moment('zq_{0}_{1}'.format(pop1,pop2)))] = 1-f
                elif pops[0] == pop2:
                    A[ii, moms_from.index(map_moment('zq_{0}_{1}'.format(pop1,pop2)))] = f
                    A[ii, moms_from.index(map_moment('zq_{1}_{1}'.format(pop1,pop2)))] = 1-f
                else:
                    A[ii, moms_from.index(map_moment('zq_{0}_{2}'.format(pop1,pop2,pops[0])))] = f
                    A[ii, moms_from.index(map_moment('zq_{1}_{2}'.format(pop1,pop2,pops[0])))] = 1-f

    return A

# based on the order of moments in numerics_onepop.moment_names(n)
# order n moments only rely on order n and order n-2, so we will build our csc_matrices recursively

drift_dict = {}

drift_dict[0] = {}
drift_dict[0]['row'] = [0]
drift_dict[0]['col'] = [0]
drift_dict[0]['data'] = [0]
drift_dict[0]['size'] = (1, 1)

drift_dict[1] = {}
drift_dict[1]['row'] = [0,1]
drift_dict[1]['col'] = [0,0]
drift_dict[1]['data'] = [-1,4]
drift_dict[1]['size'] = (2, 2)

drift_dict[2] = {}
drift_dict[2]['row'] = [0,0,0,1,1,2,2,3,4]
drift_dict[2]['col'] = [0,1,2,0,1,1,2,3,4]
drift_dict[2]['data'] = [-3,1,1,4,-5,1,-2,-1,-1]
drift_dict[2]['size'] = (5, 6)

drift_dict[3] = {}
drift_dict[3]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,3,3,3,3,4,4,5,5,5]
drift_dict[3]['col'] = [0,1,2,0,1,2,3,4,6,1,2,4,2,3,4,6,4,6,4,5,6]
drift_dict[3]['data'] = [-6,3,3,4,-11,16,1,-4,1,1,-11,1,36,-6,-6,1,-6,2,12,-3,-4]
drift_dict[3]['size'] = (6, 8)

drift_dict[4] = {}
drift_dict[4]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,8,8,9,9]
drift_dict[4]['col'] = [0,1,2,0,1,2,3,5,10,1,2,3,4,5,2,3,5,6,10,3,4,7,5,6,7,10,5,6,10,11,6,7,12,8,13,9,14]
drift_dict[4]['data'] = [-10,6,6,4,-18,48,3,-12,3,1,-21,1,1,2,36,-19,-6,1,1,4,-12,1,-12,1,1,4,12,-12,-4,2,2,-7,2,-6,1,-6,1]
drift_dict[4]['size'] = (10, 15)

drift_dict[5] = {}
drift_dict[5]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,5,5,5,5,5,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,10,10,11,11,11,11]
drift_dict[5]['col'] = [0,1,2,0,1,2,3,6,12,1,2,3,4,6,2,3,4,5,6,7,8,12,14,3,4,8,4,5,8,9,14,6,7,8,12,6,7,8,9,10,12,13,14,16,7,8,10,14,8,9,10,14,15,16,10,16,10,11,16,17]
drift_dict[5]['data'] = [-15,10,10,4,-26,96,6,-24,6,1,-32,3,3,3,36,-33,16,1,-6,2,-4,1,1,4,-29,3,100,-20,-20,1,4,-19,3,3,6,12,-22,16,1,-4,-4,4,-8,1,2,-20,1,6,60,-13,-10,-24,2,2,-15,3,20,-10,-4,1]
drift_dict[5]['size'] = (12, 18)

drift_dict[6] = {}
drift_dict[6]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,6,6,6,7,7,7,7,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,10,10,10,10,10,10,10,11,11,11,11,12,12,12,12,13,13,13,13,14,14,14,15,15,16,16]
drift_dict[6]['col'] = [0,1,2,0,1,2,3,7,17,1,2,3,4,7,2,3,4,5,7,8,9,17,19,3,4,5,6,9,4,5,9,10,19,5,6,11,7,8,9,17,7,8,9,10,12,17,18,19,22,8,9,10,11,12,19,9,10,12,13,19,20,22,10,11,14,21,12,13,14,22,12,13,22,23,13,14,24,15,25,16,26]
drift_dict[6]['data'] = [-21,15,15,4,-35,160,10,-40,10,1,-44,6,6,4,36,-48,48,3,-6,3,-12,1,3,4,-47,1,1,5,100,-41,-20,3,4,9,-30,3,-27,6,6,8,12,-33,48,3,-12,-4,6,-24,3,2,-34,1,1,2,10,60,-30,-10,1,-24,6,2,6,-21,1,6,-25,1,1,5,20,-23,-4,3,3,-16,3,-15,3,-15,3]
drift_dict[6]['size'] = (17, 27)

drift_dict[7] = {}
drift_dict[7]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,7,7,7,7,7,8,8,8,8,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,13,13,13,13,13,14,14,14,14,15,15,15,15,15,15,15,15,15,16,16,16,16,17,17,17,17,17,17,18,18,19,19,19,19]
drift_dict[7]['col'] = [0,1,2,0,1,2,3,8,20,1,2,3,4,8,2,3,4,5,8,9,10,20,22,3,4,5,6,10,4,5,6,7,10,11,12,22,24,5,6,12,6,7,12,13,24,8,9,10,20,8,9,10,11,14,20,21,22,26,9,10,11,12,14,22,10,11,12,13,14,15,16,22,23,24,26,28,11,12,16,24,12,13,16,17,24,25,28,14,15,16,26,14,15,16,17,18,26,27,28,30,15,16,18,28,16,17,18,28,29,30,18,30,18,19,30,31]
drift_dict[7]['data'] = [-28,21,21,4,-45,240,15,-60,15,1,-57,10,10,5,36,-64,96,6,-6,4,-24,1,6,4,-66,3,3,7,100,-63,16,1,-20,5,-4,4,1,9,-55,6,196,-42,-42,3,9,-36,10,10,10,12,-45,96,6,-24,-4,8,-48,6,2,-49,3,3,3,14,60,-48,16,1,-10,2,-4,-24,10,-8,2,1,6,-42,3,12,140,-31,-28,1,-60,6,6,-36,3,3,7,20,-37,16,1,-4,-4,5,-4,1,3,-33,1,6,84,-24,-14,-18,3,3,-28,6,28,-21,-6,3]
drift_dict[7]['size'] = (20, 32)

drift_dict[8] = {}
drift_dict[8]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,8,8,8,9,9,9,9,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,19,19,19,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,24,24,25,25]
drift_dict[8]['col'] = [0,1,2,0,1,2,3,9,26,1,2,3,4,9,2,3,4,5,9,10,11,26,28,3,4,5,6,11,4,5,6,7,11,12,13,28,30,5,6,7,8,13,6,7,13,14,30,7,8,15,9,10,11,26,9,10,11,12,16,26,27,28,33,10,11,12,13,16,28,11,12,13,14,16,17,18,28,29,30,33,35,12,13,14,15,18,30,13,14,18,19,30,31,35,14,15,20,32,16,17,18,33,16,17,18,19,21,33,34,35,38,17,18,19,20,21,35,18,19,21,22,35,36,38,19,20,23,37,21,22,23,38,21,22,38,39,22,23,40,24,41,25,42]
drift_dict[8]['data'] = [-36,28,28,4,-56,336,21,-84,21,1,-71,15,15,6,36,-81,160,10,-6,5,-40,1,10,4,-86,6,6,9,100,-86,48,3,-20,7,-12,4,3,9,-81,1,1,9,196,-71,-42,6,9,16,-56,6,-46,15,15,12,12,-58,160,10,-40,-4,10,-80,10,2,-65,6,6,4,18,60,-67,48,3,-10,3,-12,-24,14,-24,2,3,6,-64,1,1,5,18,140,-56,-28,3,-60,12,6,12,-43,3,12,-48,6,6,9,20,-52,48,3,-12,-4,7,-12,3,3,-51,1,1,2,9,84,-45,-14,1,-18,6,3,8,-34,1,6,-42,1,1,9,28,-38,-6,6,4,-29,6,-28,6,-28,6]
drift_dict[8]['size'] = (26, 43)

drift_dict[9] = {}
drift_dict[9]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,9,9,9,9,9,10,10,10,10,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,17,17,17,17,17,17,17,18,18,18,18,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,23,23,23,23,23,23,23,24,24,24,24,25,25,25,25,25,25,25,25,25,26,26,26,26,27,27,27,27,27,27,28,28,29,29,29,29]
drift_dict[9]['col'] = [0,1,2,0,1,2,3,10,30,1,2,3,4,10,2,3,4,5,10,11,12,30,32,3,4,5,6,12,4,5,6,7,12,13,14,32,34,5,6,7,8,14,6,7,8,9,14,15,16,34,36,7,8,16,8,9,16,17,36,10,11,12,30,10,11,12,13,18,30,31,32,38,11,12,13,14,18,32,12,13,14,15,18,19,20,32,33,34,38,40,13,14,15,16,20,34,14,15,16,17,20,21,22,34,35,36,40,42,15,16,22,36,16,17,22,23,36,37,42,18,19,20,38,18,19,20,21,24,38,39,40,44,19,20,21,22,24,40,20,21,22,23,24,25,26,40,41,42,44,46,21,22,26,42,22,23,26,27,42,43,46,24,25,26,44,24,25,26,27,28,44,45,46,48,25,26,28,46,26,27,28,46,47,48,28,48,28,29,48,49]
drift_dict[9]['data'] = [-45,36,36,4,-68,448,28,-112,28,1,-86,21,21,7,36,-99,240,15,-6,6,-60,1,15,4,-107,10,10,11,100,-110,96,6,-20,9,-24,4,6,9,-108,3,3,12,196,-101,16,1,-42,9,-4,9,1,16,-89,10,324,-72,-72,6,16,-57,21,21,14,12,-72,240,15,-60,-4,12,-120,15,2,-82,10,10,5,22,60,-87,96,6,-10,4,-24,-24,18,-48,2,6,6,-87,3,3,7,24,140,-82,16,1,-28,5,-4,-60,18,-8,6,1,12,-72,6,20,252,-57,-54,3,-112,12,12,-61,10,10,11,20,-68,96,6,-24,-4,9,-24,6,3,-70,3,3,3,12,84,-67,16,1,-14,2,-4,-18,9,-4,3,1,8,-59,3,10,180,-46,-36,1,-40,6,8,-57,3,3,12,28,-56,16,1,-4,-6,9,-4,1,4,-50,1,10,108,-39,-18,-24,6,4,-45,10,36,-36,-8,6]
drift_dict[9]['size'] = (30, 50)

drift_dict[10] = {}
drift_dict[10]['row'] = [0,0,0,1,1,1,1,1,1,2,2,2,2,2,3,3,3,3,3,3,3,3,3,4,4,4,4,4,5,5,5,5,5,5,5,5,5,6,6,6,6,6,7,7,7,7,7,7,7,7,7,8,8,8,8,8,9,9,9,9,9,10,10,10,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,18,18,18,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,25,25,25,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,30,30,30,30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,35,35,36,36]
drift_dict[10]['col'] = [0,1,2,0,1,2,3,11,37,1,2,3,4,11,2,3,4,5,11,12,13,37,39,3,4,5,6,13,4,5,6,7,13,14,15,39,41,5,6,7,8,15,6,7,8,9,15,16,17,41,43,7,8,9,10,17,8,9,17,18,43,9,10,19,11,12,13,37,11,12,13,14,20,37,38,39,46,12,13,14,15,20,39,13,14,15,16,20,21,22,39,40,41,46,48,14,15,16,17,22,41,15,16,17,18,22,23,24,41,42,43,48,50,16,17,18,19,24,43,17,18,24,25,43,44,50,18,19,26,45,20,21,22,46,20,21,22,23,27,46,47,48,53,21,22,23,24,27,48,22,23,24,25,27,28,29,48,49,50,53,55,23,24,25,26,29,50,24,25,29,30,50,51,55,25,26,31,52,27,28,29,53,27,28,29,30,32,53,54,55,58,28,29,30,31,32,55,29,30,32,33,55,56,58,30,31,34,57,32,33,34,58,32,33,58,59,33,34,60,35,61,36,62]
drift_dict[10]['data'] = [-55,45,45,4,-81,576,36,-144,36,1,-102,28,28,8,36,-118,336,21,-6,7,-84,1,21,4,-129,15,15,13,100,-135,160,10,-20,11,-40,4,10,9,-136,6,6,15,196,-132,48,3,-42,12,-12,9,3,16,-123,1,1,14,324,-109,-72,10,16,25,-90,10,-69,28,28,16,12,-87,336,21,-84,-4,14,-168,21,2,-100,15,15,6,26,60,-108,160,10,-10,5,-40,-24,22,-80,2,10,6,-111,6,6,9,30,140,-109,48,3,-28,7,-12,-60,24,-24,6,3,12,-102,1,1,9,28,252,-90,-54,6,-112,20,12,20,-73,6,20,-75,15,15,13,20,-85,160,10,-40,-4,11,-40,10,3,-90,6,6,4,15,84,-90,48,3,-14,3,-12,-18,12,-12,3,3,8,-85,1,1,5,14,180,-75,-36,3,-40,10,8,15,-60,3,10,-73,6,6,15,28,-75,48,3,-12,-6,12,-12,3,4,-72,1,1,2,14,108,-64,-18,1,-24,10,4,10,-51,1,10,-63,1,1,14,36,-57,-8,10,5,-46,10,-45,10,-45,10]
drift_dict[10]['size'] = (37, 63)


mut_dict = {}

mut_dict[0] = {}
mut_dict[0]['row'] = [0]
mut_dict[0]['col'] = [0]
mut_dict[0]['data'] = [0]
mut_dict[0]['size'] = (1, 1)

mut_dict[1] = {}
mut_dict[1]['row'] = [0,1]
mut_dict[1]['col'] = [0,1]
mut_dict[1]['data'] = [-2,-2]
mut_dict[1]['size'] = (2, 2)

mut_dict[2] = {}
mut_dict[2]['row'] = [0,1,2,2,2,3,3,4,4]
mut_dict[2]['col'] = [0,1,2,3,4,3,5,4,5]
mut_dict[2]['data'] = [-4,-4,-4,0.5,0.5,-2,0.5,-2,0.5]
mut_dict[2]['size'] = (5, 6)

mut_dict[3] = {}
mut_dict[3]['row'] = [0,1,2,2,3,3,4,4,5,5]
mut_dict[3]['col'] = [0,1,2,4,3,5,4,6,5,7]
mut_dict[3]['data'] = [-6,-6,-6,0.5,-6,0.5,-4,1,-4,1]
mut_dict[3]['size'] = (6, 8)

mut_dict[4] = {}
mut_dict[4]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,7,7,8,8,9,9]
mut_dict[4]['col'] = [0,1,2,5,3,6,4,7,5,10,6,11,7,8,9,12,8,13,9,14]
mut_dict[4]['data'] = [-8,-8,-8,0.5,-8,0.5,-8,1,-6,1,-6,1,-6,0.5,0.5,2,-4,1,-4,1]
mut_dict[4]['size'] = (10, 15)

mut_dict[5] = {}
mut_dict[5]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,8,9,9,9,10,10,11,11]
mut_dict[5]['col'] = [0,1,2,6,3,7,4,8,5,9,6,12,7,13,8,10,14,9,11,15,10,16,11,17]
mut_dict[5]['data'] = [-10,-10,-10,0.5,-10,0.5,-10,1,-10,1,-8,1,-8,1,-8,0.5,2,-8,0.5,2,-6,1,-6,1]
mut_dict[5]['size'] = (12, 18)

mut_dict[6] = {}
mut_dict[6]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,9,10,10,10,11,11,11,12,12,13,13,14,14,14,14,15,15,16,16]
mut_dict[6]['col'] = [0,1,2,7,3,8,4,9,5,10,6,11,7,17,8,18,9,12,19,10,13,20,11,14,21,12,22,13,23,14,15,16,24,15,25,16,26]
mut_dict[6]['data'] = [-12,-12,-12,0.5,-12,0.5,-12,1,-12,1,-12,1.5,-10,1,-10,1,-10,0.5,2,-10,0.5,2,-10,1,3,-8,1,-8,1,-8,0.5,0.5,1.5,-6,1.5,-6,1.5]
mut_dict[6]['size'] = (17, 27)

mut_dict[7] = {}
mut_dict[7]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,10,11,11,11,12,12,12,13,13,13,14,14,15,15,16,16,16,17,17,17,18,18,19,19]
mut_dict[7]['col'] = [0,1,2,8,3,9,4,10,5,11,6,12,7,13,8,20,9,21,10,14,22,11,15,23,12,16,24,13,17,25,14,26,15,27,16,18,28,17,19,29,18,30,19,31]
mut_dict[7]['data'] = [-14,-14,-14,0.5,-14,0.5,-14,1,-14,1,-14,1.5,-14,1.5,-12,1,-12,1,-12,0.5,2,-12,0.5,2,-12,1,3,-12,1,3,-10,1,-10,1,-10,0.5,1.5,-10,0.5,1.5,-8,1.5,-8,1.5]
mut_dict[7]['size'] = (20, 32)

mut_dict[8] = {}
mut_dict[8]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,17,17,18,18,18,19,19,19,20,20,20,21,21,22,22,23,23,23,23,24,24,25,25]
mut_dict[8]['col'] = [0,1,2,9,3,10,4,11,5,12,6,13,7,14,8,15,9,26,10,27,11,16,28,12,17,29,13,18,30,14,19,31,15,20,32,16,33,17,34,18,21,35,19,22,36,20,23,37,21,38,22,39,23,24,25,40,24,41,25,42]
mut_dict[8]['data'] = [-16,-16,-16,0.5,-16,0.5,-16,1,-16,1,-16,1.5,-16,1.5,-16,2,-14,1,-14,1,-14,0.5,2,-14,0.5,2,-14,1,3,-14,1,3,-14,1.5,4,-12,1,-12,1,-12,0.5,1.5,-12,0.5,1.5,-12,1,2,-10,1.5,-10,1.5,-10,0.5,0.5,2,-8,2,-8,2]
mut_dict[8]['size'] = (26, 43)

mut_dict[9] = {}
mut_dict[9]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,19,19,20,20,20,21,21,21,22,22,22,23,23,23,24,24,25,25,26,26,26,27,27,27,28,28,29,29]
mut_dict[9]['col'] = [0,1,2,10,3,11,4,12,5,13,6,14,7,15,8,16,9,17,10,30,11,31,12,18,32,13,19,33,14,20,34,15,21,35,16,22,36,17,23,37,18,38,19,39,20,24,40,21,25,41,22,26,42,23,27,43,24,44,25,45,26,28,46,27,29,47,28,48,29,49]
mut_dict[9]['data'] = [-18,-18,-18,0.5,-18,0.5,-18,1,-18,1,-18,1.5,-18,1.5,-18,2,-18,2,-16,1,-16,1,-16,0.5,2,-16,0.5,2,-16,1,3,-16,1,3,-16,1.5,4,-16,1.5,4,-14,1,-14,1,-14,0.5,1.5,-14,0.5,1.5,-14,1,2,-14,1,2,-12,1.5,-12,1.5,-12,0.5,2,-12,0.5,2,-10,2,-10,2]
mut_dict[9]['size'] = (30, 50)

mut_dict[10] = {}
mut_dict[10]['row'] = [0,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,13,14,14,14,15,15,15,16,16,16,17,17,17,18,18,18,19,19,19,20,20,21,21,22,22,22,23,23,23,24,24,24,25,25,25,26,26,26,27,27,28,28,29,29,29,30,30,30,31,31,31,32,32,33,33,34,34,34,34,35,35,36,36]
mut_dict[10]['col'] = [0,1,2,11,3,12,4,13,5,14,6,15,7,16,8,17,9,18,10,19,11,37,12,38,13,20,39,14,21,40,15,22,41,16,23,42,17,24,43,18,25,44,19,26,45,20,46,21,47,22,27,48,23,28,49,24,29,50,25,30,51,26,31,52,27,53,28,54,29,32,55,30,33,56,31,34,57,32,58,33,59,34,35,36,60,35,61,36,62]
mut_dict[10]['data'] = [-20,-20,-20,0.5,-20,0.5,-20,1,-20,1,-20,1.5,-20,1.5,-20,2,-20,2,-20,2.5,-18,1,-18,1,-18,0.5,2,-18,0.5,2,-18,1,3,-18,1,3,-18,1.5,4,-18,1.5,4,-18,2,5,-16,1,-16,1,-16,0.5,1.5,-16,0.5,1.5,-16,1,2,-16,1,2,-16,1.5,2.5,-14,1.5,-14,1.5,-14,0.5,2,-14,0.5,2,-14,1,2.5,-12,2,-12,2,-12,0.5,0.5,2.5,-10,2.5,-10,2.5]
mut_dict[10]['size'] = (37, 63)
